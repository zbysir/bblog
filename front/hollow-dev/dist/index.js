(()=>{var hh=Object.create;var Cl=Object.defineProperty;var dh=Object.getOwnPropertyDescriptor;var fh=Object.getOwnPropertyNames;var _h=Object.getPrototypeOf,ph=Object.prototype.hasOwnProperty;var Ve=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var vh=(e,t,r,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of fh(t))!ph.call(e,o)&&o!==r&&Cl(e,o,{get:()=>t[o],enumerable:!(s=dh(t,o))||s.enumerable});return e};var er=(e,t,r)=>(r=e!=null?hh(_h(e)):{},vh(t||!e||!e.__esModule?Cl(r,"default",{value:e,enumerable:!0}):r,e));var El=Ve((Ei,Gs)=>{(function(e,t){if(typeof Ei=="object"&&typeof Gs=="object")Gs.exports=t();else if(typeof define=="function"&&define.amd)define([],t);else{var r=t();for(var s in r)(typeof Ei=="object"?Ei:e)[s]=r[s]}})(self,function(){return(()=>{"use strict";var e={4567:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.AccessibilityManager=void 0;let a=n(9042),d=n(6114),_=n(9924),S=n(3656),m=n(844),v=n(5596),p=n(9631);class c extends m.Disposable{constructor(u,l){super(),this._terminal=u,this._renderService=l,this._liveRegionLineCount=0,this._charsToConsume=[],this._charsToAnnounce="",this._accessibilityTreeRoot=document.createElement("div"),this._accessibilityTreeRoot.classList.add("xterm-accessibility"),this._accessibilityTreeRoot.tabIndex=0,this._rowContainer=document.createElement("div"),this._rowContainer.setAttribute("role","list"),this._rowContainer.classList.add("xterm-accessibility-tree"),this._rowElements=[];for(let f=0;f<this._terminal.rows;f++)this._rowElements[f]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[f]);if(this._topBoundaryFocusListener=f=>this._onBoundaryFocus(f,0),this._bottomBoundaryFocusListener=f=>this._onBoundaryFocus(f,1),this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions(),this._accessibilityTreeRoot.appendChild(this._rowContainer),this._renderRowsDebouncer=new _.TimeBasedDebouncer(this._renderRows.bind(this)),this._refreshRows(),this._liveRegion=document.createElement("div"),this._liveRegion.classList.add("live-region"),this._liveRegion.setAttribute("aria-live","assertive"),this._accessibilityTreeRoot.appendChild(this._liveRegion),!this._terminal.element)throw new Error("Cannot enable accessibility before Terminal.open");this._terminal.element.insertAdjacentElement("afterbegin",this._accessibilityTreeRoot),this.register(this._renderRowsDebouncer),this.register(this._terminal.onResize(f=>this._onResize(f.rows))),this.register(this._terminal.onRender(f=>this._refreshRows(f.start,f.end))),this.register(this._terminal.onScroll(()=>this._refreshRows())),this.register(this._terminal.onA11yChar(f=>this._onChar(f))),this.register(this._terminal.onLineFeed(()=>this._onChar(`
`))),this.register(this._terminal.onA11yTab(f=>this._onTab(f))),this.register(this._terminal.onKey(f=>this._onKey(f.key))),this.register(this._terminal.onBlur(()=>this._clearLiveRegion())),this.register(this._renderService.onDimensionsChange(()=>this._refreshRowsDimensions())),this._screenDprMonitor=new v.ScreenDprMonitor(window),this.register(this._screenDprMonitor),this._screenDprMonitor.setListener(()=>this._refreshRowsDimensions()),this.register((0,S.addDisposableDomListener)(window,"resize",()=>this._refreshRowsDimensions()))}dispose(){super.dispose(),(0,p.removeElementFromParent)(this._accessibilityTreeRoot),this._rowElements.length=0}_onBoundaryFocus(u,l){let f=u.target,g=this._rowElements[l===0?1:this._rowElements.length-2];if(f.getAttribute("aria-posinset")===(l===0?"1":`${this._terminal.buffer.lines.length}`)||u.relatedTarget!==g)return;let C,k;if(l===0?(C=f,k=this._rowElements.pop(),this._rowContainer.removeChild(k)):(C=this._rowElements.shift(),k=f,this._rowContainer.removeChild(C)),C.removeEventListener("focus",this._topBoundaryFocusListener),k.removeEventListener("focus",this._bottomBoundaryFocusListener),l===0){let y=this._createAccessibilityTreeNode();this._rowElements.unshift(y),this._rowContainer.insertAdjacentElement("afterbegin",y)}else{let y=this._createAccessibilityTreeNode();this._rowElements.push(y),this._rowContainer.appendChild(y)}this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._terminal.scrollLines(l===0?-1:1),this._rowElements[l===0?1:this._rowElements.length-2].focus(),u.preventDefault(),u.stopImmediatePropagation()}_onResize(u){this._rowElements[this._rowElements.length-1].removeEventListener("focus",this._bottomBoundaryFocusListener);for(let l=this._rowContainer.children.length;l<this._terminal.rows;l++)this._rowElements[l]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[l]);for(;this._rowElements.length>u;)this._rowContainer.removeChild(this._rowElements.pop());this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions()}_createAccessibilityTreeNode(){let u=document.createElement("div");return u.setAttribute("role","listitem"),u.tabIndex=-1,this._refreshRowDimensions(u),u}_onTab(u){for(let l=0;l<u;l++)this._onChar(" ")}_onChar(u){this._liveRegionLineCount<21&&(this._charsToConsume.length>0?this._charsToConsume.shift()!==u&&(this._charsToAnnounce+=u):this._charsToAnnounce+=u,u===`
`&&(this._liveRegionLineCount++,this._liveRegionLineCount===21&&(this._liveRegion.textContent+=a.tooMuchOutput)),d.isMac&&this._liveRegion.textContent&&this._liveRegion.textContent.length>0&&!this._liveRegion.parentNode&&setTimeout(()=>{this._accessibilityTreeRoot.appendChild(this._liveRegion)},0))}_clearLiveRegion(){this._liveRegion.textContent="",this._liveRegionLineCount=0,d.isMac&&(0,p.removeElementFromParent)(this._liveRegion)}_onKey(u){this._clearLiveRegion(),this._charsToConsume.push(u)}_refreshRows(u,l){this._renderRowsDebouncer.refresh(u,l,this._terminal.rows)}_renderRows(u,l){let f=this._terminal.buffer,g=f.lines.length.toString();for(let C=u;C<=l;C++){let k=f.translateBufferLineToString(f.ydisp+C,!0),y=(f.ydisp+C+1).toString(),E=this._rowElements[C];E&&(k.length===0?E.innerText="\xA0":E.textContent=k,E.setAttribute("aria-posinset",y),E.setAttribute("aria-setsize",g))}this._announceCharacters()}_refreshRowsDimensions(){if(this._renderService.dimensions.actualCellHeight){this._rowElements.length!==this._terminal.rows&&this._onResize(this._terminal.rows);for(let u=0;u<this._terminal.rows;u++)this._refreshRowDimensions(this._rowElements[u])}}_refreshRowDimensions(u){u.style.height=`${this._renderService.dimensions.actualCellHeight}px`}_announceCharacters(){this._charsToAnnounce.length!==0&&(this._liveRegion.textContent+=this._charsToAnnounce,this._charsToAnnounce="")}}i.AccessibilityManager=c},3614:(o,i)=>{function n(S){return S.replace(/\r?\n/g,"\r")}function a(S,m){return m?"\x1B[200~"+S+"\x1B[201~":S}function d(S,m,v){S=a(S=n(S),v.decPrivateModes.bracketedPasteMode),v.triggerDataEvent(S,!0),m.value=""}function _(S,m,v){let p=v.getBoundingClientRect(),c=S.clientX-p.left-10,h=S.clientY-p.top-10;m.style.width="20px",m.style.height="20px",m.style.left=`${c}px`,m.style.top=`${h}px`,m.style.zIndex="1000",m.focus()}Object.defineProperty(i,"__esModule",{value:!0}),i.rightClickHandler=i.moveTextAreaUnderMouseCursor=i.paste=i.handlePasteEvent=i.copyHandler=i.bracketTextForPaste=i.prepareTextForTerminal=void 0,i.prepareTextForTerminal=n,i.bracketTextForPaste=a,i.copyHandler=function(S,m){S.clipboardData&&S.clipboardData.setData("text/plain",m.selectionText),S.preventDefault()},i.handlePasteEvent=function(S,m,v){S.stopPropagation(),S.clipboardData&&d(S.clipboardData.getData("text/plain"),m,v)},i.paste=d,i.moveTextAreaUnderMouseCursor=_,i.rightClickHandler=function(S,m,v,p,c){_(S,m,v),c&&p.rightClickSelect(S),m.value=p.selectionText,m.select()}},7239:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.ColorContrastCache=void 0;let a=n(1505);i.ColorContrastCache=class{constructor(){this._color=new a.TwoKeyMap,this._css=new a.TwoKeyMap}setCss(d,_,S){this._css.set(d,_,S)}getCss(d,_){return this._css.get(d,_)}setColor(d,_,S){this._color.set(d,_,S)}getColor(d,_){return this._color.get(d,_)}clear(){this._color.clear(),this._css.clear()}}},5680:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.ColorManager=i.DEFAULT_ANSI_COLORS=void 0;let a=n(8055),d=n(7239),_=a.css.toColor("#ffffff"),S=a.css.toColor("#000000"),m=a.css.toColor("#ffffff"),v=a.css.toColor("#000000"),p={css:"rgba(255, 255, 255, 0.3)",rgba:4294967117};i.DEFAULT_ANSI_COLORS=Object.freeze((()=>{let c=[a.css.toColor("#2e3436"),a.css.toColor("#cc0000"),a.css.toColor("#4e9a06"),a.css.toColor("#c4a000"),a.css.toColor("#3465a4"),a.css.toColor("#75507b"),a.css.toColor("#06989a"),a.css.toColor("#d3d7cf"),a.css.toColor("#555753"),a.css.toColor("#ef2929"),a.css.toColor("#8ae234"),a.css.toColor("#fce94f"),a.css.toColor("#729fcf"),a.css.toColor("#ad7fa8"),a.css.toColor("#34e2e2"),a.css.toColor("#eeeeec")],h=[0,95,135,175,215,255];for(let u=0;u<216;u++){let l=h[u/36%6|0],f=h[u/6%6|0],g=h[u%6];c.push({css:a.channels.toCss(l,f,g),rgba:a.channels.toRgba(l,f,g)})}for(let u=0;u<24;u++){let l=8+10*u;c.push({css:a.channels.toCss(l,l,l),rgba:a.channels.toRgba(l,l,l)})}return c})()),i.ColorManager=class{constructor(c,h){this.allowTransparency=h;let u=c.createElement("canvas");u.width=1,u.height=1;let l=u.getContext("2d");if(!l)throw new Error("Could not get rendering context");this._ctx=l,this._ctx.globalCompositeOperation="copy",this._litmusColor=this._ctx.createLinearGradient(0,0,1,1),this._contrastCache=new d.ColorContrastCache,this.colors={foreground:_,background:S,cursor:m,cursorAccent:v,selectionForeground:void 0,selectionBackgroundTransparent:p,selectionBackgroundOpaque:a.color.blend(S,p),selectionInactiveBackgroundTransparent:p,selectionInactiveBackgroundOpaque:a.color.blend(S,p),ansi:i.DEFAULT_ANSI_COLORS.slice(),contrastCache:this._contrastCache},this._updateRestoreColors()}onOptionsChange(c,h){switch(c){case"minimumContrastRatio":this._contrastCache.clear();break;case"allowTransparency":this.allowTransparency=h}}setTheme(c={}){this.colors.foreground=this._parseColor(c.foreground,_),this.colors.background=this._parseColor(c.background,S),this.colors.cursor=this._parseColor(c.cursor,m,!0),this.colors.cursorAccent=this._parseColor(c.cursorAccent,v,!0),this.colors.selectionBackgroundTransparent=this._parseColor(c.selectionBackground,p,!0),this.colors.selectionBackgroundOpaque=a.color.blend(this.colors.background,this.colors.selectionBackgroundTransparent),this.colors.selectionInactiveBackgroundTransparent=this._parseColor(c.selectionInactiveBackground,this.colors.selectionBackgroundTransparent,!0),this.colors.selectionInactiveBackgroundOpaque=a.color.blend(this.colors.background,this.colors.selectionInactiveBackgroundTransparent);let h={css:"",rgba:0};if(this.colors.selectionForeground=c.selectionForeground?this._parseColor(c.selectionForeground,h):void 0,this.colors.selectionForeground===h&&(this.colors.selectionForeground=void 0),a.color.isOpaque(this.colors.selectionBackgroundTransparent)&&(this.colors.selectionBackgroundTransparent=a.color.opacity(this.colors.selectionBackgroundTransparent,.3)),a.color.isOpaque(this.colors.selectionInactiveBackgroundTransparent)&&(this.colors.selectionInactiveBackgroundTransparent=a.color.opacity(this.colors.selectionInactiveBackgroundTransparent,.3)),this.colors.ansi=i.DEFAULT_ANSI_COLORS.slice(),this.colors.ansi[0]=this._parseColor(c.black,i.DEFAULT_ANSI_COLORS[0]),this.colors.ansi[1]=this._parseColor(c.red,i.DEFAULT_ANSI_COLORS[1]),this.colors.ansi[2]=this._parseColor(c.green,i.DEFAULT_ANSI_COLORS[2]),this.colors.ansi[3]=this._parseColor(c.yellow,i.DEFAULT_ANSI_COLORS[3]),this.colors.ansi[4]=this._parseColor(c.blue,i.DEFAULT_ANSI_COLORS[4]),this.colors.ansi[5]=this._parseColor(c.magenta,i.DEFAULT_ANSI_COLORS[5]),this.colors.ansi[6]=this._parseColor(c.cyan,i.DEFAULT_ANSI_COLORS[6]),this.colors.ansi[7]=this._parseColor(c.white,i.DEFAULT_ANSI_COLORS[7]),this.colors.ansi[8]=this._parseColor(c.brightBlack,i.DEFAULT_ANSI_COLORS[8]),this.colors.ansi[9]=this._parseColor(c.brightRed,i.DEFAULT_ANSI_COLORS[9]),this.colors.ansi[10]=this._parseColor(c.brightGreen,i.DEFAULT_ANSI_COLORS[10]),this.colors.ansi[11]=this._parseColor(c.brightYellow,i.DEFAULT_ANSI_COLORS[11]),this.colors.ansi[12]=this._parseColor(c.brightBlue,i.DEFAULT_ANSI_COLORS[12]),this.colors.ansi[13]=this._parseColor(c.brightMagenta,i.DEFAULT_ANSI_COLORS[13]),this.colors.ansi[14]=this._parseColor(c.brightCyan,i.DEFAULT_ANSI_COLORS[14]),this.colors.ansi[15]=this._parseColor(c.brightWhite,i.DEFAULT_ANSI_COLORS[15]),c.extendedAnsi){let u=Math.min(this.colors.ansi.length-16,c.extendedAnsi.length);for(let l=0;l<u;l++)this.colors.ansi[l+16]=this._parseColor(c.extendedAnsi[l],i.DEFAULT_ANSI_COLORS[l+16])}this._contrastCache.clear(),this._updateRestoreColors()}restoreColor(c){if(c!==void 0)switch(c){case 256:this.colors.foreground=this._restoreColors.foreground;break;case 257:this.colors.background=this._restoreColors.background;break;case 258:this.colors.cursor=this._restoreColors.cursor;break;default:this.colors.ansi[c]=this._restoreColors.ansi[c]}else for(let h=0;h<this._restoreColors.ansi.length;++h)this.colors.ansi[h]=this._restoreColors.ansi[h]}_updateRestoreColors(){this._restoreColors={foreground:this.colors.foreground,background:this.colors.background,cursor:this.colors.cursor,ansi:this.colors.ansi.slice()}}_parseColor(c,h,u=this.allowTransparency){if(c===void 0)return h;if(this._ctx.fillStyle=this._litmusColor,this._ctx.fillStyle=c,typeof this._ctx.fillStyle!="string")return console.warn(`Color: ${c} is invalid using fallback ${h.css}`),h;this._ctx.fillRect(0,0,1,1);let l=this._ctx.getImageData(0,0,1,1).data;if(l[3]!==255){if(!u)return console.warn(`Color: ${c} is using transparency, but allowTransparency is false. Using fallback ${h.css}.`),h;let[f,g,C,k]=this._ctx.fillStyle.substring(5,this._ctx.fillStyle.length-1).split(",").map(E=>Number(E)),y=Math.round(255*k);return{rgba:a.channels.toRgba(f,g,C,y),css:c}}return{css:this._ctx.fillStyle,rgba:a.channels.toRgba(l[0],l[1],l[2],l[3])}}}},9631:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.removeElementFromParent=void 0,i.removeElementFromParent=function(...n){var a;for(let d of n)(a=d==null?void 0:d.parentElement)===null||a===void 0||a.removeChild(d)}},3656:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.addDisposableDomListener=void 0,i.addDisposableDomListener=function(n,a,d,_){n.addEventListener(a,d,_);let S=!1;return{dispose:()=>{S||(S=!0,n.removeEventListener(a,d,_))}}}},6465:function(o,i,n){var a=this&&this.__decorate||function(c,h,u,l){var f,g=arguments.length,C=g<3?h:l===null?l=Object.getOwnPropertyDescriptor(h,u):l;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")C=Reflect.decorate(c,h,u,l);else for(var k=c.length-1;k>=0;k--)(f=c[k])&&(C=(g<3?f(C):g>3?f(h,u,C):f(h,u))||C);return g>3&&C&&Object.defineProperty(h,u,C),C},d=this&&this.__param||function(c,h){return function(u,l){h(u,l,c)}};Object.defineProperty(i,"__esModule",{value:!0}),i.Linkifier2=void 0;let _=n(2585),S=n(8460),m=n(844),v=n(3656),p=class extends m.Disposable{constructor(c){super(),this._bufferService=c,this._linkProviders=[],this._linkCacheDisposables=[],this._isMouseOut=!0,this._activeLine=-1,this._onShowLinkUnderline=this.register(new S.EventEmitter),this._onHideLinkUnderline=this.register(new S.EventEmitter),this.register((0,m.getDisposeArrayDisposable)(this._linkCacheDisposables))}get currentLink(){return this._currentLink}get onShowLinkUnderline(){return this._onShowLinkUnderline.event}get onHideLinkUnderline(){return this._onHideLinkUnderline.event}dispose(){super.dispose(),this._lastMouseEvent=void 0}registerLinkProvider(c){return this._linkProviders.push(c),{dispose:()=>{let h=this._linkProviders.indexOf(c);h!==-1&&this._linkProviders.splice(h,1)}}}attachToDom(c,h,u){this._element=c,this._mouseService=h,this._renderService=u,this.register((0,v.addDisposableDomListener)(this._element,"mouseleave",()=>{this._isMouseOut=!0,this._clearCurrentLink()})),this.register((0,v.addDisposableDomListener)(this._element,"mousemove",this._onMouseMove.bind(this))),this.register((0,v.addDisposableDomListener)(this._element,"mousedown",this._handleMouseDown.bind(this))),this.register((0,v.addDisposableDomListener)(this._element,"mouseup",this._handleMouseUp.bind(this)))}_onMouseMove(c){if(this._lastMouseEvent=c,!this._element||!this._mouseService)return;let h=this._positionFromMouseEvent(c,this._element,this._mouseService);if(!h)return;this._isMouseOut=!1;let u=c.composedPath();for(let l=0;l<u.length;l++){let f=u[l];if(f.classList.contains("xterm"))break;if(f.classList.contains("xterm-hover"))return}this._lastBufferCell&&h.x===this._lastBufferCell.x&&h.y===this._lastBufferCell.y||(this._onHover(h),this._lastBufferCell=h)}_onHover(c){if(this._activeLine!==c.y)return this._clearCurrentLink(),void this._askForLink(c,!1);this._currentLink&&this._linkAtPosition(this._currentLink.link,c)||(this._clearCurrentLink(),this._askForLink(c,!0))}_askForLink(c,h){var u,l;this._activeProviderReplies&&h||((u=this._activeProviderReplies)===null||u===void 0||u.forEach(g=>{g==null||g.forEach(C=>{C.link.dispose&&C.link.dispose()})}),this._activeProviderReplies=new Map,this._activeLine=c.y);let f=!1;for(let[g,C]of this._linkProviders.entries())h?!((l=this._activeProviderReplies)===null||l===void 0)&&l.get(g)&&(f=this._checkLinkProviderResult(g,c,f)):C.provideLinks(c.y,k=>{var y,E;if(this._isMouseOut)return;let x=k==null?void 0:k.map(B=>({link:B}));(y=this._activeProviderReplies)===null||y===void 0||y.set(g,x),f=this._checkLinkProviderResult(g,c,f),((E=this._activeProviderReplies)===null||E===void 0?void 0:E.size)===this._linkProviders.length&&this._removeIntersectingLinks(c.y,this._activeProviderReplies)})}_removeIntersectingLinks(c,h){let u=new Set;for(let l=0;l<h.size;l++){let f=h.get(l);if(f)for(let g=0;g<f.length;g++){let C=f[g],k=C.link.range.start.y<c?0:C.link.range.start.x,y=C.link.range.end.y>c?this._bufferService.cols:C.link.range.end.x;for(let E=k;E<=y;E++){if(u.has(E)){f.splice(g--,1);break}u.add(E)}}}}_checkLinkProviderResult(c,h,u){var l;if(!this._activeProviderReplies)return u;let f=this._activeProviderReplies.get(c),g=!1;for(let C=0;C<c;C++)this._activeProviderReplies.has(C)&&!this._activeProviderReplies.get(C)||(g=!0);if(!g&&f){let C=f.find(k=>this._linkAtPosition(k.link,h));C&&(u=!0,this._handleNewLink(C))}if(this._activeProviderReplies.size===this._linkProviders.length&&!u)for(let C=0;C<this._activeProviderReplies.size;C++){let k=(l=this._activeProviderReplies.get(C))===null||l===void 0?void 0:l.find(y=>this._linkAtPosition(y.link,h));if(k){u=!0,this._handleNewLink(k);break}}return u}_handleMouseDown(){this._mouseDownLink=this._currentLink}_handleMouseUp(c){if(!this._element||!this._mouseService||!this._currentLink)return;let h=this._positionFromMouseEvent(c,this._element,this._mouseService);h&&this._mouseDownLink===this._currentLink&&this._linkAtPosition(this._currentLink.link,h)&&this._currentLink.link.activate(c,this._currentLink.link.text)}_clearCurrentLink(c,h){this._element&&this._currentLink&&this._lastMouseEvent&&(!c||!h||this._currentLink.link.range.start.y>=c&&this._currentLink.link.range.end.y<=h)&&(this._linkLeave(this._element,this._currentLink.link,this._lastMouseEvent),this._currentLink=void 0,(0,m.disposeArray)(this._linkCacheDisposables))}_handleNewLink(c){if(!this._element||!this._lastMouseEvent||!this._mouseService)return;let h=this._positionFromMouseEvent(this._lastMouseEvent,this._element,this._mouseService);h&&this._linkAtPosition(c.link,h)&&(this._currentLink=c,this._currentLink.state={decorations:{underline:c.link.decorations===void 0||c.link.decorations.underline,pointerCursor:c.link.decorations===void 0||c.link.decorations.pointerCursor},isHovered:!0},this._linkHover(this._element,c.link,this._lastMouseEvent),c.link.decorations={},Object.defineProperties(c.link.decorations,{pointerCursor:{get:()=>{var u,l;return(l=(u=this._currentLink)===null||u===void 0?void 0:u.state)===null||l===void 0?void 0:l.decorations.pointerCursor},set:u=>{var l,f;((l=this._currentLink)===null||l===void 0?void 0:l.state)&&this._currentLink.state.decorations.pointerCursor!==u&&(this._currentLink.state.decorations.pointerCursor=u,this._currentLink.state.isHovered&&((f=this._element)===null||f===void 0||f.classList.toggle("xterm-cursor-pointer",u)))}},underline:{get:()=>{var u,l;return(l=(u=this._currentLink)===null||u===void 0?void 0:u.state)===null||l===void 0?void 0:l.decorations.underline},set:u=>{var l,f,g;((l=this._currentLink)===null||l===void 0?void 0:l.state)&&((g=(f=this._currentLink)===null||f===void 0?void 0:f.state)===null||g===void 0?void 0:g.decorations.underline)!==u&&(this._currentLink.state.decorations.underline=u,this._currentLink.state.isHovered&&this._fireUnderlineEvent(c.link,u))}}}),this._renderService&&this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange(u=>{let l=u.start===0?0:u.start+1+this._bufferService.buffer.ydisp;this._clearCurrentLink(l,u.end+1+this._bufferService.buffer.ydisp)})))}_linkHover(c,h,u){var l;!((l=this._currentLink)===null||l===void 0)&&l.state&&(this._currentLink.state.isHovered=!0,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(h,!0),this._currentLink.state.decorations.pointerCursor&&c.classList.add("xterm-cursor-pointer")),h.hover&&h.hover(u,h.text)}_fireUnderlineEvent(c,h){let u=c.range,l=this._bufferService.buffer.ydisp,f=this._createLinkUnderlineEvent(u.start.x-1,u.start.y-l-1,u.end.x,u.end.y-l-1,void 0);(h?this._onShowLinkUnderline:this._onHideLinkUnderline).fire(f)}_linkLeave(c,h,u){var l;!((l=this._currentLink)===null||l===void 0)&&l.state&&(this._currentLink.state.isHovered=!1,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(h,!1),this._currentLink.state.decorations.pointerCursor&&c.classList.remove("xterm-cursor-pointer")),h.leave&&h.leave(u,h.text)}_linkAtPosition(c,h){let u=c.range.start.y===c.range.end.y,l=c.range.start.y<h.y,f=c.range.end.y>h.y;return(u&&c.range.start.x<=h.x&&c.range.end.x>=h.x||l&&c.range.end.x>=h.x||f&&c.range.start.x<=h.x||l&&f)&&c.range.start.y<=h.y&&c.range.end.y>=h.y}_positionFromMouseEvent(c,h,u){let l=u.getCoords(c,h,this._bufferService.cols,this._bufferService.rows);if(l)return{x:l[0],y:l[1]+this._bufferService.buffer.ydisp}}_createLinkUnderlineEvent(c,h,u,l,f){return{x1:c,y1:h,x2:u,y2:l,cols:this._bufferService.cols,fg:f}}};p=a([d(0,_.IBufferService)],p),i.Linkifier2=p},9042:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.tooMuchOutput=i.promptLabel=void 0,i.promptLabel="Terminal input",i.tooMuchOutput="Too much output to announce, navigate to rows manually to read"},2962:function(o,i,n){var a=this&&this.__decorate||function(p,c,h,u){var l,f=arguments.length,g=f<3?c:u===null?u=Object.getOwnPropertyDescriptor(c,h):u;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")g=Reflect.decorate(p,c,h,u);else for(var C=p.length-1;C>=0;C--)(l=p[C])&&(g=(f<3?l(g):f>3?l(c,h,g):l(c,h))||g);return f>3&&g&&Object.defineProperty(c,h,g),g},d=this&&this.__param||function(p,c){return function(h,u){c(h,u,p)}};Object.defineProperty(i,"__esModule",{value:!0}),i.OscLinkProvider=void 0;let _=n(511),S=n(2585),m=class{constructor(p,c,h){this._bufferService=p,this._optionsService=c,this._oscLinkService=h}provideLinks(p,c){var h;let u=this._bufferService.buffer.lines.get(p-1);if(!u)return void c(void 0);let l=[],f=this._optionsService.rawOptions.linkHandler,g=new _.CellData,C=u.getTrimmedLength(),k=-1,y=-1,E=!1;for(let x=0;x<C;x++)if(y!==-1||u.hasContent(x)){if(u.loadCell(x,g),g.hasExtendedAttrs()&&g.extended.urlId){if(y===-1){y=x,k=g.extended.urlId;continue}E=g.extended.urlId!==k}else y!==-1&&(E=!0);if(E||y!==-1&&x===C-1){let B=(h=this._oscLinkService.getLinkData(k))===null||h===void 0?void 0:h.uri;if(B){let D={start:{x:y+1,y:p},end:{x:x+(E||x!==C-1?0:1),y:p}};l.push({text:B,range:D,activate:(w,L)=>f?f.activate(w,L,D):v(0,L),hover:(w,L)=>{var R;return(R=f==null?void 0:f.hover)===null||R===void 0?void 0:R.call(f,w,L,D)},leave:(w,L)=>{var R;return(R=f==null?void 0:f.leave)===null||R===void 0?void 0:R.call(f,w,L,D)}})}E=!1,g.hasExtendedAttrs()&&g.extended.urlId?(y=x,k=g.extended.urlId):(y=-1,k=-1)}}c(l)}};function v(p,c){if(confirm(`Do you want to navigate to ${c}?`)){let h=window.open();if(h){try{h.opener=null}catch{}h.location.href=c}else console.warn("Opening link blocked as opener could not be cleared")}}m=a([d(0,S.IBufferService),d(1,S.IOptionsService),d(2,S.IOscLinkService)],m),i.OscLinkProvider=m},6193:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.RenderDebouncer=void 0,i.RenderDebouncer=class{constructor(n,a){this._parentWindow=n,this._renderCallback=a,this._refreshCallbacks=[]}dispose(){this._animationFrame&&(this._parentWindow.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)}addRefreshCallback(n){return this._refreshCallbacks.push(n),this._animationFrame||(this._animationFrame=this._parentWindow.requestAnimationFrame(()=>this._innerRefresh())),this._animationFrame}refresh(n,a,d){this._rowCount=d,n=n!==void 0?n:0,a=a!==void 0?a:this._rowCount-1,this._rowStart=this._rowStart!==void 0?Math.min(this._rowStart,n):n,this._rowEnd=this._rowEnd!==void 0?Math.max(this._rowEnd,a):a,this._animationFrame||(this._animationFrame=this._parentWindow.requestAnimationFrame(()=>this._innerRefresh()))}_innerRefresh(){if(this._animationFrame=void 0,this._rowStart===void 0||this._rowEnd===void 0||this._rowCount===void 0)return void this._runRefreshCallbacks();let n=Math.max(this._rowStart,0),a=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(n,a),this._runRefreshCallbacks()}_runRefreshCallbacks(){for(let n of this._refreshCallbacks)n(0);this._refreshCallbacks=[]}}},5596:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.ScreenDprMonitor=void 0;let a=n(844);class d extends a.Disposable{constructor(S){super(),this._parentWindow=S,this._currentDevicePixelRatio=this._parentWindow.devicePixelRatio}setListener(S){this._listener&&this.clearListener(),this._listener=S,this._outerListener=()=>{this._listener&&(this._listener(this._parentWindow.devicePixelRatio,this._currentDevicePixelRatio),this._updateDpr())},this._updateDpr()}dispose(){super.dispose(),this.clearListener()}_updateDpr(){var S;this._outerListener&&((S=this._resolutionMediaMatchList)===null||S===void 0||S.removeListener(this._outerListener),this._currentDevicePixelRatio=this._parentWindow.devicePixelRatio,this._resolutionMediaMatchList=this._parentWindow.matchMedia(`screen and (resolution: ${this._parentWindow.devicePixelRatio}dppx)`),this._resolutionMediaMatchList.addListener(this._outerListener))}clearListener(){this._resolutionMediaMatchList&&this._listener&&this._outerListener&&(this._resolutionMediaMatchList.removeListener(this._outerListener),this._resolutionMediaMatchList=void 0,this._listener=void 0,this._outerListener=void 0)}}i.ScreenDprMonitor=d},3236:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Terminal=void 0;let a=n(2950),d=n(1680),_=n(3614),S=n(2584),m=n(5435),v=n(9312),p=n(6114),c=n(3656),h=n(9042),u=n(4567),l=n(1296),f=n(7399),g=n(8460),C=n(8437),k=n(5680),y=n(3230),E=n(4725),x=n(428),B=n(8934),D=n(6465),w=n(5114),L=n(8969),R=n(8055),A=n(4269),M=n(5941),j=n(3107),q=n(5744),V=n(9074),W=n(2585),K=n(2962),b=typeof window<"u"?window.document:null;class H extends L.CoreTerminal{constructor(T={}){super(T),this.browser=p,this._keyDownHandled=!1,this._keyDownSeen=!1,this._keyPressHandled=!1,this._unprocessedDeadKey=!1,this._onCursorMove=new g.EventEmitter,this._onKey=new g.EventEmitter,this._onRender=new g.EventEmitter,this._onSelectionChange=new g.EventEmitter,this._onTitleChange=new g.EventEmitter,this._onBell=new g.EventEmitter,this._onFocus=new g.EventEmitter,this._onBlur=new g.EventEmitter,this._onA11yCharEmitter=new g.EventEmitter,this._onA11yTabEmitter=new g.EventEmitter,this._setup(),this.linkifier2=this.register(this._instantiationService.createInstance(D.Linkifier2)),this.linkifier2.registerLinkProvider(this._instantiationService.createInstance(K.OscLinkProvider)),this._decorationService=this._instantiationService.createInstance(V.DecorationService),this._instantiationService.setService(W.IDecorationService,this._decorationService),this.register(this._inputHandler.onRequestBell(()=>this._onBell.fire())),this.register(this._inputHandler.onRequestRefreshRows((P,I)=>this.refresh(P,I))),this.register(this._inputHandler.onRequestSendFocus(()=>this._reportFocus())),this.register(this._inputHandler.onRequestReset(()=>this.reset())),this.register(this._inputHandler.onRequestWindowsOptionsReport(P=>this._reportWindowsOptions(P))),this.register(this._inputHandler.onColor(P=>this._handleColorEvent(P))),this.register((0,g.forwardEvent)(this._inputHandler.onCursorMove,this._onCursorMove)),this.register((0,g.forwardEvent)(this._inputHandler.onTitleChange,this._onTitleChange)),this.register((0,g.forwardEvent)(this._inputHandler.onA11yChar,this._onA11yCharEmitter)),this.register((0,g.forwardEvent)(this._inputHandler.onA11yTab,this._onA11yTabEmitter)),this.register(this._bufferService.onResize(P=>this._afterResize(P.cols,P.rows)))}get onCursorMove(){return this._onCursorMove.event}get onKey(){return this._onKey.event}get onRender(){return this._onRender.event}get onSelectionChange(){return this._onSelectionChange.event}get onTitleChange(){return this._onTitleChange.event}get onBell(){return this._onBell.event}get onFocus(){return this._onFocus.event}get onBlur(){return this._onBlur.event}get onA11yChar(){return this._onA11yCharEmitter.event}get onA11yTab(){return this._onA11yTabEmitter.event}_handleColorEvent(T){var P,I;if(this._colorManager){for(let z of T){let $,F="";switch(z.index){case 256:$="foreground",F="10";break;case 257:$="background",F="11";break;case 258:$="cursor",F="12";break;default:$="ansi",F="4;"+z.index}switch(z.type){case 0:let le=R.color.toColorRGB($==="ansi"?this._colorManager.colors.ansi[z.index]:this._colorManager.colors[$]);this.coreService.triggerDataEvent(`${S.C0.ESC}]${F};${(0,M.toRgbString)(le)}${S.C1_ESCAPED.ST}`);break;case 1:$==="ansi"?this._colorManager.colors.ansi[z.index]=R.rgba.toColor(...z.color):this._colorManager.colors[$]=R.rgba.toColor(...z.color);break;case 2:this._colorManager.restoreColor(z.index)}}(P=this._renderService)===null||P===void 0||P.setColors(this._colorManager.colors),(I=this.viewport)===null||I===void 0||I.onThemeChange(this._colorManager.colors)}}dispose(){var T,P,I;this._isDisposed||(super.dispose(),(T=this._renderService)===null||T===void 0||T.dispose(),this._customKeyEventHandler=void 0,this.write=()=>{},(I=(P=this.element)===null||P===void 0?void 0:P.parentNode)===null||I===void 0||I.removeChild(this.element))}_setup(){super._setup(),this._customKeyEventHandler=void 0}get buffer(){return this.buffers.active}focus(){this.textarea&&this.textarea.focus({preventScroll:!0})}_updateOptions(T){var P,I,z,$;switch(super._updateOptions(T),T){case"fontFamily":case"fontSize":(P=this._renderService)===null||P===void 0||P.clear(),(I=this._charSizeService)===null||I===void 0||I.measure();break;case"cursorBlink":case"cursorStyle":this.refresh(this.buffer.y,this.buffer.y);break;case"customGlyphs":case"drawBoldTextInBrightColors":case"letterSpacing":case"lineHeight":case"fontWeight":case"fontWeightBold":case"minimumContrastRatio":this._renderService&&(this._renderService.clear(),this._renderService.onResize(this.cols,this.rows),this.refresh(0,this.rows-1));break;case"scrollback":(z=this.viewport)===null||z===void 0||z.syncScrollArea();break;case"screenReaderMode":this.optionsService.rawOptions.screenReaderMode?!this._accessibilityManager&&this._renderService&&(this._accessibilityManager=new u.AccessibilityManager(this,this._renderService)):(($=this._accessibilityManager)===null||$===void 0||$.dispose(),this._accessibilityManager=void 0);break;case"tabStopWidth":this.buffers.setupTabStops();break;case"theme":this._setTheme(this.optionsService.rawOptions.theme)}}_onTextAreaFocus(T){this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(S.C0.ESC+"[I"),this.updateCursorStyle(T),this.element.classList.add("focus"),this._showCursor(),this._onFocus.fire()}blur(){var T;return(T=this.textarea)===null||T===void 0?void 0:T.blur()}_onTextAreaBlur(){this.textarea.value="",this.refresh(this.buffer.y,this.buffer.y),this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(S.C0.ESC+"[O"),this.element.classList.remove("focus"),this._onBlur.fire()}_syncTextArea(){if(!this.textarea||!this.buffer.isCursorInViewport||this._compositionHelper.isComposing||!this._renderService)return;let T=this.buffer.ybase+this.buffer.y,P=this.buffer.lines.get(T);if(!P)return;let I=Math.min(this.buffer.x,this.cols-1),z=this._renderService.dimensions.actualCellHeight,$=P.getWidth(I),F=this._renderService.dimensions.actualCellWidth*$,le=this.buffer.y*this._renderService.dimensions.actualCellHeight,X=I*this._renderService.dimensions.actualCellWidth;this.textarea.style.left=X+"px",this.textarea.style.top=le+"px",this.textarea.style.width=F+"px",this.textarea.style.height=z+"px",this.textarea.style.lineHeight=z+"px",this.textarea.style.zIndex="-5"}_initGlobal(){this._bindKeys(),this.register((0,c.addDisposableDomListener)(this.element,"copy",P=>{this.hasSelection()&&(0,_.copyHandler)(P,this._selectionService)}));let T=P=>(0,_.handlePasteEvent)(P,this.textarea,this.coreService);this.register((0,c.addDisposableDomListener)(this.textarea,"paste",T)),this.register((0,c.addDisposableDomListener)(this.element,"paste",T)),p.isFirefox?this.register((0,c.addDisposableDomListener)(this.element,"mousedown",P=>{P.button===2&&(0,_.rightClickHandler)(P,this.textarea,this.screenElement,this._selectionService,this.options.rightClickSelectsWord)})):this.register((0,c.addDisposableDomListener)(this.element,"contextmenu",P=>{(0,_.rightClickHandler)(P,this.textarea,this.screenElement,this._selectionService,this.options.rightClickSelectsWord)})),p.isLinux&&this.register((0,c.addDisposableDomListener)(this.element,"auxclick",P=>{P.button===1&&(0,_.moveTextAreaUnderMouseCursor)(P,this.textarea,this.screenElement)}))}_bindKeys(){this.register((0,c.addDisposableDomListener)(this.textarea,"keyup",T=>this._keyUp(T),!0)),this.register((0,c.addDisposableDomListener)(this.textarea,"keydown",T=>this._keyDown(T),!0)),this.register((0,c.addDisposableDomListener)(this.textarea,"keypress",T=>this._keyPress(T),!0)),this.register((0,c.addDisposableDomListener)(this.textarea,"compositionstart",()=>this._compositionHelper.compositionstart())),this.register((0,c.addDisposableDomListener)(this.textarea,"compositionupdate",T=>this._compositionHelper.compositionupdate(T))),this.register((0,c.addDisposableDomListener)(this.textarea,"compositionend",()=>this._compositionHelper.compositionend())),this.register((0,c.addDisposableDomListener)(this.textarea,"input",T=>this._inputEvent(T),!0)),this.register(this.onRender(()=>this._compositionHelper.updateCompositionElements()))}open(T){var P;if(!T)throw new Error("Terminal requires a parent element.");T.isConnected||this._logService.debug("Terminal.open was called on an element that was not attached to the DOM"),this._document=T.ownerDocument,this.element=this._document.createElement("div"),this.element.dir="ltr",this.element.classList.add("terminal"),this.element.classList.add("xterm"),this.element.setAttribute("tabindex","0"),T.appendChild(this.element);let I=b.createDocumentFragment();this._viewportElement=b.createElement("div"),this._viewportElement.classList.add("xterm-viewport"),I.appendChild(this._viewportElement),this._viewportScrollArea=b.createElement("div"),this._viewportScrollArea.classList.add("xterm-scroll-area"),this._viewportElement.appendChild(this._viewportScrollArea),this.screenElement=b.createElement("div"),this.screenElement.classList.add("xterm-screen"),this._helperContainer=b.createElement("div"),this._helperContainer.classList.add("xterm-helpers"),this.screenElement.appendChild(this._helperContainer),I.appendChild(this.screenElement),this.textarea=b.createElement("textarea"),this.textarea.classList.add("xterm-helper-textarea"),this.textarea.setAttribute("aria-label",h.promptLabel),this.textarea.setAttribute("aria-multiline","false"),this.textarea.setAttribute("autocorrect","off"),this.textarea.setAttribute("autocapitalize","off"),this.textarea.setAttribute("spellcheck","false"),this.textarea.tabIndex=0,this.register((0,c.addDisposableDomListener)(this.textarea,"focus",$=>this._onTextAreaFocus($))),this.register((0,c.addDisposableDomListener)(this.textarea,"blur",()=>this._onTextAreaBlur())),this._helperContainer.appendChild(this.textarea),this._coreBrowserService=this._instantiationService.createInstance(w.CoreBrowserService,this.textarea,(P=this._document.defaultView)!==null&&P!==void 0?P:window),this._instantiationService.setService(E.ICoreBrowserService,this._coreBrowserService),this._charSizeService=this._instantiationService.createInstance(x.CharSizeService,this._document,this._helperContainer),this._instantiationService.setService(E.ICharSizeService,this._charSizeService),this._theme=this.options.theme||this._theme,this._colorManager=new k.ColorManager(b,this.options.allowTransparency),this.register(this.optionsService.onOptionChange($=>this._colorManager.onOptionsChange($,this.optionsService.rawOptions[$]))),this._colorManager.setTheme(this._theme),this._characterJoinerService=this._instantiationService.createInstance(A.CharacterJoinerService),this._instantiationService.setService(E.ICharacterJoinerService,this._characterJoinerService);let z=this._createRenderer();this._renderService=this.register(this._instantiationService.createInstance(y.RenderService,z,this.rows,this.screenElement)),this._instantiationService.setService(E.IRenderService,this._renderService),this.register(this._renderService.onRenderedViewportChange($=>this._onRender.fire($))),this.onResize($=>this._renderService.resize($.cols,$.rows)),this._compositionView=b.createElement("div"),this._compositionView.classList.add("composition-view"),this._compositionHelper=this._instantiationService.createInstance(a.CompositionHelper,this.textarea,this._compositionView),this._helperContainer.appendChild(this._compositionView),this.element.appendChild(I),this._mouseService=this._instantiationService.createInstance(B.MouseService),this._instantiationService.setService(E.IMouseService,this._mouseService),this.viewport=this._instantiationService.createInstance(d.Viewport,$=>this.scrollLines($,!0,1),this._viewportElement,this._viewportScrollArea,this.element),this.viewport.onThemeChange(this._colorManager.colors),this.register(this._inputHandler.onRequestSyncScrollBar(()=>this.viewport.syncScrollArea())),this.register(this.viewport),this.register(this.onCursorMove(()=>{this._renderService.onCursorMove(),this._syncTextArea()})),this.register(this.onResize(()=>this._renderService.onResize(this.cols,this.rows))),this.register(this.onBlur(()=>this._renderService.onBlur())),this.register(this.onFocus(()=>this._renderService.onFocus())),this.register(this._renderService.onDimensionsChange(()=>this.viewport.syncScrollArea())),this._selectionService=this.register(this._instantiationService.createInstance(v.SelectionService,this.element,this.screenElement,this.linkifier2)),this._instantiationService.setService(E.ISelectionService,this._selectionService),this.register(this._selectionService.onRequestScrollLines($=>this.scrollLines($.amount,$.suppressScrollEvent))),this.register(this._selectionService.onSelectionChange(()=>this._onSelectionChange.fire())),this.register(this._selectionService.onRequestRedraw($=>this._renderService.onSelectionChanged($.start,$.end,$.columnSelectMode))),this.register(this._selectionService.onLinuxMouseSelection($=>{this.textarea.value=$,this.textarea.focus(),this.textarea.select()})),this.register(this._onScroll.event($=>{this.viewport.syncScrollArea(),this._selectionService.refresh()})),this.register((0,c.addDisposableDomListener)(this._viewportElement,"scroll",()=>this._selectionService.refresh())),this.linkifier2.attachToDom(this.screenElement,this._mouseService,this._renderService),this.register(this._instantiationService.createInstance(j.BufferDecorationRenderer,this.screenElement)),this.register((0,c.addDisposableDomListener)(this.element,"mousedown",$=>this._selectionService.onMouseDown($))),this.coreMouseService.areMouseEventsActive?(this._selectionService.disable(),this.element.classList.add("enable-mouse-events")):this._selectionService.enable(),this.options.screenReaderMode&&(this._accessibilityManager=new u.AccessibilityManager(this,this._renderService)),this.options.overviewRulerWidth&&(this._overviewRulerRenderer=this.register(this._instantiationService.createInstance(q.OverviewRulerRenderer,this._viewportElement,this.screenElement))),this.optionsService.onOptionChange(()=>{!this._overviewRulerRenderer&&this.options.overviewRulerWidth&&this._viewportElement&&this.screenElement&&(this._overviewRulerRenderer=this.register(this._instantiationService.createInstance(q.OverviewRulerRenderer,this._viewportElement,this.screenElement)))}),this._charSizeService.measure(),this.refresh(0,this.rows-1),this._initGlobal(),this.bindMouse()}_createRenderer(){return this._instantiationService.createInstance(l.DomRenderer,this._colorManager.colors,this.element,this.screenElement,this._viewportElement,this.linkifier2)}_setTheme(T){var P,I,z;this._theme=T,(P=this._colorManager)===null||P===void 0||P.setTheme(T),(I=this._renderService)===null||I===void 0||I.setColors(this._colorManager.colors),(z=this.viewport)===null||z===void 0||z.onThemeChange(this._colorManager.colors)}bindMouse(){let T=this,P=this.element;function I(F){let le=T._mouseService.getMouseReportCoords(F,T.screenElement);if(!le)return!1;let X,Ke;switch(F.overrideType||F.type){case"mousemove":Ke=32,F.buttons===void 0?(X=3,F.button!==void 0&&(X=F.button<3?F.button:3)):X=1&F.buttons?0:4&F.buttons?1:2&F.buttons?2:3;break;case"mouseup":Ke=0,X=F.button<3?F.button:3;break;case"mousedown":Ke=1,X=F.button<3?F.button:3;break;case"wheel":if(T.viewport.getLinesScrolled(F)===0)return!1;Ke=F.deltaY<0?0:1,X=4;break;default:return!1}return!(Ke===void 0||X===void 0||X>4)&&T.coreMouseService.triggerMouseEvent({col:le.col,row:le.row,x:le.x,y:le.y,button:X,action:Ke,ctrl:F.ctrlKey,alt:F.altKey,shift:F.shiftKey})}let z={mouseup:null,wheel:null,mousedrag:null,mousemove:null},$={mouseup:F=>(I(F),F.buttons||(this._document.removeEventListener("mouseup",z.mouseup),z.mousedrag&&this._document.removeEventListener("mousemove",z.mousedrag)),this.cancel(F)),wheel:F=>(I(F),this.cancel(F,!0)),mousedrag:F=>{F.buttons&&I(F)},mousemove:F=>{F.buttons||I(F)}};this.register(this.coreMouseService.onProtocolChange(F=>{F?(this.optionsService.rawOptions.logLevel==="debug"&&this._logService.debug("Binding to mouse events:",this.coreMouseService.explainEvents(F)),this.element.classList.add("enable-mouse-events"),this._selectionService.disable()):(this._logService.debug("Unbinding from mouse events."),this.element.classList.remove("enable-mouse-events"),this._selectionService.enable()),8&F?z.mousemove||(P.addEventListener("mousemove",$.mousemove),z.mousemove=$.mousemove):(P.removeEventListener("mousemove",z.mousemove),z.mousemove=null),16&F?z.wheel||(P.addEventListener("wheel",$.wheel,{passive:!1}),z.wheel=$.wheel):(P.removeEventListener("wheel",z.wheel),z.wheel=null),2&F?z.mouseup||(z.mouseup=$.mouseup):(this._document.removeEventListener("mouseup",z.mouseup),z.mouseup=null),4&F?z.mousedrag||(z.mousedrag=$.mousedrag):(this._document.removeEventListener("mousemove",z.mousedrag),z.mousedrag=null)})),this.coreMouseService.activeProtocol=this.coreMouseService.activeProtocol,this.register((0,c.addDisposableDomListener)(P,"mousedown",F=>{if(F.preventDefault(),this.focus(),this.coreMouseService.areMouseEventsActive&&!this._selectionService.shouldForceSelection(F))return I(F),z.mouseup&&this._document.addEventListener("mouseup",z.mouseup),z.mousedrag&&this._document.addEventListener("mousemove",z.mousedrag),this.cancel(F)})),this.register((0,c.addDisposableDomListener)(P,"wheel",F=>{if(!z.wheel){if(!this.buffer.hasScrollback){let le=this.viewport.getLinesScrolled(F);if(le===0)return;let X=S.C0.ESC+(this.coreService.decPrivateModes.applicationCursorKeys?"O":"[")+(F.deltaY<0?"A":"B"),Ke="";for(let yl=0;yl<Math.abs(le);yl++)Ke+=X;return this.coreService.triggerDataEvent(Ke,!0),this.cancel(F,!0)}return this.viewport.onWheel(F)?this.cancel(F):void 0}},{passive:!1})),this.register((0,c.addDisposableDomListener)(P,"touchstart",F=>{if(!this.coreMouseService.areMouseEventsActive)return this.viewport.onTouchStart(F),this.cancel(F)},{passive:!0})),this.register((0,c.addDisposableDomListener)(P,"touchmove",F=>{if(!this.coreMouseService.areMouseEventsActive)return this.viewport.onTouchMove(F)?void 0:this.cancel(F)},{passive:!1}))}refresh(T,P){var I;(I=this._renderService)===null||I===void 0||I.refreshRows(T,P)}updateCursorStyle(T){var P;!((P=this._selectionService)===null||P===void 0)&&P.shouldColumnSelect(T)?this.element.classList.add("column-select"):this.element.classList.remove("column-select")}_showCursor(){this.coreService.isCursorInitialized||(this.coreService.isCursorInitialized=!0,this.refresh(this.buffer.y,this.buffer.y))}scrollLines(T,P,I=0){super.scrollLines(T,P,I),this.refresh(0,this.rows-1)}paste(T){(0,_.paste)(T,this.textarea,this.coreService)}attachCustomKeyEventHandler(T){this._customKeyEventHandler=T}registerLinkProvider(T){return this.linkifier2.registerLinkProvider(T)}registerCharacterJoiner(T){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");let P=this._characterJoinerService.register(T);return this.refresh(0,this.rows-1),P}deregisterCharacterJoiner(T){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");this._characterJoinerService.deregister(T)&&this.refresh(0,this.rows-1)}get markers(){return this.buffer.markers}addMarker(T){return this.buffer.addMarker(this.buffer.ybase+this.buffer.y+T)}registerDecoration(T){return this._decorationService.registerDecoration(T)}hasSelection(){return!!this._selectionService&&this._selectionService.hasSelection}select(T,P,I){this._selectionService.setSelection(T,P,I)}getSelection(){return this._selectionService?this._selectionService.selectionText:""}getSelectionPosition(){if(this._selectionService&&this._selectionService.hasSelection)return{start:{x:this._selectionService.selectionStart[0],y:this._selectionService.selectionStart[1]},end:{x:this._selectionService.selectionEnd[0],y:this._selectionService.selectionEnd[1]}}}clearSelection(){var T;(T=this._selectionService)===null||T===void 0||T.clearSelection()}selectAll(){var T;(T=this._selectionService)===null||T===void 0||T.selectAll()}selectLines(T,P){var I;(I=this._selectionService)===null||I===void 0||I.selectLines(T,P)}_keyDown(T){if(this._keyDownHandled=!1,this._keyDownSeen=!0,this._customKeyEventHandler&&this._customKeyEventHandler(T)===!1)return!1;let P=this.browser.isMac&&this.options.macOptionIsMeta&&T.altKey;if(!P&&!this._compositionHelper.keydown(T))return this.buffer.ybase!==this.buffer.ydisp&&this._bufferService.scrollToBottom(),!1;P||T.key!=="Dead"&&T.key!=="AltGraph"||(this._unprocessedDeadKey=!0);let I=(0,f.evaluateKeyboardEvent)(T,this.coreService.decPrivateModes.applicationCursorKeys,this.browser.isMac,this.options.macOptionIsMeta);if(this.updateCursorStyle(T),I.type===3||I.type===2){let z=this.rows-1;return this.scrollLines(I.type===2?-z:z),this.cancel(T,!0)}return I.type===1&&this.selectAll(),!!this._isThirdLevelShift(this.browser,T)||(I.cancel&&this.cancel(T,!0),!I.key||!!(T.key&&!T.ctrlKey&&!T.altKey&&!T.metaKey&&T.key.length===1&&T.key.charCodeAt(0)>=65&&T.key.charCodeAt(0)<=90)||(this._unprocessedDeadKey?(this._unprocessedDeadKey=!1,!0):(I.key!==S.C0.ETX&&I.key!==S.C0.CR||(this.textarea.value=""),this._onKey.fire({key:I.key,domEvent:T}),this._showCursor(),this.coreService.triggerDataEvent(I.key,!0),this.optionsService.rawOptions.screenReaderMode?void(this._keyDownHandled=!0):this.cancel(T,!0))))}_isThirdLevelShift(T,P){let I=T.isMac&&!this.options.macOptionIsMeta&&P.altKey&&!P.ctrlKey&&!P.metaKey||T.isWindows&&P.altKey&&P.ctrlKey&&!P.metaKey||T.isWindows&&P.getModifierState("AltGraph");return P.type==="keypress"?I:I&&(!P.keyCode||P.keyCode>47)}_keyUp(T){this._keyDownSeen=!1,this._customKeyEventHandler&&this._customKeyEventHandler(T)===!1||(function(P){return P.keyCode===16||P.keyCode===17||P.keyCode===18}(T)||this.focus(),this.updateCursorStyle(T),this._keyPressHandled=!1)}_keyPress(T){let P;if(this._keyPressHandled=!1,this._keyDownHandled||this._customKeyEventHandler&&this._customKeyEventHandler(T)===!1)return!1;if(this.cancel(T),T.charCode)P=T.charCode;else if(T.which===null||T.which===void 0)P=T.keyCode;else{if(T.which===0||T.charCode===0)return!1;P=T.which}return!(!P||(T.altKey||T.ctrlKey||T.metaKey)&&!this._isThirdLevelShift(this.browser,T)||(P=String.fromCharCode(P),this._onKey.fire({key:P,domEvent:T}),this._showCursor(),this.coreService.triggerDataEvent(P,!0),this._keyPressHandled=!0,this._unprocessedDeadKey=!1,0))}_inputEvent(T){if(T.data&&T.inputType==="insertText"&&(!T.composed||!this._keyDownSeen)&&!this.optionsService.rawOptions.screenReaderMode){if(this._keyPressHandled)return!1;this._unprocessedDeadKey=!1;let P=T.data;return this.coreService.triggerDataEvent(P,!0),this.cancel(T),!0}return!1}resize(T,P){T!==this.cols||P!==this.rows?super.resize(T,P):this._charSizeService&&!this._charSizeService.hasValidSize&&this._charSizeService.measure()}_afterResize(T,P){var I,z;(I=this._charSizeService)===null||I===void 0||I.measure(),(z=this.viewport)===null||z===void 0||z.syncScrollArea(!0)}clear(){if(this.buffer.ybase!==0||this.buffer.y!==0){this.buffer.clearAllMarkers(),this.buffer.lines.set(0,this.buffer.lines.get(this.buffer.ybase+this.buffer.y)),this.buffer.lines.length=1,this.buffer.ydisp=0,this.buffer.ybase=0,this.buffer.y=0;for(let T=1;T<this.rows;T++)this.buffer.lines.push(this.buffer.getBlankLine(C.DEFAULT_ATTR_DATA));this.refresh(0,this.rows-1),this._onScroll.fire({position:this.buffer.ydisp,source:0})}}reset(){var T,P;this.options.rows=this.rows,this.options.cols=this.cols;let I=this._customKeyEventHandler;this._setup(),super.reset(),(T=this._selectionService)===null||T===void 0||T.reset(),this._decorationService.reset(),this._customKeyEventHandler=I,this.refresh(0,this.rows-1),(P=this.viewport)===null||P===void 0||P.syncScrollArea()}clearTextureAtlas(){var T;(T=this._renderService)===null||T===void 0||T.clearTextureAtlas()}_reportFocus(){var T;!((T=this.element)===null||T===void 0)&&T.classList.contains("focus")?this.coreService.triggerDataEvent(S.C0.ESC+"[I"):this.coreService.triggerDataEvent(S.C0.ESC+"[O")}_reportWindowsOptions(T){if(this._renderService)switch(T){case m.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:let P=this._renderService.dimensions.canvasWidth.toFixed(0),I=this._renderService.dimensions.canvasHeight.toFixed(0);this.coreService.triggerDataEvent(`${S.C0.ESC}[4;${I};${P}t`);break;case m.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:let z=this._renderService.dimensions.actualCellWidth.toFixed(0),$=this._renderService.dimensions.actualCellHeight.toFixed(0);this.coreService.triggerDataEvent(`${S.C0.ESC}[6;${$};${z}t`)}}cancel(T,P){if(this.options.cancelEvents||P)return T.preventDefault(),T.stopPropagation(),!1}}i.Terminal=H},9924:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.TimeBasedDebouncer=void 0,i.TimeBasedDebouncer=class{constructor(n,a=1e3){this._renderCallback=n,this._debounceThresholdMS=a,this._lastRefreshMs=0,this._additionalRefreshRequested=!1}dispose(){this._refreshTimeoutID&&clearTimeout(this._refreshTimeoutID)}refresh(n,a,d){this._rowCount=d,n=n!==void 0?n:0,a=a!==void 0?a:this._rowCount-1,this._rowStart=this._rowStart!==void 0?Math.min(this._rowStart,n):n,this._rowEnd=this._rowEnd!==void 0?Math.max(this._rowEnd,a):a;let _=Date.now();if(_-this._lastRefreshMs>=this._debounceThresholdMS)this._lastRefreshMs=_,this._innerRefresh();else if(!this._additionalRefreshRequested){let S=_-this._lastRefreshMs,m=this._debounceThresholdMS-S;this._additionalRefreshRequested=!0,this._refreshTimeoutID=window.setTimeout(()=>{this._lastRefreshMs=Date.now(),this._innerRefresh(),this._additionalRefreshRequested=!1,this._refreshTimeoutID=void 0},m)}}_innerRefresh(){if(this._rowStart===void 0||this._rowEnd===void 0||this._rowCount===void 0)return;let n=Math.max(this._rowStart,0),a=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(n,a)}}},1680:function(o,i,n){var a=this&&this.__decorate||function(c,h,u,l){var f,g=arguments.length,C=g<3?h:l===null?l=Object.getOwnPropertyDescriptor(h,u):l;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")C=Reflect.decorate(c,h,u,l);else for(var k=c.length-1;k>=0;k--)(f=c[k])&&(C=(g<3?f(C):g>3?f(h,u,C):f(h,u))||C);return g>3&&C&&Object.defineProperty(h,u,C),C},d=this&&this.__param||function(c,h){return function(u,l){h(u,l,c)}};Object.defineProperty(i,"__esModule",{value:!0}),i.Viewport=void 0;let _=n(844),S=n(3656),m=n(4725),v=n(2585),p=class extends _.Disposable{constructor(c,h,u,l,f,g,C,k,y){super(),this._scrollLines=c,this._viewportElement=h,this._scrollArea=u,this._element=l,this._bufferService=f,this._optionsService=g,this._charSizeService=C,this._renderService=k,this._coreBrowserService=y,this.scrollBarWidth=0,this._currentRowHeight=0,this._currentScaledCellHeight=0,this._lastRecordedBufferLength=0,this._lastRecordedViewportHeight=0,this._lastRecordedBufferHeight=0,this._lastTouchY=0,this._lastScrollTop=0,this._wheelPartialScroll=0,this._refreshAnimationFrame=null,this._ignoreNextScrollEvent=!1,this._smoothScrollState={startTime:0,origin:-1,target:-1},this.scrollBarWidth=this._viewportElement.offsetWidth-this._scrollArea.offsetWidth||15,this.register((0,S.addDisposableDomListener)(this._viewportElement,"scroll",this._onScroll.bind(this))),this._activeBuffer=this._bufferService.buffer,this.register(this._bufferService.buffers.onBufferActivate(E=>this._activeBuffer=E.activeBuffer)),this._renderDimensions=this._renderService.dimensions,this.register(this._renderService.onDimensionsChange(E=>this._renderDimensions=E)),setTimeout(()=>this.syncScrollArea(),0)}onThemeChange(c){this._viewportElement.style.backgroundColor=c.background.css}_refresh(c){if(c)return this._innerRefresh(),void(this._refreshAnimationFrame!==null&&this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame));this._refreshAnimationFrame===null&&(this._refreshAnimationFrame=this._coreBrowserService.window.requestAnimationFrame(()=>this._innerRefresh()))}_innerRefresh(){if(this._charSizeService.height>0){this._currentRowHeight=this._renderService.dimensions.scaledCellHeight/this._coreBrowserService.dpr,this._currentScaledCellHeight=this._renderService.dimensions.scaledCellHeight,this._lastRecordedViewportHeight=this._viewportElement.offsetHeight;let h=Math.round(this._currentRowHeight*this._lastRecordedBufferLength)+(this._lastRecordedViewportHeight-this._renderService.dimensions.canvasHeight);this._lastRecordedBufferHeight!==h&&(this._lastRecordedBufferHeight=h,this._scrollArea.style.height=this._lastRecordedBufferHeight+"px")}let c=this._bufferService.buffer.ydisp*this._currentRowHeight;this._viewportElement.scrollTop!==c&&(this._ignoreNextScrollEvent=!0,this._viewportElement.scrollTop=c),this._refreshAnimationFrame=null}syncScrollArea(c=!1){if(this._lastRecordedBufferLength!==this._bufferService.buffer.lines.length)return this._lastRecordedBufferLength=this._bufferService.buffer.lines.length,void this._refresh(c);this._lastRecordedViewportHeight===this._renderService.dimensions.canvasHeight&&this._lastScrollTop===this._activeBuffer.ydisp*this._currentRowHeight&&this._renderDimensions.scaledCellHeight===this._currentScaledCellHeight||this._refresh(c)}_onScroll(c){if(this._lastScrollTop=this._viewportElement.scrollTop,!this._viewportElement.offsetParent)return;if(this._ignoreNextScrollEvent)return this._ignoreNextScrollEvent=!1,void this._scrollLines(0);let h=Math.round(this._lastScrollTop/this._currentRowHeight)-this._bufferService.buffer.ydisp;this._scrollLines(h)}_smoothScroll(){if(this._isDisposed||this._smoothScrollState.origin===-1||this._smoothScrollState.target===-1)return;let c=this._smoothScrollPercent();this._viewportElement.scrollTop=this._smoothScrollState.origin+Math.round(c*(this._smoothScrollState.target-this._smoothScrollState.origin)),c<1?this._coreBrowserService.window.requestAnimationFrame(()=>this._smoothScroll()):this._clearSmoothScrollState()}_smoothScrollPercent(){return this._optionsService.rawOptions.smoothScrollDuration&&this._smoothScrollState.startTime?Math.max(Math.min((Date.now()-this._smoothScrollState.startTime)/this._optionsService.rawOptions.smoothScrollDuration,1),0):1}_clearSmoothScrollState(){this._smoothScrollState.startTime=0,this._smoothScrollState.origin=-1,this._smoothScrollState.target=-1}_bubbleScroll(c,h){let u=this._viewportElement.scrollTop+this._lastRecordedViewportHeight;return!(h<0&&this._viewportElement.scrollTop!==0||h>0&&u<this._lastRecordedBufferHeight)||(c.cancelable&&c.preventDefault(),!1)}onWheel(c){let h=this._getPixelsScrolled(c);return h!==0&&(this._optionsService.rawOptions.smoothScrollDuration?(this._smoothScrollState.startTime=Date.now(),this._smoothScrollPercent()<1?(this._smoothScrollState.origin=this._viewportElement.scrollTop,this._smoothScrollState.target===-1?this._smoothScrollState.target=this._viewportElement.scrollTop+h:this._smoothScrollState.target+=h,this._smoothScrollState.target=Math.max(Math.min(this._smoothScrollState.target,this._viewportElement.scrollHeight),0),this._smoothScroll()):this._clearSmoothScrollState()):this._viewportElement.scrollTop+=h,this._bubbleScroll(c,h))}_getPixelsScrolled(c){if(c.deltaY===0||c.shiftKey)return 0;let h=this._applyScrollModifier(c.deltaY,c);return c.deltaMode===WheelEvent.DOM_DELTA_LINE?h*=this._currentRowHeight:c.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(h*=this._currentRowHeight*this._bufferService.rows),h}getLinesScrolled(c){if(c.deltaY===0||c.shiftKey)return 0;let h=this._applyScrollModifier(c.deltaY,c);return c.deltaMode===WheelEvent.DOM_DELTA_PIXEL?(h/=this._currentRowHeight+0,this._wheelPartialScroll+=h,h=Math.floor(Math.abs(this._wheelPartialScroll))*(this._wheelPartialScroll>0?1:-1),this._wheelPartialScroll%=1):c.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(h*=this._bufferService.rows),h}_applyScrollModifier(c,h){let u=this._optionsService.rawOptions.fastScrollModifier;return u==="alt"&&h.altKey||u==="ctrl"&&h.ctrlKey||u==="shift"&&h.shiftKey?c*this._optionsService.rawOptions.fastScrollSensitivity*this._optionsService.rawOptions.scrollSensitivity:c*this._optionsService.rawOptions.scrollSensitivity}onTouchStart(c){this._lastTouchY=c.touches[0].pageY}onTouchMove(c){let h=this._lastTouchY-c.touches[0].pageY;return this._lastTouchY=c.touches[0].pageY,h!==0&&(this._viewportElement.scrollTop+=h,this._bubbleScroll(c,h))}};p=a([d(4,v.IBufferService),d(5,v.IOptionsService),d(6,m.ICharSizeService),d(7,m.IRenderService),d(8,m.ICoreBrowserService)],p),i.Viewport=p},3107:function(o,i,n){var a=this&&this.__decorate||function(c,h,u,l){var f,g=arguments.length,C=g<3?h:l===null?l=Object.getOwnPropertyDescriptor(h,u):l;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")C=Reflect.decorate(c,h,u,l);else for(var k=c.length-1;k>=0;k--)(f=c[k])&&(C=(g<3?f(C):g>3?f(h,u,C):f(h,u))||C);return g>3&&C&&Object.defineProperty(h,u,C),C},d=this&&this.__param||function(c,h){return function(u,l){h(u,l,c)}};Object.defineProperty(i,"__esModule",{value:!0}),i.BufferDecorationRenderer=void 0;let _=n(3656),S=n(4725),m=n(844),v=n(2585),p=class extends m.Disposable{constructor(c,h,u,l){super(),this._screenElement=c,this._bufferService=h,this._decorationService=u,this._renderService=l,this._decorationElements=new Map,this._altBufferIsActive=!1,this._dimensionsChanged=!1,this._container=document.createElement("div"),this._container.classList.add("xterm-decoration-container"),this._screenElement.appendChild(this._container),this.register(this._renderService.onRenderedViewportChange(()=>this._queueRefresh())),this.register(this._renderService.onDimensionsChange(()=>{this._dimensionsChanged=!0,this._queueRefresh()})),this.register((0,_.addDisposableDomListener)(window,"resize",()=>this._queueRefresh())),this.register(this._bufferService.buffers.onBufferActivate(()=>{this._altBufferIsActive=this._bufferService.buffer===this._bufferService.buffers.alt})),this.register(this._decorationService.onDecorationRegistered(()=>this._queueRefresh())),this.register(this._decorationService.onDecorationRemoved(f=>this._removeDecoration(f)))}dispose(){this._container.remove(),this._decorationElements.clear(),super.dispose()}_queueRefresh(){this._animationFrame===void 0&&(this._animationFrame=this._renderService.addRefreshCallback(()=>{this.refreshDecorations(),this._animationFrame=void 0}))}refreshDecorations(){for(let c of this._decorationService.decorations)this._renderDecoration(c);this._dimensionsChanged=!1}_renderDecoration(c){this._refreshStyle(c),this._dimensionsChanged&&this._refreshXPosition(c)}_createElement(c){var h;let u=document.createElement("div");u.classList.add("xterm-decoration"),u.style.width=`${Math.round((c.options.width||1)*this._renderService.dimensions.actualCellWidth)}px`,u.style.height=(c.options.height||1)*this._renderService.dimensions.actualCellHeight+"px",u.style.top=(c.marker.line-this._bufferService.buffers.active.ydisp)*this._renderService.dimensions.actualCellHeight+"px",u.style.lineHeight=`${this._renderService.dimensions.actualCellHeight}px`;let l=(h=c.options.x)!==null&&h!==void 0?h:0;return l&&l>this._bufferService.cols&&(u.style.display="none"),this._refreshXPosition(c,u),u}_refreshStyle(c){let h=c.marker.line-this._bufferService.buffers.active.ydisp;if(h<0||h>=this._bufferService.rows)c.element&&(c.element.style.display="none",c.onRenderEmitter.fire(c.element));else{let u=this._decorationElements.get(c);u||(c.onDispose(()=>this._removeDecoration(c)),u=this._createElement(c),c.element=u,this._decorationElements.set(c,u),this._container.appendChild(u)),u.style.top=h*this._renderService.dimensions.actualCellHeight+"px",u.style.display=this._altBufferIsActive?"none":"block",c.onRenderEmitter.fire(u)}}_refreshXPosition(c,h=c.element){var u;if(!h)return;let l=(u=c.options.x)!==null&&u!==void 0?u:0;(c.options.anchor||"left")==="right"?h.style.right=l?l*this._renderService.dimensions.actualCellWidth+"px":"":h.style.left=l?l*this._renderService.dimensions.actualCellWidth+"px":""}_removeDecoration(c){var h;(h=this._decorationElements.get(c))===null||h===void 0||h.remove(),this._decorationElements.delete(c)}};p=a([d(1,v.IBufferService),d(2,v.IDecorationService),d(3,S.IRenderService)],p),i.BufferDecorationRenderer=p},5871:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.ColorZoneStore=void 0,i.ColorZoneStore=class{constructor(){this._zones=[],this._zonePool=[],this._zonePoolIndex=0,this._linePadding={full:0,left:0,center:0,right:0}}get zones(){return this._zonePool.length=Math.min(this._zonePool.length,this._zones.length),this._zones}clear(){this._zones.length=0,this._zonePoolIndex=0}addDecoration(n){if(n.options.overviewRulerOptions){for(let a of this._zones)if(a.color===n.options.overviewRulerOptions.color&&a.position===n.options.overviewRulerOptions.position){if(this._lineIntersectsZone(a,n.marker.line))return;if(this._lineAdjacentToZone(a,n.marker.line,n.options.overviewRulerOptions.position))return void this._addLineToZone(a,n.marker.line)}if(this._zonePoolIndex<this._zonePool.length)return this._zonePool[this._zonePoolIndex].color=n.options.overviewRulerOptions.color,this._zonePool[this._zonePoolIndex].position=n.options.overviewRulerOptions.position,this._zonePool[this._zonePoolIndex].startBufferLine=n.marker.line,this._zonePool[this._zonePoolIndex].endBufferLine=n.marker.line,void this._zones.push(this._zonePool[this._zonePoolIndex++]);this._zones.push({color:n.options.overviewRulerOptions.color,position:n.options.overviewRulerOptions.position,startBufferLine:n.marker.line,endBufferLine:n.marker.line}),this._zonePool.push(this._zones[this._zones.length-1]),this._zonePoolIndex++}}setPadding(n){this._linePadding=n}_lineIntersectsZone(n,a){return a>=n.startBufferLine&&a<=n.endBufferLine}_lineAdjacentToZone(n,a,d){return a>=n.startBufferLine-this._linePadding[d||"full"]&&a<=n.endBufferLine+this._linePadding[d||"full"]}_addLineToZone(n,a){n.startBufferLine=Math.min(n.startBufferLine,a),n.endBufferLine=Math.max(n.endBufferLine,a)}}},5744:function(o,i,n){var a=this&&this.__decorate||function(f,g,C,k){var y,E=arguments.length,x=E<3?g:k===null?k=Object.getOwnPropertyDescriptor(g,C):k;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")x=Reflect.decorate(f,g,C,k);else for(var B=f.length-1;B>=0;B--)(y=f[B])&&(x=(E<3?y(x):E>3?y(g,C,x):y(g,C))||x);return E>3&&x&&Object.defineProperty(g,C,x),x},d=this&&this.__param||function(f,g){return function(C,k){g(C,k,f)}};Object.defineProperty(i,"__esModule",{value:!0}),i.OverviewRulerRenderer=void 0;let _=n(5871),S=n(3656),m=n(4725),v=n(844),p=n(2585),c={full:0,left:0,center:0,right:0},h={full:0,left:0,center:0,right:0},u={full:0,left:0,center:0,right:0},l=class extends v.Disposable{constructor(f,g,C,k,y,E,x){var B;super(),this._viewportElement=f,this._screenElement=g,this._bufferService=C,this._decorationService=k,this._renderService=y,this._optionsService=E,this._coreBrowseService=x,this._colorZoneStore=new _.ColorZoneStore,this._shouldUpdateDimensions=!0,this._shouldUpdateAnchor=!0,this._lastKnownBufferLength=0,this._canvas=document.createElement("canvas"),this._canvas.classList.add("xterm-decoration-overview-ruler"),this._refreshCanvasDimensions(),(B=this._viewportElement.parentElement)===null||B===void 0||B.insertBefore(this._canvas,this._viewportElement);let D=this._canvas.getContext("2d");if(!D)throw new Error("Ctx cannot be null");this._ctx=D,this._registerDecorationListeners(),this._registerBufferChangeListeners(),this._registerDimensionChangeListeners()}get _width(){return this._optionsService.options.overviewRulerWidth||0}_registerDecorationListeners(){this.register(this._decorationService.onDecorationRegistered(()=>this._queueRefresh(void 0,!0))),this.register(this._decorationService.onDecorationRemoved(()=>this._queueRefresh(void 0,!0)))}_registerBufferChangeListeners(){this.register(this._renderService.onRenderedViewportChange(()=>this._queueRefresh())),this.register(this._bufferService.buffers.onBufferActivate(()=>{this._canvas.style.display=this._bufferService.buffer===this._bufferService.buffers.alt?"none":"block"})),this.register(this._bufferService.onScroll(()=>{this._lastKnownBufferLength!==this._bufferService.buffers.normal.lines.length&&(this._refreshDrawHeightConstants(),this._refreshColorZonePadding())}))}_registerDimensionChangeListeners(){this.register(this._renderService.onRender(()=>{this._containerHeight&&this._containerHeight===this._screenElement.clientHeight||(this._queueRefresh(!0),this._containerHeight=this._screenElement.clientHeight)})),this.register(this._optionsService.onOptionChange(f=>{f==="overviewRulerWidth"&&this._queueRefresh(!0)})),this.register((0,S.addDisposableDomListener)(this._coreBrowseService.window,"resize",()=>{this._queueRefresh(!0)})),this._queueRefresh(!0)}dispose(){var f;(f=this._canvas)===null||f===void 0||f.remove(),super.dispose()}_refreshDrawConstants(){let f=Math.floor(this._canvas.width/3),g=Math.ceil(this._canvas.width/3);h.full=this._canvas.width,h.left=f,h.center=g,h.right=f,this._refreshDrawHeightConstants(),u.full=0,u.left=0,u.center=h.left,u.right=h.left+h.center}_refreshDrawHeightConstants(){c.full=Math.round(2*this._coreBrowseService.dpr);let f=this._canvas.height/this._bufferService.buffer.lines.length,g=Math.round(Math.max(Math.min(f,12),6)*this._coreBrowseService.dpr);c.left=g,c.center=g,c.right=g}_refreshColorZonePadding(){this._colorZoneStore.setPadding({full:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*c.full),left:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*c.left),center:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*c.center),right:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*c.right)}),this._lastKnownBufferLength=this._bufferService.buffers.normal.lines.length}_refreshCanvasDimensions(){this._canvas.style.width=`${this._width}px`,this._canvas.width=Math.round(this._width*this._coreBrowseService.dpr),this._canvas.style.height=`${this._screenElement.clientHeight}px`,this._canvas.height=Math.round(this._screenElement.clientHeight*this._coreBrowseService.dpr),this._refreshDrawConstants(),this._refreshColorZonePadding()}_refreshDecorations(){this._shouldUpdateDimensions&&this._refreshCanvasDimensions(),this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height),this._colorZoneStore.clear();for(let g of this._decorationService.decorations)this._colorZoneStore.addDecoration(g);this._ctx.lineWidth=1;let f=this._colorZoneStore.zones;for(let g of f)g.position!=="full"&&this._renderColorZone(g);for(let g of f)g.position==="full"&&this._renderColorZone(g);this._shouldUpdateDimensions=!1,this._shouldUpdateAnchor=!1}_renderColorZone(f){this._ctx.fillStyle=f.color,this._ctx.fillRect(u[f.position||"full"],Math.round((this._canvas.height-1)*(f.startBufferLine/this._bufferService.buffers.active.lines.length)-c[f.position||"full"]/2),h[f.position||"full"],Math.round((this._canvas.height-1)*((f.endBufferLine-f.startBufferLine)/this._bufferService.buffers.active.lines.length)+c[f.position||"full"]))}_queueRefresh(f,g){this._shouldUpdateDimensions=f||this._shouldUpdateDimensions,this._shouldUpdateAnchor=g||this._shouldUpdateAnchor,this._animationFrame===void 0&&(this._animationFrame=this._coreBrowseService.window.requestAnimationFrame(()=>{this._refreshDecorations(),this._animationFrame=void 0}))}};l=a([d(2,p.IBufferService),d(3,p.IDecorationService),d(4,m.IRenderService),d(5,p.IOptionsService),d(6,m.ICoreBrowserService)],l),i.OverviewRulerRenderer=l},2950:function(o,i,n){var a=this&&this.__decorate||function(p,c,h,u){var l,f=arguments.length,g=f<3?c:u===null?u=Object.getOwnPropertyDescriptor(c,h):u;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")g=Reflect.decorate(p,c,h,u);else for(var C=p.length-1;C>=0;C--)(l=p[C])&&(g=(f<3?l(g):f>3?l(c,h,g):l(c,h))||g);return f>3&&g&&Object.defineProperty(c,h,g),g},d=this&&this.__param||function(p,c){return function(h,u){c(h,u,p)}};Object.defineProperty(i,"__esModule",{value:!0}),i.CompositionHelper=void 0;let _=n(4725),S=n(2585),m=n(2584),v=class{constructor(p,c,h,u,l,f){this._textarea=p,this._compositionView=c,this._bufferService=h,this._optionsService=u,this._coreService=l,this._renderService=f,this._isComposing=!1,this._isSendingComposition=!1,this._compositionPosition={start:0,end:0},this._dataAlreadySent=""}get isComposing(){return this._isComposing}compositionstart(){this._isComposing=!0,this._compositionPosition.start=this._textarea.value.length,this._compositionView.textContent="",this._dataAlreadySent="",this._compositionView.classList.add("active")}compositionupdate(p){this._compositionView.textContent=p.data,this.updateCompositionElements(),setTimeout(()=>{this._compositionPosition.end=this._textarea.value.length},0)}compositionend(){this._finalizeComposition(!0)}keydown(p){if(this._isComposing||this._isSendingComposition){if(p.keyCode===229||p.keyCode===16||p.keyCode===17||p.keyCode===18)return!1;this._finalizeComposition(!1)}return p.keyCode!==229||(this._handleAnyTextareaChanges(),!1)}_finalizeComposition(p){if(this._compositionView.classList.remove("active"),this._isComposing=!1,p){let c={start:this._compositionPosition.start,end:this._compositionPosition.end};this._isSendingComposition=!0,setTimeout(()=>{if(this._isSendingComposition){let h;this._isSendingComposition=!1,c.start+=this._dataAlreadySent.length,h=this._isComposing?this._textarea.value.substring(c.start,c.end):this._textarea.value.substring(c.start),h.length>0&&this._coreService.triggerDataEvent(h,!0)}},0)}else{this._isSendingComposition=!1;let c=this._textarea.value.substring(this._compositionPosition.start,this._compositionPosition.end);this._coreService.triggerDataEvent(c,!0)}}_handleAnyTextareaChanges(){let p=this._textarea.value;setTimeout(()=>{if(!this._isComposing){let c=this._textarea.value,h=c.replace(p,"");this._dataAlreadySent=h,c.length>p.length?this._coreService.triggerDataEvent(h,!0):c.length<p.length?this._coreService.triggerDataEvent(`${m.C0.DEL}`,!0):c.length===p.length&&c!==p&&this._coreService.triggerDataEvent(c,!0)}},0)}updateCompositionElements(p){if(this._isComposing){if(this._bufferService.buffer.isCursorInViewport){let c=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),h=this._renderService.dimensions.actualCellHeight,u=this._bufferService.buffer.y*this._renderService.dimensions.actualCellHeight,l=c*this._renderService.dimensions.actualCellWidth;this._compositionView.style.left=l+"px",this._compositionView.style.top=u+"px",this._compositionView.style.height=h+"px",this._compositionView.style.lineHeight=h+"px",this._compositionView.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._compositionView.style.fontSize=this._optionsService.rawOptions.fontSize+"px";let f=this._compositionView.getBoundingClientRect();this._textarea.style.left=l+"px",this._textarea.style.top=u+"px",this._textarea.style.width=Math.max(f.width,1)+"px",this._textarea.style.height=Math.max(f.height,1)+"px",this._textarea.style.lineHeight=f.height+"px"}p||setTimeout(()=>this.updateCompositionElements(!0),0)}}};v=a([d(2,S.IBufferService),d(3,S.IOptionsService),d(4,S.ICoreService),d(5,_.IRenderService)],v),i.CompositionHelper=v},9806:(o,i)=>{function n(a,d,_){let S=_.getBoundingClientRect(),m=a.getComputedStyle(_),v=parseInt(m.getPropertyValue("padding-left")),p=parseInt(m.getPropertyValue("padding-top"));return[d.clientX-S.left-v,d.clientY-S.top-p]}Object.defineProperty(i,"__esModule",{value:!0}),i.getCoords=i.getCoordsRelativeToElement=void 0,i.getCoordsRelativeToElement=n,i.getCoords=function(a,d,_,S,m,v,p,c,h){if(!v)return;let u=n(a,d,_);return u?(u[0]=Math.ceil((u[0]+(h?p/2:0))/p),u[1]=Math.ceil(u[1]/c),u[0]=Math.min(Math.max(u[0],1),S+(h?1:0)),u[1]=Math.min(Math.max(u[1],1),m),u):void 0}},9504:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.moveToCellSequence=void 0;let a=n(2584);function d(c,h,u,l){let f=c-_(u,c),g=h-_(u,h),C=Math.abs(f-g)-function(k,y,E){let x=0,B=k-_(E,k),D=y-_(E,y);for(let w=0;w<Math.abs(B-D);w++){let L=S(k,y)==="A"?-1:1,R=E.buffer.lines.get(B+L*w);R!=null&&R.isWrapped&&x++}return x}(c,h,u);return p(C,v(S(c,h),l))}function _(c,h){let u=0,l=c.buffer.lines.get(h),f=l==null?void 0:l.isWrapped;for(;f&&h>=0&&h<c.rows;)u++,l=c.buffer.lines.get(--h),f=l==null?void 0:l.isWrapped;return u}function S(c,h){return c>h?"A":"B"}function m(c,h,u,l,f,g){let C=c,k=h,y="";for(;C!==u||k!==l;)C+=f?1:-1,f&&C>g.cols-1?(y+=g.buffer.translateBufferLineToString(k,!1,c,C),C=0,c=0,k++):!f&&C<0&&(y+=g.buffer.translateBufferLineToString(k,!1,0,c+1),C=g.cols-1,c=C,k--);return y+g.buffer.translateBufferLineToString(k,!1,c,C)}function v(c,h){let u=h?"O":"[";return a.C0.ESC+u+c}function p(c,h){c=Math.floor(c);let u="";for(let l=0;l<c;l++)u+=h;return u}i.moveToCellSequence=function(c,h,u,l){let f=u.buffer.x,g=u.buffer.y;if(!u.buffer.hasScrollback)return function(y,E,x,B,D,w){return d(E,B,D,w).length===0?"":p(m(y,E,y,E-_(D,E),!1,D).length,v("D",w))}(f,g,0,h,u,l)+d(g,h,u,l)+function(y,E,x,B,D,w){let L;L=d(E,B,D,w).length>0?B-_(D,B):E;let R=B,A=function(M,j,q,V,W,K){let b;return b=d(q,V,W,K).length>0?V-_(W,V):j,M<q&&b<=V||M>=q&&b<V?"C":"D"}(y,E,x,B,D,w);return p(m(y,L,x,R,A==="C",D).length,v(A,w))}(f,g,c,h,u,l);let C;if(g===h)return C=f>c?"D":"C",p(Math.abs(f-c),v(C,l));C=g>h?"D":"C";let k=Math.abs(g-h);return p(function(y,E){return E.cols-y}(g>h?c:f,u)+(k-1)*u.cols+1+((g>h?f:c)-1),v(C,l))}},8036:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.TEXT_BASELINE=i.DIM_OPACITY=i.INVERTED_DEFAULT_COLOR=void 0;let a=n(6114);i.INVERTED_DEFAULT_COLOR=257,i.DIM_OPACITY=.5,i.TEXT_BASELINE=a.isFirefox||a.isLegacyEdge?"bottom":"ideographic"},1752:(o,i)=>{function n(a){return 57508<=a&&a<=57558}Object.defineProperty(i,"__esModule",{value:!0}),i.excludeFromContrastRatioDemands=i.isRestrictedPowerlineGlyph=i.isPowerlineGlyph=i.throwIfFalsy=void 0,i.throwIfFalsy=function(a){if(!a)throw new Error("value must not be falsy");return a},i.isPowerlineGlyph=n,i.isRestrictedPowerlineGlyph=function(a){return 57520<=a&&a<=57527},i.excludeFromContrastRatioDemands=function(a){return n(a)||function(d){return 9472<=d&&d<=9631}(a)}},1296:function(o,i,n){var a=this&&this.__decorate||function(k,y,E,x){var B,D=arguments.length,w=D<3?y:x===null?x=Object.getOwnPropertyDescriptor(y,E):x;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")w=Reflect.decorate(k,y,E,x);else for(var L=k.length-1;L>=0;L--)(B=k[L])&&(w=(D<3?B(w):D>3?B(y,E,w):B(y,E))||w);return D>3&&w&&Object.defineProperty(y,E,w),w},d=this&&this.__param||function(k,y){return function(E,x){y(E,x,k)}};Object.defineProperty(i,"__esModule",{value:!0}),i.DomRenderer=void 0;let _=n(3787),S=n(8036),m=n(844),v=n(4725),p=n(2585),c=n(8460),h=n(8055),u=n(9631),l="xterm-dom-renderer-owner-",f="xterm-focus",g=1,C=class extends m.Disposable{constructor(k,y,E,x,B,D,w,L,R,A){super(),this._colors=k,this._element=y,this._screenElement=E,this._viewportElement=x,this._linkifier2=B,this._charSizeService=w,this._optionsService=L,this._bufferService=R,this._coreBrowserService=A,this._terminalClass=g++,this._rowElements=[],this._rowContainer=document.createElement("div"),this._rowContainer.classList.add("xterm-rows"),this._rowContainer.style.lineHeight="normal",this._rowContainer.setAttribute("aria-hidden","true"),this._refreshRowElements(this._bufferService.cols,this._bufferService.rows),this._selectionContainer=document.createElement("div"),this._selectionContainer.classList.add("xterm-selection"),this._selectionContainer.setAttribute("aria-hidden","true"),this.dimensions={scaledCharWidth:0,scaledCharHeight:0,scaledCellWidth:0,scaledCellHeight:0,scaledCharLeft:0,scaledCharTop:0,scaledCanvasWidth:0,scaledCanvasHeight:0,canvasWidth:0,canvasHeight:0,actualCellWidth:0,actualCellHeight:0},this._updateDimensions(),this._injectCss(),this._rowFactory=D.createInstance(_.DomRendererRowFactory,document,this._colors),this._element.classList.add(l+this._terminalClass),this._screenElement.appendChild(this._rowContainer),this._screenElement.appendChild(this._selectionContainer),this.register(this._linkifier2.onShowLinkUnderline(M=>this._onLinkHover(M))),this.register(this._linkifier2.onHideLinkUnderline(M=>this._onLinkLeave(M)))}get onRequestRedraw(){return new c.EventEmitter().event}dispose(){this._element.classList.remove(l+this._terminalClass),(0,u.removeElementFromParent)(this._rowContainer,this._selectionContainer,this._themeStyleElement,this._dimensionsStyleElement),super.dispose()}_updateDimensions(){let k=this._coreBrowserService.dpr;this.dimensions.scaledCharWidth=this._charSizeService.width*k,this.dimensions.scaledCharHeight=Math.ceil(this._charSizeService.height*k),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._optionsService.rawOptions.letterSpacing),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._optionsService.rawOptions.lineHeight),this.dimensions.scaledCharLeft=0,this.dimensions.scaledCharTop=0,this.dimensions.scaledCanvasWidth=this.dimensions.scaledCellWidth*this._bufferService.cols,this.dimensions.scaledCanvasHeight=this.dimensions.scaledCellHeight*this._bufferService.rows,this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/k),this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/k),this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._bufferService.cols,this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._bufferService.rows;for(let E of this._rowElements)E.style.width=`${this.dimensions.canvasWidth}px`,E.style.height=`${this.dimensions.actualCellHeight}px`,E.style.lineHeight=`${this.dimensions.actualCellHeight}px`,E.style.overflow="hidden";this._dimensionsStyleElement||(this._dimensionsStyleElement=document.createElement("style"),this._screenElement.appendChild(this._dimensionsStyleElement));let y=`${this._terminalSelector} .xterm-rows span { display: inline-block; height: 100%; vertical-align: top; width: ${this.dimensions.actualCellWidth}px}`;this._dimensionsStyleElement.textContent=y,this._selectionContainer.style.height=this._viewportElement.style.height,this._screenElement.style.width=`${this.dimensions.canvasWidth}px`,this._screenElement.style.height=`${this.dimensions.canvasHeight}px`}setColors(k){this._colors=k,this._injectCss()}_injectCss(){this._themeStyleElement||(this._themeStyleElement=document.createElement("style"),this._screenElement.appendChild(this._themeStyleElement));let k=`${this._terminalSelector} .xterm-rows { color: ${this._colors.foreground.css}; font-family: ${this._optionsService.rawOptions.fontFamily}; font-size: ${this._optionsService.rawOptions.fontSize}px;}`;k+=`${this._terminalSelector} span:not(.${_.BOLD_CLASS}) { font-weight: ${this._optionsService.rawOptions.fontWeight};}${this._terminalSelector} span.${_.BOLD_CLASS} { font-weight: ${this._optionsService.rawOptions.fontWeightBold};}${this._terminalSelector} span.${_.ITALIC_CLASS} { font-style: italic;}`,k+="@keyframes blink_box_shadow_"+this._terminalClass+" { 50% {  box-shadow: none; }}",k+="@keyframes blink_block_"+this._terminalClass+` { 0% {  background-color: ${this._colors.cursor.css};  color: ${this._colors.cursorAccent.css}; } 50% {  background-color: ${this._colors.cursorAccent.css};  color: ${this._colors.cursor.css}; }}`,k+=`${this._terminalSelector} .xterm-rows:not(.xterm-focus) .${_.CURSOR_CLASS}.${_.CURSOR_STYLE_BLOCK_CLASS} { outline: 1px solid ${this._colors.cursor.css}; outline-offset: -1px;}${this._terminalSelector} .xterm-rows.xterm-focus .${_.CURSOR_CLASS}.${_.CURSOR_BLINK_CLASS}:not(.${_.CURSOR_STYLE_BLOCK_CLASS}) { animation: blink_box_shadow_`+this._terminalClass+` 1s step-end infinite;}${this._terminalSelector} .xterm-rows.xterm-focus .${_.CURSOR_CLASS}.${_.CURSOR_BLINK_CLASS}.${_.CURSOR_STYLE_BLOCK_CLASS} { animation: blink_block_`+this._terminalClass+` 1s step-end infinite;}${this._terminalSelector} .xterm-rows.xterm-focus .${_.CURSOR_CLASS}.${_.CURSOR_STYLE_BLOCK_CLASS} { background-color: ${this._colors.cursor.css}; color: ${this._colors.cursorAccent.css};}${this._terminalSelector} .xterm-rows .${_.CURSOR_CLASS}.${_.CURSOR_STYLE_BAR_CLASS} { box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${this._colors.cursor.css} inset;}${this._terminalSelector} .xterm-rows .${_.CURSOR_CLASS}.${_.CURSOR_STYLE_UNDERLINE_CLASS} { box-shadow: 0 -1px 0 ${this._colors.cursor.css} inset;}`,k+=`${this._terminalSelector} .xterm-selection { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}${this._terminalSelector}.focus .xterm-selection div { position: absolute; background-color: ${this._colors.selectionBackgroundOpaque.css};}${this._terminalSelector} .xterm-selection div { position: absolute; background-color: ${this._colors.selectionInactiveBackgroundOpaque.css};}`,this._colors.ansi.forEach((y,E)=>{k+=`${this._terminalSelector} .xterm-fg-${E} { color: ${y.css}; }${this._terminalSelector} .xterm-bg-${E} { background-color: ${y.css}; }`}),k+=`${this._terminalSelector} .xterm-fg-${S.INVERTED_DEFAULT_COLOR} { color: ${h.color.opaque(this._colors.background).css}; }${this._terminalSelector} .xterm-bg-${S.INVERTED_DEFAULT_COLOR} { background-color: ${this._colors.foreground.css}; }`,this._themeStyleElement.textContent=k}onDevicePixelRatioChange(){this._updateDimensions()}_refreshRowElements(k,y){for(let E=this._rowElements.length;E<=y;E++){let x=document.createElement("div");this._rowContainer.appendChild(x),this._rowElements.push(x)}for(;this._rowElements.length>y;)this._rowContainer.removeChild(this._rowElements.pop())}onResize(k,y){this._refreshRowElements(k,y),this._updateDimensions()}onCharSizeChanged(){this._updateDimensions()}onBlur(){this._rowContainer.classList.remove(f)}onFocus(){this._rowContainer.classList.add(f)}onSelectionChanged(k,y,E){for(;this._selectionContainer.children.length;)this._selectionContainer.removeChild(this._selectionContainer.children[0]);if(this._rowFactory.onSelectionChanged(k,y,E),this.renderRows(0,this._bufferService.rows-1),!k||!y)return;let x=k[1]-this._bufferService.buffer.ydisp,B=y[1]-this._bufferService.buffer.ydisp,D=Math.max(x,0),w=Math.min(B,this._bufferService.rows-1);if(D>=this._bufferService.rows||w<0)return;let L=document.createDocumentFragment();if(E){let R=k[0]>y[0];L.appendChild(this._createSelectionElement(D,R?y[0]:k[0],R?k[0]:y[0],w-D+1))}else{let R=x===D?k[0]:0,A=D===B?y[0]:this._bufferService.cols;L.appendChild(this._createSelectionElement(D,R,A));let M=w-D-1;if(L.appendChild(this._createSelectionElement(D+1,0,this._bufferService.cols,M)),D!==w){let j=B===w?y[0]:this._bufferService.cols;L.appendChild(this._createSelectionElement(w,0,j))}}this._selectionContainer.appendChild(L)}_createSelectionElement(k,y,E,x=1){let B=document.createElement("div");return B.style.height=x*this.dimensions.actualCellHeight+"px",B.style.top=k*this.dimensions.actualCellHeight+"px",B.style.left=y*this.dimensions.actualCellWidth+"px",B.style.width=this.dimensions.actualCellWidth*(E-y)+"px",B}onCursorMove(){}onOptionsChanged(){this._updateDimensions(),this._injectCss()}clear(){for(let k of this._rowElements)k.innerText=""}renderRows(k,y){let E=this._bufferService.buffer.ybase+this._bufferService.buffer.y,x=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),B=this._optionsService.rawOptions.cursorBlink;for(let D=k;D<=y;D++){let w=this._rowElements[D];w.innerText="";let L=D+this._bufferService.buffer.ydisp,R=this._bufferService.buffer.lines.get(L),A=this._optionsService.rawOptions.cursorStyle;w.appendChild(this._rowFactory.createRow(R,L,L===E,A,x,B,this.dimensions.actualCellWidth,this._bufferService.cols))}}get _terminalSelector(){return`.${l}${this._terminalClass}`}_onLinkHover(k){this._setCellUnderline(k.x1,k.x2,k.y1,k.y2,k.cols,!0)}_onLinkLeave(k){this._setCellUnderline(k.x1,k.x2,k.y1,k.y2,k.cols,!1)}_setCellUnderline(k,y,E,x,B,D){for(;k!==y||E!==x;){let w=this._rowElements[E];if(!w)return;let L=w.children[k];L&&(L.style.textDecoration=D?"underline":"none"),++k>=B&&(k=0,E++)}}};C=a([d(5,p.IInstantiationService),d(6,v.ICharSizeService),d(7,p.IOptionsService),d(8,p.IBufferService),d(9,v.ICoreBrowserService)],C),i.DomRenderer=C},3787:function(o,i,n){var a=this&&this.__decorate||function(C,k,y,E){var x,B=arguments.length,D=B<3?k:E===null?E=Object.getOwnPropertyDescriptor(k,y):E;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")D=Reflect.decorate(C,k,y,E);else for(var w=C.length-1;w>=0;w--)(x=C[w])&&(D=(B<3?x(D):B>3?x(k,y,D):x(k,y))||D);return B>3&&D&&Object.defineProperty(k,y,D),D},d=this&&this.__param||function(C,k){return function(y,E){k(y,E,C)}};Object.defineProperty(i,"__esModule",{value:!0}),i.DomRendererRowFactory=i.CURSOR_STYLE_UNDERLINE_CLASS=i.CURSOR_STYLE_BAR_CLASS=i.CURSOR_STYLE_BLOCK_CLASS=i.CURSOR_BLINK_CLASS=i.CURSOR_CLASS=i.STRIKETHROUGH_CLASS=i.UNDERLINE_CLASS=i.ITALIC_CLASS=i.DIM_CLASS=i.BOLD_CLASS=void 0;let _=n(8036),S=n(643),m=n(511),v=n(2585),p=n(8055),c=n(4725),h=n(4269),u=n(1752),l=n(3734);i.BOLD_CLASS="xterm-bold",i.DIM_CLASS="xterm-dim",i.ITALIC_CLASS="xterm-italic",i.UNDERLINE_CLASS="xterm-underline",i.STRIKETHROUGH_CLASS="xterm-strikethrough",i.CURSOR_CLASS="xterm-cursor",i.CURSOR_BLINK_CLASS="xterm-cursor-blink",i.CURSOR_STYLE_BLOCK_CLASS="xterm-cursor-block",i.CURSOR_STYLE_BAR_CLASS="xterm-cursor-bar",i.CURSOR_STYLE_UNDERLINE_CLASS="xterm-cursor-underline";let f=class{constructor(C,k,y,E,x,B,D){this._document=C,this._colors=k,this._characterJoinerService=y,this._optionsService=E,this._coreBrowserService=x,this._coreService=B,this._decorationService=D,this._workCell=new m.CellData,this._columnSelectMode=!1}setColors(C){this._colors=C}onSelectionChanged(C,k,y){this._selectionStart=C,this._selectionEnd=k,this._columnSelectMode=y}createRow(C,k,y,E,x,B,D,w){let L=this._document.createDocumentFragment(),R=this._characterJoinerService.getJoinedCharacters(k),A=0;for(let M=Math.min(C.length,w)-1;M>=0;M--)if(C.loadCell(M,this._workCell).getCode()!==S.NULL_CELL_CODE||y&&M===x){A=M+1;break}for(let M=0;M<A;M++){C.loadCell(M,this._workCell);let j=this._workCell.getWidth();if(j===0)continue;let q=!1,V=M,W=this._workCell;if(R.length>0&&M===R[0][0]){q=!0;let X=R.shift();W=new h.JoinedCellData(this._workCell,C.translateToString(!0,X[0],X[1]),X[1]-X[0]),V=X[1]-1,j=W.getWidth()}let K=this._document.createElement("span");if(j>1&&(K.style.width=D*j+"px"),q&&(K.style.display="inline",x>=M&&x<=V&&(x=M)),!this._coreService.isCursorHidden&&y&&M===x)switch(K.classList.add(i.CURSOR_CLASS),B&&K.classList.add(i.CURSOR_BLINK_CLASS),E){case"bar":K.classList.add(i.CURSOR_STYLE_BAR_CLASS);break;case"underline":K.classList.add(i.CURSOR_STYLE_UNDERLINE_CLASS);break;default:K.classList.add(i.CURSOR_STYLE_BLOCK_CLASS)}if(W.isBold()&&K.classList.add(i.BOLD_CLASS),W.isItalic()&&K.classList.add(i.ITALIC_CLASS),W.isDim()&&K.classList.add(i.DIM_CLASS),W.isInvisible()?K.textContent=S.WHITESPACE_CELL_CHAR:K.textContent=W.getChars()||S.WHITESPACE_CELL_CHAR,W.isUnderline()&&(K.classList.add(`${i.UNDERLINE_CLASS}-${W.extended.underlineStyle}`),K.textContent===" "&&(K.innerHTML="&nbsp;"),!W.isUnderlineColorDefault()))if(W.isUnderlineColorRGB())K.style.textDecorationColor=`rgb(${l.AttributeData.toColorRGB(W.getUnderlineColor()).join(",")})`;else{let X=W.getUnderlineColor();this._optionsService.rawOptions.drawBoldTextInBrightColors&&W.isBold()&&X<8&&(X+=8),K.style.textDecorationColor=this._colors.ansi[X].css}W.isStrikethrough()&&K.classList.add(i.STRIKETHROUGH_CLASS);let b=W.getFgColor(),H=W.getFgColorMode(),N=W.getBgColor(),T=W.getBgColorMode(),P=!!W.isInverse();if(P){let X=b;b=N,N=X;let Ke=H;H=T,T=Ke}let I,z,$=!1;this._decorationService.forEachDecorationAtCell(M,k,void 0,X=>{X.options.layer!=="top"&&$||(X.backgroundColorRGB&&(T=50331648,N=X.backgroundColorRGB.rgba>>8&16777215,I=X.backgroundColorRGB),X.foregroundColorRGB&&(H=50331648,b=X.foregroundColorRGB.rgba>>8&16777215,z=X.foregroundColorRGB),$=X.options.layer==="top")});let F=this._isCellInSelection(M,k),le;switch($||this._colors.selectionForeground&&F&&(H=50331648,b=this._colors.selectionForeground.rgba>>8&16777215,z=this._colors.selectionForeground),F&&(I=this._coreBrowserService.isFocused?this._colors.selectionBackgroundOpaque:this._colors.selectionInactiveBackgroundOpaque,$=!0),$&&K.classList.add("xterm-decoration-top"),T){case 16777216:case 33554432:le=this._colors.ansi[N],K.classList.add(`xterm-bg-${N}`);break;case 50331648:le=p.rgba.toColor(N>>16,N>>8&255,255&N),this._addStyle(K,`background-color:#${g((N>>>0).toString(16),"0",6)}`);break;default:P?(le=this._colors.foreground,K.classList.add(`xterm-bg-${_.INVERTED_DEFAULT_COLOR}`)):le=this._colors.background}switch(I||W.isDim()&&(I=p.color.multiplyOpacity(le,.5)),H){case 16777216:case 33554432:W.isBold()&&b<8&&this._optionsService.rawOptions.drawBoldTextInBrightColors&&(b+=8),this._applyMinimumContrast(K,le,this._colors.ansi[b],W,I,void 0)||K.classList.add(`xterm-fg-${b}`);break;case 50331648:let X=p.rgba.toColor(b>>16&255,b>>8&255,255&b);this._applyMinimumContrast(K,le,X,W,I,z)||this._addStyle(K,`color:#${g(b.toString(16),"0",6)}`);break;default:this._applyMinimumContrast(K,le,this._colors.foreground,W,I,void 0)||P&&K.classList.add(`xterm-fg-${_.INVERTED_DEFAULT_COLOR}`)}L.appendChild(K),M=V}return L}_applyMinimumContrast(C,k,y,E,x,B){if(this._optionsService.rawOptions.minimumContrastRatio===1||(0,u.excludeFromContrastRatioDemands)(E.getCode()))return!1;let D;return x||B||(D=this._colors.contrastCache.getColor(k.rgba,y.rgba)),D===void 0&&(D=p.color.ensureContrastRatio(x||k,B||y,this._optionsService.rawOptions.minimumContrastRatio),this._colors.contrastCache.setColor((x||k).rgba,(B||y).rgba,D!=null?D:null)),!!D&&(this._addStyle(C,`color:${D.css}`),!0)}_addStyle(C,k){C.setAttribute("style",`${C.getAttribute("style")||""}${k};`)}_isCellInSelection(C,k){let y=this._selectionStart,E=this._selectionEnd;return!(!y||!E)&&(this._columnSelectMode?y[0]<=E[0]?C>=y[0]&&k>=y[1]&&C<E[0]&&k<=E[1]:C<y[0]&&k>=y[1]&&C>=E[0]&&k<=E[1]:k>y[1]&&k<E[1]||y[1]===E[1]&&k===y[1]&&C>=y[0]&&C<E[0]||y[1]<E[1]&&k===E[1]&&C<E[0]||y[1]<E[1]&&k===y[1]&&C>=y[0])}};function g(C,k,y){for(;C.length<y;)C=k+C;return C}f=a([d(2,c.ICharacterJoinerService),d(3,v.IOptionsService),d(4,c.ICoreBrowserService),d(5,v.ICoreService),d(6,v.IDecorationService)],f),i.DomRendererRowFactory=f},456:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.SelectionModel=void 0,i.SelectionModel=class{constructor(n){this._bufferService=n,this.isSelectAllActive=!1,this.selectionStartLength=0}clearSelection(){this.selectionStart=void 0,this.selectionEnd=void 0,this.isSelectAllActive=!1,this.selectionStartLength=0}get finalSelectionStart(){return this.isSelectAllActive?[0,0]:this.selectionEnd&&this.selectionStart&&this.areSelectionValuesReversed()?this.selectionEnd:this.selectionStart}get finalSelectionEnd(){if(this.isSelectAllActive)return[this._bufferService.cols,this._bufferService.buffer.ybase+this._bufferService.rows-1];if(this.selectionStart){if(!this.selectionEnd||this.areSelectionValuesReversed()){let n=this.selectionStart[0]+this.selectionStartLength;return n>this._bufferService.cols?n%this._bufferService.cols==0?[this._bufferService.cols,this.selectionStart[1]+Math.floor(n/this._bufferService.cols)-1]:[n%this._bufferService.cols,this.selectionStart[1]+Math.floor(n/this._bufferService.cols)]:[n,this.selectionStart[1]]}if(this.selectionStartLength&&this.selectionEnd[1]===this.selectionStart[1]){let n=this.selectionStart[0]+this.selectionStartLength;return n>this._bufferService.cols?[n%this._bufferService.cols,this.selectionStart[1]+Math.floor(n/this._bufferService.cols)]:[Math.max(n,this.selectionEnd[0]),this.selectionEnd[1]]}return this.selectionEnd}}areSelectionValuesReversed(){let n=this.selectionStart,a=this.selectionEnd;return!(!n||!a)&&(n[1]>a[1]||n[1]===a[1]&&n[0]>a[0])}onTrim(n){return this.selectionStart&&(this.selectionStart[1]-=n),this.selectionEnd&&(this.selectionEnd[1]-=n),this.selectionEnd&&this.selectionEnd[1]<0?(this.clearSelection(),!0):(this.selectionStart&&this.selectionStart[1]<0&&(this.selectionStart[1]=0),!1)}}},428:function(o,i,n){var a=this&&this.__decorate||function(p,c,h,u){var l,f=arguments.length,g=f<3?c:u===null?u=Object.getOwnPropertyDescriptor(c,h):u;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")g=Reflect.decorate(p,c,h,u);else for(var C=p.length-1;C>=0;C--)(l=p[C])&&(g=(f<3?l(g):f>3?l(c,h,g):l(c,h))||g);return f>3&&g&&Object.defineProperty(c,h,g),g},d=this&&this.__param||function(p,c){return function(h,u){c(h,u,p)}};Object.defineProperty(i,"__esModule",{value:!0}),i.CharSizeService=void 0;let _=n(2585),S=n(8460),m=class{constructor(p,c,h){this._optionsService=h,this.width=0,this.height=0,this._onCharSizeChange=new S.EventEmitter,this._measureStrategy=new v(p,c,this._optionsService)}get hasValidSize(){return this.width>0&&this.height>0}get onCharSizeChange(){return this._onCharSizeChange.event}measure(){let p=this._measureStrategy.measure();p.width===this.width&&p.height===this.height||(this.width=p.width,this.height=p.height,this._onCharSizeChange.fire())}};m=a([d(2,_.IOptionsService)],m),i.CharSizeService=m;class v{constructor(c,h,u){this._document=c,this._parentElement=h,this._optionsService=u,this._result={width:0,height:0},this._measureElement=this._document.createElement("span"),this._measureElement.classList.add("xterm-char-measure-element"),this._measureElement.textContent="W",this._measureElement.setAttribute("aria-hidden","true"),this._parentElement.appendChild(this._measureElement)}measure(){this._measureElement.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._measureElement.style.fontSize=`${this._optionsService.rawOptions.fontSize}px`;let c=this._measureElement.getBoundingClientRect();return c.width!==0&&c.height!==0&&(this._result.width=c.width,this._result.height=Math.ceil(c.height)),this._result}}},4269:function(o,i,n){var a=this&&this.__decorate||function(h,u,l,f){var g,C=arguments.length,k=C<3?u:f===null?f=Object.getOwnPropertyDescriptor(u,l):f;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")k=Reflect.decorate(h,u,l,f);else for(var y=h.length-1;y>=0;y--)(g=h[y])&&(k=(C<3?g(k):C>3?g(u,l,k):g(u,l))||k);return C>3&&k&&Object.defineProperty(u,l,k),k},d=this&&this.__param||function(h,u){return function(l,f){u(l,f,h)}};Object.defineProperty(i,"__esModule",{value:!0}),i.CharacterJoinerService=i.JoinedCellData=void 0;let _=n(3734),S=n(643),m=n(511),v=n(2585);class p extends _.AttributeData{constructor(u,l,f){super(),this.content=0,this.combinedData="",this.fg=u.fg,this.bg=u.bg,this.combinedData=l,this._width=f}isCombined(){return 2097152}getWidth(){return this._width}getChars(){return this.combinedData}getCode(){return 2097151}setFromCharData(u){throw new Error("not implemented")}getAsCharData(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]}}i.JoinedCellData=p;let c=class wl{constructor(u){this._bufferService=u,this._characterJoiners=[],this._nextCharacterJoinerId=0,this._workCell=new m.CellData}register(u){let l={id:this._nextCharacterJoinerId++,handler:u};return this._characterJoiners.push(l),l.id}deregister(u){for(let l=0;l<this._characterJoiners.length;l++)if(this._characterJoiners[l].id===u)return this._characterJoiners.splice(l,1),!0;return!1}getJoinedCharacters(u){if(this._characterJoiners.length===0)return[];let l=this._bufferService.buffer.lines.get(u);if(!l||l.length===0)return[];let f=[],g=l.translateToString(!0),C=0,k=0,y=0,E=l.getFg(0),x=l.getBg(0);for(let B=0;B<l.getTrimmedLength();B++)if(l.loadCell(B,this._workCell),this._workCell.getWidth()!==0){if(this._workCell.fg!==E||this._workCell.bg!==x){if(B-C>1){let D=this._getJoinedRanges(g,y,k,l,C);for(let w=0;w<D.length;w++)f.push(D[w])}C=B,y=k,E=this._workCell.fg,x=this._workCell.bg}k+=this._workCell.getChars().length||S.WHITESPACE_CELL_CHAR.length}if(this._bufferService.cols-C>1){let B=this._getJoinedRanges(g,y,k,l,C);for(let D=0;D<B.length;D++)f.push(B[D])}return f}_getJoinedRanges(u,l,f,g,C){let k=u.substring(l,f),y=[];try{y=this._characterJoiners[0].handler(k)}catch(E){console.error(E)}for(let E=1;E<this._characterJoiners.length;E++)try{let x=this._characterJoiners[E].handler(k);for(let B=0;B<x.length;B++)wl._mergeRanges(y,x[B])}catch(x){console.error(x)}return this._stringRangesToCellRanges(y,g,C),y}_stringRangesToCellRanges(u,l,f){let g=0,C=!1,k=0,y=u[g];if(y){for(let E=f;E<this._bufferService.cols;E++){let x=l.getWidth(E),B=l.getString(E).length||S.WHITESPACE_CELL_CHAR.length;if(x!==0){if(!C&&y[0]<=k&&(y[0]=E,C=!0),y[1]<=k){if(y[1]=E,y=u[++g],!y)break;y[0]<=k?(y[0]=E,C=!0):C=!1}k+=B}}y&&(y[1]=this._bufferService.cols)}}static _mergeRanges(u,l){let f=!1;for(let g=0;g<u.length;g++){let C=u[g];if(f){if(l[1]<=C[0])return u[g-1][1]=l[1],u;if(l[1]<=C[1])return u[g-1][1]=Math.max(l[1],C[1]),u.splice(g,1),u;u.splice(g,1),g--}else{if(l[1]<=C[0])return u.splice(g,0,l),u;if(l[1]<=C[1])return C[0]=Math.min(l[0],C[0]),u;l[0]<C[1]&&(C[0]=Math.min(l[0],C[0]),f=!0)}}return f?u[u.length-1][1]=l[1]:u.push(l),u}};c=a([d(0,v.IBufferService)],c),i.CharacterJoinerService=c},5114:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.CoreBrowserService=void 0,i.CoreBrowserService=class{constructor(n,a){this._textarea=n,this.window=a}get dpr(){return this.window.devicePixelRatio}get isFocused(){return(this._textarea.getRootNode?this._textarea.getRootNode():this._textarea.ownerDocument).activeElement===this._textarea&&this._textarea.ownerDocument.hasFocus()}}},8934:function(o,i,n){var a=this&&this.__decorate||function(v,p,c,h){var u,l=arguments.length,f=l<3?p:h===null?h=Object.getOwnPropertyDescriptor(p,c):h;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")f=Reflect.decorate(v,p,c,h);else for(var g=v.length-1;g>=0;g--)(u=v[g])&&(f=(l<3?u(f):l>3?u(p,c,f):u(p,c))||f);return l>3&&f&&Object.defineProperty(p,c,f),f},d=this&&this.__param||function(v,p){return function(c,h){p(c,h,v)}};Object.defineProperty(i,"__esModule",{value:!0}),i.MouseService=void 0;let _=n(4725),S=n(9806),m=class{constructor(v,p){this._renderService=v,this._charSizeService=p}getCoords(v,p,c,h,u){return(0,S.getCoords)(window,v,p,c,h,this._charSizeService.hasValidSize,this._renderService.dimensions.actualCellWidth,this._renderService.dimensions.actualCellHeight,u)}getMouseReportCoords(v,p){let c=(0,S.getCoordsRelativeToElement)(window,v,p);if(!(!this._charSizeService.hasValidSize||c[0]<0||c[1]<0||c[0]>=this._renderService.dimensions.canvasWidth||c[1]>=this._renderService.dimensions.canvasHeight))return{col:Math.floor(c[0]/this._renderService.dimensions.actualCellWidth),row:Math.floor(c[1]/this._renderService.dimensions.actualCellHeight),x:Math.floor(c[0]),y:Math.floor(c[1])}}};m=a([d(0,_.IRenderService),d(1,_.ICharSizeService)],m),i.MouseService=m},3230:function(o,i,n){var a=this&&this.__decorate||function(l,f,g,C){var k,y=arguments.length,E=y<3?f:C===null?C=Object.getOwnPropertyDescriptor(f,g):C;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")E=Reflect.decorate(l,f,g,C);else for(var x=l.length-1;x>=0;x--)(k=l[x])&&(E=(y<3?k(E):y>3?k(f,g,E):k(f,g))||E);return y>3&&E&&Object.defineProperty(f,g,E),E},d=this&&this.__param||function(l,f){return function(g,C){f(g,C,l)}};Object.defineProperty(i,"__esModule",{value:!0}),i.RenderService=void 0;let _=n(6193),S=n(8460),m=n(844),v=n(5596),p=n(3656),c=n(2585),h=n(4725),u=class extends m.Disposable{constructor(l,f,g,C,k,y,E,x){if(super(),this._renderer=l,this._rowCount=f,this._charSizeService=k,this._isPaused=!1,this._needsFullRefresh=!1,this._isNextRenderRedrawOnly=!0,this._needsSelectionRefresh=!1,this._canvasWidth=0,this._canvasHeight=0,this._selectionState={start:void 0,end:void 0,columnSelectMode:!1},this._onDimensionsChange=new S.EventEmitter,this._onRenderedViewportChange=new S.EventEmitter,this._onRender=new S.EventEmitter,this._onRefreshRequest=new S.EventEmitter,this.register({dispose:()=>this._renderer.dispose()}),this._renderDebouncer=new _.RenderDebouncer(x.window,(B,D)=>this._renderRows(B,D)),this.register(this._renderDebouncer),this._screenDprMonitor=new v.ScreenDprMonitor(x.window),this._screenDprMonitor.setListener(()=>this.onDevicePixelRatioChange()),this.register(this._screenDprMonitor),this.register(E.onResize(()=>this._fullRefresh())),this.register(E.buffers.onBufferActivate(()=>{var B;return(B=this._renderer)===null||B===void 0?void 0:B.clear()})),this.register(C.onOptionChange(()=>this._handleOptionsChanged())),this.register(this._charSizeService.onCharSizeChange(()=>this.onCharSizeChanged())),this.register(y.onDecorationRegistered(()=>this._fullRefresh())),this.register(y.onDecorationRemoved(()=>this._fullRefresh())),this._renderer.onRequestRedraw(B=>this.refreshRows(B.start,B.end,!0)),this.register((0,p.addDisposableDomListener)(x.window,"resize",()=>this.onDevicePixelRatioChange())),"IntersectionObserver"in x.window){let B=new x.window.IntersectionObserver(D=>this._onIntersectionChange(D[D.length-1]),{threshold:0});B.observe(g),this.register({dispose:()=>B.disconnect()})}}get onDimensionsChange(){return this._onDimensionsChange.event}get onRenderedViewportChange(){return this._onRenderedViewportChange.event}get onRender(){return this._onRender.event}get onRefreshRequest(){return this._onRefreshRequest.event}get dimensions(){return this._renderer.dimensions}_onIntersectionChange(l){this._isPaused=l.isIntersecting===void 0?l.intersectionRatio===0:!l.isIntersecting,this._isPaused||this._charSizeService.hasValidSize||this._charSizeService.measure(),!this._isPaused&&this._needsFullRefresh&&(this.refreshRows(0,this._rowCount-1),this._needsFullRefresh=!1)}refreshRows(l,f,g=!1){this._isPaused?this._needsFullRefresh=!0:(g||(this._isNextRenderRedrawOnly=!1),this._renderDebouncer.refresh(l,f,this._rowCount))}_renderRows(l,f){this._renderer.renderRows(l,f),this._needsSelectionRefresh&&(this._renderer.onSelectionChanged(this._selectionState.start,this._selectionState.end,this._selectionState.columnSelectMode),this._needsSelectionRefresh=!1),this._isNextRenderRedrawOnly||this._onRenderedViewportChange.fire({start:l,end:f}),this._onRender.fire({start:l,end:f}),this._isNextRenderRedrawOnly=!0}resize(l,f){this._rowCount=f,this._fireOnCanvasResize()}_handleOptionsChanged(){this._renderer.onOptionsChanged(),this.refreshRows(0,this._rowCount-1),this._fireOnCanvasResize()}_fireOnCanvasResize(){this._renderer.dimensions.canvasWidth===this._canvasWidth&&this._renderer.dimensions.canvasHeight===this._canvasHeight||this._onDimensionsChange.fire(this._renderer.dimensions)}dispose(){super.dispose()}setRenderer(l){this._renderer.dispose(),this._renderer=l,this._renderer.onRequestRedraw(f=>this.refreshRows(f.start,f.end,!0)),this._needsSelectionRefresh=!0,this._fullRefresh()}addRefreshCallback(l){return this._renderDebouncer.addRefreshCallback(l)}_fullRefresh(){this._isPaused?this._needsFullRefresh=!0:this.refreshRows(0,this._rowCount-1)}clearTextureAtlas(){var l,f;(f=(l=this._renderer)===null||l===void 0?void 0:l.clearTextureAtlas)===null||f===void 0||f.call(l),this._fullRefresh()}setColors(l){this._renderer.setColors(l),this._fullRefresh()}onDevicePixelRatioChange(){this._charSizeService.measure(),this._renderer.onDevicePixelRatioChange(),this.refreshRows(0,this._rowCount-1)}onResize(l,f){this._renderer.onResize(l,f),this._fullRefresh()}onCharSizeChanged(){this._renderer.onCharSizeChanged()}onBlur(){this._renderer.onBlur()}onFocus(){this._renderer.onFocus()}onSelectionChanged(l,f,g){this._selectionState.start=l,this._selectionState.end=f,this._selectionState.columnSelectMode=g,this._renderer.onSelectionChanged(l,f,g)}onCursorMove(){this._renderer.onCursorMove()}clear(){this._renderer.clear()}};u=a([d(3,c.IOptionsService),d(4,h.ICharSizeService),d(5,c.IDecorationService),d(6,c.IBufferService),d(7,h.ICoreBrowserService)],u),i.RenderService=u},9312:function(o,i,n){var a=this&&this.__decorate||function(y,E,x,B){var D,w=arguments.length,L=w<3?E:B===null?B=Object.getOwnPropertyDescriptor(E,x):B;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")L=Reflect.decorate(y,E,x,B);else for(var R=y.length-1;R>=0;R--)(D=y[R])&&(L=(w<3?D(L):w>3?D(E,x,L):D(E,x))||L);return w>3&&L&&Object.defineProperty(E,x,L),L},d=this&&this.__param||function(y,E){return function(x,B){E(x,B,y)}};Object.defineProperty(i,"__esModule",{value:!0}),i.SelectionService=void 0;let _=n(6114),S=n(456),m=n(511),v=n(8460),p=n(4725),c=n(2585),h=n(9806),u=n(9504),l=n(844),f=n(4841),g=String.fromCharCode(160),C=new RegExp(g,"g"),k=class extends l.Disposable{constructor(y,E,x,B,D,w,L,R,A){super(),this._element=y,this._screenElement=E,this._linkifier=x,this._bufferService=B,this._coreService=D,this._mouseService=w,this._optionsService=L,this._renderService=R,this._coreBrowserService=A,this._dragScrollAmount=0,this._enabled=!0,this._workCell=new m.CellData,this._mouseDownTimeStamp=0,this._oldHasSelection=!1,this._oldSelectionStart=void 0,this._oldSelectionEnd=void 0,this._onLinuxMouseSelection=this.register(new v.EventEmitter),this._onRedrawRequest=this.register(new v.EventEmitter),this._onSelectionChange=this.register(new v.EventEmitter),this._onRequestScrollLines=this.register(new v.EventEmitter),this._mouseMoveListener=M=>this._onMouseMove(M),this._mouseUpListener=M=>this._onMouseUp(M),this._coreService.onUserInput(()=>{this.hasSelection&&this.clearSelection()}),this._trimListener=this._bufferService.buffer.lines.onTrim(M=>this._onTrim(M)),this.register(this._bufferService.buffers.onBufferActivate(M=>this._onBufferActivate(M))),this.enable(),this._model=new S.SelectionModel(this._bufferService),this._activeSelectionMode=0}get onLinuxMouseSelection(){return this._onLinuxMouseSelection.event}get onRequestRedraw(){return this._onRedrawRequest.event}get onSelectionChange(){return this._onSelectionChange.event}get onRequestScrollLines(){return this._onRequestScrollLines.event}dispose(){this._removeMouseDownListeners()}reset(){this.clearSelection()}disable(){this.clearSelection(),this._enabled=!1}enable(){this._enabled=!0}get selectionStart(){return this._model.finalSelectionStart}get selectionEnd(){return this._model.finalSelectionEnd}get hasSelection(){let y=this._model.finalSelectionStart,E=this._model.finalSelectionEnd;return!(!y||!E||y[0]===E[0]&&y[1]===E[1])}get selectionText(){let y=this._model.finalSelectionStart,E=this._model.finalSelectionEnd;if(!y||!E)return"";let x=this._bufferService.buffer,B=[];if(this._activeSelectionMode===3){if(y[0]===E[0])return"";let D=y[0]<E[0]?y[0]:E[0],w=y[0]<E[0]?E[0]:y[0];for(let L=y[1];L<=E[1];L++){let R=x.translateBufferLineToString(L,!0,D,w);B.push(R)}}else{let D=y[1]===E[1]?E[0]:void 0;B.push(x.translateBufferLineToString(y[1],!0,y[0],D));for(let w=y[1]+1;w<=E[1]-1;w++){let L=x.lines.get(w),R=x.translateBufferLineToString(w,!0);L!=null&&L.isWrapped?B[B.length-1]+=R:B.push(R)}if(y[1]!==E[1]){let w=x.lines.get(E[1]),L=x.translateBufferLineToString(E[1],!0,0,E[0]);w&&w.isWrapped?B[B.length-1]+=L:B.push(L)}}return B.map(D=>D.replace(C," ")).join(_.isWindows?`\r
`:`
`)}clearSelection(){this._model.clearSelection(),this._removeMouseDownListeners(),this.refresh(),this._onSelectionChange.fire()}refresh(y){this._refreshAnimationFrame||(this._refreshAnimationFrame=this._coreBrowserService.window.requestAnimationFrame(()=>this._refresh())),_.isLinux&&y&&this.selectionText.length&&this._onLinuxMouseSelection.fire(this.selectionText)}_refresh(){this._refreshAnimationFrame=void 0,this._onRedrawRequest.fire({start:this._model.finalSelectionStart,end:this._model.finalSelectionEnd,columnSelectMode:this._activeSelectionMode===3})}_isClickInSelection(y){let E=this._getMouseBufferCoords(y),x=this._model.finalSelectionStart,B=this._model.finalSelectionEnd;return!!(x&&B&&E)&&this._areCoordsInSelection(E,x,B)}isCellInSelection(y,E){let x=this._model.finalSelectionStart,B=this._model.finalSelectionEnd;return!(!x||!B)&&this._areCoordsInSelection([y,E],x,B)}_areCoordsInSelection(y,E,x){return y[1]>E[1]&&y[1]<x[1]||E[1]===x[1]&&y[1]===E[1]&&y[0]>=E[0]&&y[0]<x[0]||E[1]<x[1]&&y[1]===x[1]&&y[0]<x[0]||E[1]<x[1]&&y[1]===E[1]&&y[0]>=E[0]}_selectWordAtCursor(y,E){var x,B;let D=(B=(x=this._linkifier.currentLink)===null||x===void 0?void 0:x.link)===null||B===void 0?void 0:B.range;if(D)return this._model.selectionStart=[D.start.x-1,D.start.y-1],this._model.selectionStartLength=(0,f.getRangeLength)(D,this._bufferService.cols),this._model.selectionEnd=void 0,!0;let w=this._getMouseBufferCoords(y);return!!w&&(this._selectWordAt(w,E),this._model.selectionEnd=void 0,!0)}selectAll(){this._model.isSelectAllActive=!0,this.refresh(),this._onSelectionChange.fire()}selectLines(y,E){this._model.clearSelection(),y=Math.max(y,0),E=Math.min(E,this._bufferService.buffer.lines.length-1),this._model.selectionStart=[0,y],this._model.selectionEnd=[this._bufferService.cols,E],this.refresh(),this._onSelectionChange.fire()}_onTrim(y){this._model.onTrim(y)&&this.refresh()}_getMouseBufferCoords(y){let E=this._mouseService.getCoords(y,this._screenElement,this._bufferService.cols,this._bufferService.rows,!0);if(E)return E[0]--,E[1]--,E[1]+=this._bufferService.buffer.ydisp,E}_getMouseEventScrollAmount(y){let E=(0,h.getCoordsRelativeToElement)(this._coreBrowserService.window,y,this._screenElement)[1],x=this._renderService.dimensions.canvasHeight;return E>=0&&E<=x?0:(E>x&&(E-=x),E=Math.min(Math.max(E,-50),50),E/=50,E/Math.abs(E)+Math.round(14*E))}shouldForceSelection(y){return _.isMac?y.altKey&&this._optionsService.rawOptions.macOptionClickForcesSelection:y.shiftKey}onMouseDown(y){if(this._mouseDownTimeStamp=y.timeStamp,(y.button!==2||!this.hasSelection)&&y.button===0){if(!this._enabled){if(!this.shouldForceSelection(y))return;y.stopPropagation()}y.preventDefault(),this._dragScrollAmount=0,this._enabled&&y.shiftKey?this._onIncrementalClick(y):y.detail===1?this._onSingleClick(y):y.detail===2?this._onDoubleClick(y):y.detail===3&&this._onTripleClick(y),this._addMouseDownListeners(),this.refresh(!0)}}_addMouseDownListeners(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.addEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.addEventListener("mouseup",this._mouseUpListener)),this._dragScrollIntervalTimer=this._coreBrowserService.window.setInterval(()=>this._dragScroll(),50)}_removeMouseDownListeners(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.removeEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.removeEventListener("mouseup",this._mouseUpListener)),this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer),this._dragScrollIntervalTimer=void 0}_onIncrementalClick(y){this._model.selectionStart&&(this._model.selectionEnd=this._getMouseBufferCoords(y))}_onSingleClick(y){if(this._model.selectionStartLength=0,this._model.isSelectAllActive=!1,this._activeSelectionMode=this.shouldColumnSelect(y)?3:0,this._model.selectionStart=this._getMouseBufferCoords(y),!this._model.selectionStart)return;this._model.selectionEnd=void 0;let E=this._bufferService.buffer.lines.get(this._model.selectionStart[1]);E&&E.length!==this._model.selectionStart[0]&&E.hasWidth(this._model.selectionStart[0])===0&&this._model.selectionStart[0]++}_onDoubleClick(y){this._selectWordAtCursor(y,!0)&&(this._activeSelectionMode=1)}_onTripleClick(y){let E=this._getMouseBufferCoords(y);E&&(this._activeSelectionMode=2,this._selectLineAt(E[1]))}shouldColumnSelect(y){return y.altKey&&!(_.isMac&&this._optionsService.rawOptions.macOptionClickForcesSelection)}_onMouseMove(y){if(y.stopImmediatePropagation(),!this._model.selectionStart)return;let E=this._model.selectionEnd?[this._model.selectionEnd[0],this._model.selectionEnd[1]]:null;if(this._model.selectionEnd=this._getMouseBufferCoords(y),!this._model.selectionEnd)return void this.refresh(!0);this._activeSelectionMode===2?this._model.selectionEnd[1]<this._model.selectionStart[1]?this._model.selectionEnd[0]=0:this._model.selectionEnd[0]=this._bufferService.cols:this._activeSelectionMode===1&&this._selectToWordAt(this._model.selectionEnd),this._dragScrollAmount=this._getMouseEventScrollAmount(y),this._activeSelectionMode!==3&&(this._dragScrollAmount>0?this._model.selectionEnd[0]=this._bufferService.cols:this._dragScrollAmount<0&&(this._model.selectionEnd[0]=0));let x=this._bufferService.buffer;if(this._model.selectionEnd[1]<x.lines.length){let B=x.lines.get(this._model.selectionEnd[1]);B&&B.hasWidth(this._model.selectionEnd[0])===0&&this._model.selectionEnd[0]++}E&&E[0]===this._model.selectionEnd[0]&&E[1]===this._model.selectionEnd[1]||this.refresh(!0)}_dragScroll(){if(this._model.selectionEnd&&this._model.selectionStart&&this._dragScrollAmount){this._onRequestScrollLines.fire({amount:this._dragScrollAmount,suppressScrollEvent:!1});let y=this._bufferService.buffer;this._dragScrollAmount>0?(this._activeSelectionMode!==3&&(this._model.selectionEnd[0]=this._bufferService.cols),this._model.selectionEnd[1]=Math.min(y.ydisp+this._bufferService.rows,y.lines.length-1)):(this._activeSelectionMode!==3&&(this._model.selectionEnd[0]=0),this._model.selectionEnd[1]=y.ydisp),this.refresh()}}_onMouseUp(y){let E=y.timeStamp-this._mouseDownTimeStamp;if(this._removeMouseDownListeners(),this.selectionText.length<=1&&E<500&&y.altKey&&this._optionsService.rawOptions.altClickMovesCursor){if(this._bufferService.buffer.ybase===this._bufferService.buffer.ydisp){let x=this._mouseService.getCoords(y,this._element,this._bufferService.cols,this._bufferService.rows,!1);if(x&&x[0]!==void 0&&x[1]!==void 0){let B=(0,u.moveToCellSequence)(x[0]-1,x[1]-1,this._bufferService,this._coreService.decPrivateModes.applicationCursorKeys);this._coreService.triggerDataEvent(B,!0)}}}else this._fireEventIfSelectionChanged()}_fireEventIfSelectionChanged(){let y=this._model.finalSelectionStart,E=this._model.finalSelectionEnd,x=!(!y||!E||y[0]===E[0]&&y[1]===E[1]);x?y&&E&&(this._oldSelectionStart&&this._oldSelectionEnd&&y[0]===this._oldSelectionStart[0]&&y[1]===this._oldSelectionStart[1]&&E[0]===this._oldSelectionEnd[0]&&E[1]===this._oldSelectionEnd[1]||this._fireOnSelectionChange(y,E,x)):this._oldHasSelection&&this._fireOnSelectionChange(y,E,x)}_fireOnSelectionChange(y,E,x){this._oldSelectionStart=y,this._oldSelectionEnd=E,this._oldHasSelection=x,this._onSelectionChange.fire()}_onBufferActivate(y){this.clearSelection(),this._trimListener.dispose(),this._trimListener=y.activeBuffer.lines.onTrim(E=>this._onTrim(E))}_convertViewportColToCharacterIndex(y,E){let x=E[0];for(let B=0;E[0]>=B;B++){let D=y.loadCell(B,this._workCell).getChars().length;this._workCell.getWidth()===0?x--:D>1&&E[0]!==B&&(x+=D-1)}return x}setSelection(y,E,x){this._model.clearSelection(),this._removeMouseDownListeners(),this._model.selectionStart=[y,E],this._model.selectionStartLength=x,this.refresh(),this._fireEventIfSelectionChanged()}rightClickSelect(y){this._isClickInSelection(y)||(this._selectWordAtCursor(y,!1)&&this.refresh(!0),this._fireEventIfSelectionChanged())}_getWordAt(y,E,x=!0,B=!0){if(y[0]>=this._bufferService.cols)return;let D=this._bufferService.buffer,w=D.lines.get(y[1]);if(!w)return;let L=D.translateBufferLineToString(y[1],!1),R=this._convertViewportColToCharacterIndex(w,y),A=R,M=y[0]-R,j=0,q=0,V=0,W=0;if(L.charAt(R)===" "){for(;R>0&&L.charAt(R-1)===" ";)R--;for(;A<L.length&&L.charAt(A+1)===" ";)A++}else{let H=y[0],N=y[0];w.getWidth(H)===0&&(j++,H--),w.getWidth(N)===2&&(q++,N++);let T=w.getString(N).length;for(T>1&&(W+=T-1,A+=T-1);H>0&&R>0&&!this._isCharWordSeparator(w.loadCell(H-1,this._workCell));){w.loadCell(H-1,this._workCell);let P=this._workCell.getChars().length;this._workCell.getWidth()===0?(j++,H--):P>1&&(V+=P-1,R-=P-1),R--,H--}for(;N<w.length&&A+1<L.length&&!this._isCharWordSeparator(w.loadCell(N+1,this._workCell));){w.loadCell(N+1,this._workCell);let P=this._workCell.getChars().length;this._workCell.getWidth()===2?(q++,N++):P>1&&(W+=P-1,A+=P-1),A++,N++}}A++;let K=R+M-j+V,b=Math.min(this._bufferService.cols,A-R+j+q-V-W);if(E||L.slice(R,A).trim()!==""){if(x&&K===0&&w.getCodePoint(0)!==32){let H=D.lines.get(y[1]-1);if(H&&w.isWrapped&&H.getCodePoint(this._bufferService.cols-1)!==32){let N=this._getWordAt([this._bufferService.cols-1,y[1]-1],!1,!0,!1);if(N){let T=this._bufferService.cols-N.start;K-=T,b+=T}}}if(B&&K+b===this._bufferService.cols&&w.getCodePoint(this._bufferService.cols-1)!==32){let H=D.lines.get(y[1]+1);if((H==null?void 0:H.isWrapped)&&H.getCodePoint(0)!==32){let N=this._getWordAt([0,y[1]+1],!1,!1,!0);N&&(b+=N.length)}}return{start:K,length:b}}}_selectWordAt(y,E){let x=this._getWordAt(y,E);if(x){for(;x.start<0;)x.start+=this._bufferService.cols,y[1]--;this._model.selectionStart=[x.start,y[1]],this._model.selectionStartLength=x.length}}_selectToWordAt(y){let E=this._getWordAt(y,!0);if(E){let x=y[1];for(;E.start<0;)E.start+=this._bufferService.cols,x--;if(!this._model.areSelectionValuesReversed())for(;E.start+E.length>this._bufferService.cols;)E.length-=this._bufferService.cols,x++;this._model.selectionEnd=[this._model.areSelectionValuesReversed()?E.start:E.start+E.length,x]}}_isCharWordSeparator(y){return y.getWidth()!==0&&this._optionsService.rawOptions.wordSeparator.indexOf(y.getChars())>=0}_selectLineAt(y){let E=this._bufferService.buffer.getWrappedRangeForLine(y),x={start:{x:0,y:E.first},end:{x:this._bufferService.cols-1,y:E.last}};this._model.selectionStart=[0,E.first],this._model.selectionEnd=void 0,this._model.selectionStartLength=(0,f.getRangeLength)(x,this._bufferService.cols)}};k=a([d(3,c.IBufferService),d(4,c.ICoreService),d(5,p.IMouseService),d(6,c.IOptionsService),d(7,p.IRenderService),d(8,p.ICoreBrowserService)],k),i.SelectionService=k},4725:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.ICharacterJoinerService=i.ISelectionService=i.IRenderService=i.IMouseService=i.ICoreBrowserService=i.ICharSizeService=void 0;let a=n(8343);i.ICharSizeService=(0,a.createDecorator)("CharSizeService"),i.ICoreBrowserService=(0,a.createDecorator)("CoreBrowserService"),i.IMouseService=(0,a.createDecorator)("MouseService"),i.IRenderService=(0,a.createDecorator)("RenderService"),i.ISelectionService=(0,a.createDecorator)("SelectionService"),i.ICharacterJoinerService=(0,a.createDecorator)("CharacterJoinerService")},6349:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.CircularList=void 0;let a=n(8460);i.CircularList=class{constructor(d){this._maxLength=d,this.onDeleteEmitter=new a.EventEmitter,this.onInsertEmitter=new a.EventEmitter,this.onTrimEmitter=new a.EventEmitter,this._array=new Array(this._maxLength),this._startIndex=0,this._length=0}get onDelete(){return this.onDeleteEmitter.event}get onInsert(){return this.onInsertEmitter.event}get onTrim(){return this.onTrimEmitter.event}get maxLength(){return this._maxLength}set maxLength(d){if(this._maxLength===d)return;let _=new Array(d);for(let S=0;S<Math.min(d,this.length);S++)_[S]=this._array[this._getCyclicIndex(S)];this._array=_,this._maxLength=d,this._startIndex=0}get length(){return this._length}set length(d){if(d>this._length)for(let _=this._length;_<d;_++)this._array[_]=void 0;this._length=d}get(d){return this._array[this._getCyclicIndex(d)]}set(d,_){this._array[this._getCyclicIndex(d)]=_}push(d){this._array[this._getCyclicIndex(this._length)]=d,this._length===this._maxLength?(this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1)):this._length++}recycle(){if(this._length!==this._maxLength)throw new Error("Can only recycle when the buffer is full");return this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1),this._array[this._getCyclicIndex(this._length-1)]}get isFull(){return this._length===this._maxLength}pop(){return this._array[this._getCyclicIndex(this._length---1)]}splice(d,_,...S){if(_){for(let m=d;m<this._length-_;m++)this._array[this._getCyclicIndex(m)]=this._array[this._getCyclicIndex(m+_)];this._length-=_,this.onDeleteEmitter.fire({index:d,amount:_})}for(let m=this._length-1;m>=d;m--)this._array[this._getCyclicIndex(m+S.length)]=this._array[this._getCyclicIndex(m)];for(let m=0;m<S.length;m++)this._array[this._getCyclicIndex(d+m)]=S[m];if(S.length&&this.onInsertEmitter.fire({index:d,amount:S.length}),this._length+S.length>this._maxLength){let m=this._length+S.length-this._maxLength;this._startIndex+=m,this._length=this._maxLength,this.onTrimEmitter.fire(m)}else this._length+=S.length}trimStart(d){d>this._length&&(d=this._length),this._startIndex+=d,this._length-=d,this.onTrimEmitter.fire(d)}shiftElements(d,_,S){if(!(_<=0)){if(d<0||d>=this._length)throw new Error("start argument out of range");if(d+S<0)throw new Error("Cannot shift elements in list beyond index 0");if(S>0){for(let v=_-1;v>=0;v--)this.set(d+v+S,this.get(d+v));let m=d+_+S-this._length;if(m>0)for(this._length+=m;this._length>this._maxLength;)this._length--,this._startIndex++,this.onTrimEmitter.fire(1)}else for(let m=0;m<_;m++)this.set(d+m+S,this.get(d+m))}}_getCyclicIndex(d){return(this._startIndex+d)%this._maxLength}}},1439:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.clone=void 0,i.clone=function n(a,d=5){if(typeof a!="object")return a;let _=Array.isArray(a)?[]:{};for(let S in a)_[S]=d<=1?a[S]:a[S]&&n(a[S],d-1);return _}},8055:(o,i)=>{var n,a,d;function _(m){let v=m.toString(16);return v.length<2?"0"+v:v}function S(m,v){return m<v?(v+.05)/(m+.05):(m+.05)/(v+.05)}Object.defineProperty(i,"__esModule",{value:!0}),i.contrastRatio=i.toPaddedHex=i.rgba=i.rgb=i.css=i.color=i.channels=void 0,function(m){m.toCss=function(v,p,c,h){return h!==void 0?`#${_(v)}${_(p)}${_(c)}${_(h)}`:`#${_(v)}${_(p)}${_(c)}`},m.toRgba=function(v,p,c,h=255){return(v<<24|p<<16|c<<8|h)>>>0}}(n=i.channels||(i.channels={})),function(m){function v(p,c){let h=Math.round(255*c),[u,l,f]=d.toChannels(p.rgba);return{css:n.toCss(u,l,f,h),rgba:n.toRgba(u,l,f,h)}}m.blend=function(p,c){let h=(255&c.rgba)/255;if(h===1)return{css:c.css,rgba:c.rgba};let u=c.rgba>>24&255,l=c.rgba>>16&255,f=c.rgba>>8&255,g=p.rgba>>24&255,C=p.rgba>>16&255,k=p.rgba>>8&255,y=g+Math.round((u-g)*h),E=C+Math.round((l-C)*h),x=k+Math.round((f-k)*h);return{css:n.toCss(y,E,x),rgba:n.toRgba(y,E,x)}},m.isOpaque=function(p){return(255&p.rgba)==255},m.ensureContrastRatio=function(p,c,h){let u=d.ensureContrastRatio(p.rgba,c.rgba,h);if(u)return d.toColor(u>>24&255,u>>16&255,u>>8&255)},m.opaque=function(p){let c=(255|p.rgba)>>>0,[h,u,l]=d.toChannels(c);return{css:n.toCss(h,u,l),rgba:c}},m.opacity=v,m.multiplyOpacity=function(p,c){return v(p,(255&p.rgba)*c/255)},m.toColorRGB=function(p){return[p.rgba>>24&255,p.rgba>>16&255,p.rgba>>8&255]}}(i.color||(i.color={})),(i.css||(i.css={})).toColor=function(m){if(m.match(/#[0-9a-f]{3,8}/i))switch(m.length){case 4:{let p=parseInt(m.slice(1,2).repeat(2),16),c=parseInt(m.slice(2,3).repeat(2),16),h=parseInt(m.slice(3,4).repeat(2),16);return d.toColor(p,c,h)}case 5:{let p=parseInt(m.slice(1,2).repeat(2),16),c=parseInt(m.slice(2,3).repeat(2),16),h=parseInt(m.slice(3,4).repeat(2),16),u=parseInt(m.slice(4,5).repeat(2),16);return d.toColor(p,c,h,u)}case 7:return{css:m,rgba:(parseInt(m.slice(1),16)<<8|255)>>>0};case 9:return{css:m,rgba:parseInt(m.slice(1),16)>>>0}}let v=m.match(/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(,\s*(0|1|\d?\.(\d+))\s*)?\)/);if(v){let p=parseInt(v[1]),c=parseInt(v[2]),h=parseInt(v[3]),u=Math.round(255*(v[5]===void 0?1:parseFloat(v[5])));return d.toColor(p,c,h,u)}throw new Error("css.toColor: Unsupported css format")},function(m){function v(p,c,h){let u=p/255,l=c/255,f=h/255;return .2126*(u<=.03928?u/12.92:Math.pow((u+.055)/1.055,2.4))+.7152*(l<=.03928?l/12.92:Math.pow((l+.055)/1.055,2.4))+.0722*(f<=.03928?f/12.92:Math.pow((f+.055)/1.055,2.4))}m.relativeLuminance=function(p){return v(p>>16&255,p>>8&255,255&p)},m.relativeLuminance2=v}(a=i.rgb||(i.rgb={})),function(m){function v(c,h,u){let l=c>>24&255,f=c>>16&255,g=c>>8&255,C=h>>24&255,k=h>>16&255,y=h>>8&255,E=S(a.relativeLuminance2(C,k,y),a.relativeLuminance2(l,f,g));for(;E<u&&(C>0||k>0||y>0);)C-=Math.max(0,Math.ceil(.1*C)),k-=Math.max(0,Math.ceil(.1*k)),y-=Math.max(0,Math.ceil(.1*y)),E=S(a.relativeLuminance2(C,k,y),a.relativeLuminance2(l,f,g));return(C<<24|k<<16|y<<8|255)>>>0}function p(c,h,u){let l=c>>24&255,f=c>>16&255,g=c>>8&255,C=h>>24&255,k=h>>16&255,y=h>>8&255,E=S(a.relativeLuminance2(C,k,y),a.relativeLuminance2(l,f,g));for(;E<u&&(C<255||k<255||y<255);)C=Math.min(255,C+Math.ceil(.1*(255-C))),k=Math.min(255,k+Math.ceil(.1*(255-k))),y=Math.min(255,y+Math.ceil(.1*(255-y))),E=S(a.relativeLuminance2(C,k,y),a.relativeLuminance2(l,f,g));return(C<<24|k<<16|y<<8|255)>>>0}m.ensureContrastRatio=function(c,h,u){let l=a.relativeLuminance(c>>8),f=a.relativeLuminance(h>>8);if(S(l,f)<u){if(f<l){let k=v(c,h,u),y=S(l,a.relativeLuminance(k>>8));if(y<u){let E=p(c,h,u);return y>S(l,a.relativeLuminance(E>>8))?k:E}return k}let g=p(c,h,u),C=S(l,a.relativeLuminance(g>>8));if(C<u){let k=v(c,h,u);return C>S(l,a.relativeLuminance(k>>8))?g:k}return g}},m.reduceLuminance=v,m.increaseLuminance=p,m.toChannels=function(c){return[c>>24&255,c>>16&255,c>>8&255,255&c]},m.toColor=function(c,h,u,l){return{css:n.toCss(c,h,u,l),rgba:n.toRgba(c,h,u,l)}}}(d=i.rgba||(i.rgba={})),i.toPaddedHex=_,i.contrastRatio=S},8969:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.CoreTerminal=void 0;let a=n(844),d=n(2585),_=n(4348),S=n(7866),m=n(744),v=n(7302),p=n(6975),c=n(8460),h=n(1753),u=n(3730),l=n(1480),f=n(7994),g=n(9282),C=n(5435),k=n(5981),y=n(2660),E=!1;class x extends a.Disposable{constructor(D){super(),this._onBinary=new c.EventEmitter,this._onData=new c.EventEmitter,this._onLineFeed=new c.EventEmitter,this._onResize=new c.EventEmitter,this._onScroll=new c.EventEmitter,this._onWriteParsed=new c.EventEmitter,this._instantiationService=new _.InstantiationService,this.optionsService=new v.OptionsService(D),this._instantiationService.setService(d.IOptionsService,this.optionsService),this._bufferService=this.register(this._instantiationService.createInstance(m.BufferService)),this._instantiationService.setService(d.IBufferService,this._bufferService),this._logService=this._instantiationService.createInstance(S.LogService),this._instantiationService.setService(d.ILogService,this._logService),this.coreService=this.register(this._instantiationService.createInstance(p.CoreService,()=>this.scrollToBottom())),this._instantiationService.setService(d.ICoreService,this.coreService),this.coreMouseService=this._instantiationService.createInstance(h.CoreMouseService),this._instantiationService.setService(d.ICoreMouseService,this.coreMouseService),this._dirtyRowService=this._instantiationService.createInstance(u.DirtyRowService),this._instantiationService.setService(d.IDirtyRowService,this._dirtyRowService),this.unicodeService=this._instantiationService.createInstance(l.UnicodeService),this._instantiationService.setService(d.IUnicodeService,this.unicodeService),this._charsetService=this._instantiationService.createInstance(f.CharsetService),this._instantiationService.setService(d.ICharsetService,this._charsetService),this._oscLinkService=this._instantiationService.createInstance(y.OscLinkService),this._instantiationService.setService(d.IOscLinkService,this._oscLinkService),this._inputHandler=new C.InputHandler(this._bufferService,this._charsetService,this.coreService,this._dirtyRowService,this._logService,this.optionsService,this._oscLinkService,this.coreMouseService,this.unicodeService),this.register((0,c.forwardEvent)(this._inputHandler.onLineFeed,this._onLineFeed)),this.register(this._inputHandler),this.register((0,c.forwardEvent)(this._bufferService.onResize,this._onResize)),this.register((0,c.forwardEvent)(this.coreService.onData,this._onData)),this.register((0,c.forwardEvent)(this.coreService.onBinary,this._onBinary)),this.register(this.optionsService.onOptionChange(w=>this._updateOptions(w))),this.register(this._bufferService.onScroll(w=>{this._onScroll.fire({position:this._bufferService.buffer.ydisp,source:0}),this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop,this._bufferService.buffer.scrollBottom)})),this.register(this._inputHandler.onScroll(w=>{this._onScroll.fire({position:this._bufferService.buffer.ydisp,source:0}),this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop,this._bufferService.buffer.scrollBottom)})),this._writeBuffer=new k.WriteBuffer((w,L)=>this._inputHandler.parse(w,L)),this.register((0,c.forwardEvent)(this._writeBuffer.onWriteParsed,this._onWriteParsed))}get onBinary(){return this._onBinary.event}get onData(){return this._onData.event}get onLineFeed(){return this._onLineFeed.event}get onResize(){return this._onResize.event}get onWriteParsed(){return this._onWriteParsed.event}get onScroll(){return this._onScrollApi||(this._onScrollApi=new c.EventEmitter,this.register(this._onScroll.event(D=>{var w;(w=this._onScrollApi)===null||w===void 0||w.fire(D.position)}))),this._onScrollApi.event}get cols(){return this._bufferService.cols}get rows(){return this._bufferService.rows}get buffers(){return this._bufferService.buffers}get options(){return this.optionsService.options}set options(D){for(let w in D)this.optionsService.options[w]=D[w]}dispose(){var D;this._isDisposed||(super.dispose(),(D=this._windowsMode)===null||D===void 0||D.dispose(),this._windowsMode=void 0)}write(D,w){this._writeBuffer.write(D,w)}writeSync(D,w){this._logService.logLevel<=d.LogLevelEnum.WARN&&!E&&(this._logService.warn("writeSync is unreliable and will be removed soon."),E=!0),this._writeBuffer.writeSync(D,w)}resize(D,w){isNaN(D)||isNaN(w)||(D=Math.max(D,m.MINIMUM_COLS),w=Math.max(w,m.MINIMUM_ROWS),this._bufferService.resize(D,w))}scroll(D,w=!1){this._bufferService.scroll(D,w)}scrollLines(D,w,L){this._bufferService.scrollLines(D,w,L)}scrollPages(D){this._bufferService.scrollPages(D)}scrollToTop(){this._bufferService.scrollToTop()}scrollToBottom(){this._bufferService.scrollToBottom()}scrollToLine(D){this._bufferService.scrollToLine(D)}registerEscHandler(D,w){return this._inputHandler.registerEscHandler(D,w)}registerDcsHandler(D,w){return this._inputHandler.registerDcsHandler(D,w)}registerCsiHandler(D,w){return this._inputHandler.registerCsiHandler(D,w)}registerOscHandler(D,w){return this._inputHandler.registerOscHandler(D,w)}_setup(){this.optionsService.rawOptions.windowsMode&&this._enableWindowsMode()}reset(){this._inputHandler.reset(),this._bufferService.reset(),this._charsetService.reset(),this.coreService.reset(),this.coreMouseService.reset()}_updateOptions(D){var w;switch(D){case"scrollback":this.buffers.resize(this.cols,this.rows);break;case"windowsMode":this.optionsService.rawOptions.windowsMode?this._enableWindowsMode():((w=this._windowsMode)===null||w===void 0||w.dispose(),this._windowsMode=void 0)}}_enableWindowsMode(){if(!this._windowsMode){let D=[];D.push(this.onLineFeed(g.updateWindowsModeWrappedState.bind(null,this._bufferService))),D.push(this.registerCsiHandler({final:"H"},()=>((0,g.updateWindowsModeWrappedState)(this._bufferService),!1))),this._windowsMode={dispose:()=>{for(let w of D)w.dispose()}}}}}i.CoreTerminal=x},8460:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.forwardEvent=i.EventEmitter=void 0,i.EventEmitter=class{constructor(){this._listeners=[],this._disposed=!1}get event(){return this._event||(this._event=n=>(this._listeners.push(n),{dispose:()=>{if(!this._disposed){for(let a=0;a<this._listeners.length;a++)if(this._listeners[a]===n)return void this._listeners.splice(a,1)}}})),this._event}fire(n,a){let d=[];for(let _=0;_<this._listeners.length;_++)d.push(this._listeners[_]);for(let _=0;_<d.length;_++)d[_].call(void 0,n,a)}dispose(){this._listeners&&(this._listeners.length=0),this._disposed=!0}},i.forwardEvent=function(n,a){return n(d=>a.fire(d))}},5435:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.InputHandler=i.WindowsOptionsReportType=void 0;let a=n(2584),d=n(7116),_=n(2015),S=n(844),m=n(482),v=n(8437),p=n(8460),c=n(643),h=n(511),u=n(3734),l=n(2585),f=n(6242),g=n(6351),C=n(5941),k={"(":0,")":1,"*":2,"+":3,"-":1,".":2},y=131072;function E(D,w){if(D>24)return w.setWinLines||!1;switch(D){case 1:return!!w.restoreWin;case 2:return!!w.minimizeWin;case 3:return!!w.setWinPosition;case 4:return!!w.setWinSizePixels;case 5:return!!w.raiseWin;case 6:return!!w.lowerWin;case 7:return!!w.refreshWin;case 8:return!!w.setWinSizeChars;case 9:return!!w.maximizeWin;case 10:return!!w.fullscreenWin;case 11:return!!w.getWinState;case 13:return!!w.getWinPosition;case 14:return!!w.getWinSizePixels;case 15:return!!w.getScreenSizePixels;case 16:return!!w.getCellSizePixels;case 18:return!!w.getWinSizeChars;case 19:return!!w.getScreenSizeChars;case 20:return!!w.getIconTitle;case 21:return!!w.getWinTitle;case 22:return!!w.pushTitle;case 23:return!!w.popTitle;case 24:return!!w.setWinLines}return!1}var x;(function(D){D[D.GET_WIN_SIZE_PIXELS=0]="GET_WIN_SIZE_PIXELS",D[D.GET_CELL_SIZE_PIXELS=1]="GET_CELL_SIZE_PIXELS"})(x=i.WindowsOptionsReportType||(i.WindowsOptionsReportType={}));class B extends S.Disposable{constructor(w,L,R,A,M,j,q,V,W,K=new _.EscapeSequenceParser){super(),this._bufferService=w,this._charsetService=L,this._coreService=R,this._dirtyRowService=A,this._logService=M,this._optionsService=j,this._oscLinkService=q,this._coreMouseService=V,this._unicodeService=W,this._parser=K,this._parseBuffer=new Uint32Array(4096),this._stringDecoder=new m.StringToUtf32,this._utf8Decoder=new m.Utf8ToUtf32,this._workCell=new h.CellData,this._windowTitle="",this._iconName="",this._windowTitleStack=[],this._iconNameStack=[],this._curAttrData=v.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=v.DEFAULT_ATTR_DATA.clone(),this._onRequestBell=new p.EventEmitter,this._onRequestRefreshRows=new p.EventEmitter,this._onRequestReset=new p.EventEmitter,this._onRequestSendFocus=new p.EventEmitter,this._onRequestSyncScrollBar=new p.EventEmitter,this._onRequestWindowsOptionsReport=new p.EventEmitter,this._onA11yChar=new p.EventEmitter,this._onA11yTab=new p.EventEmitter,this._onCursorMove=new p.EventEmitter,this._onLineFeed=new p.EventEmitter,this._onScroll=new p.EventEmitter,this._onTitleChange=new p.EventEmitter,this._onColor=new p.EventEmitter,this._parseStack={paused:!1,cursorStartX:0,cursorStartY:0,decodedLength:0,position:0},this._specialColors=[256,257,258],this.register(this._parser),this._activeBuffer=this._bufferService.buffer,this.register(this._bufferService.buffers.onBufferActivate(b=>this._activeBuffer=b.activeBuffer)),this._parser.setCsiHandlerFallback((b,H)=>{this._logService.debug("Unknown CSI code: ",{identifier:this._parser.identToString(b),params:H.toArray()})}),this._parser.setEscHandlerFallback(b=>{this._logService.debug("Unknown ESC code: ",{identifier:this._parser.identToString(b)})}),this._parser.setExecuteHandlerFallback(b=>{this._logService.debug("Unknown EXECUTE code: ",{code:b})}),this._parser.setOscHandlerFallback((b,H,N)=>{this._logService.debug("Unknown OSC code: ",{identifier:b,action:H,data:N})}),this._parser.setDcsHandlerFallback((b,H,N)=>{H==="HOOK"&&(N=N.toArray()),this._logService.debug("Unknown DCS code: ",{identifier:this._parser.identToString(b),action:H,payload:N})}),this._parser.setPrintHandler((b,H,N)=>this.print(b,H,N)),this._parser.registerCsiHandler({final:"@"},b=>this.insertChars(b)),this._parser.registerCsiHandler({intermediates:" ",final:"@"},b=>this.scrollLeft(b)),this._parser.registerCsiHandler({final:"A"},b=>this.cursorUp(b)),this._parser.registerCsiHandler({intermediates:" ",final:"A"},b=>this.scrollRight(b)),this._parser.registerCsiHandler({final:"B"},b=>this.cursorDown(b)),this._parser.registerCsiHandler({final:"C"},b=>this.cursorForward(b)),this._parser.registerCsiHandler({final:"D"},b=>this.cursorBackward(b)),this._parser.registerCsiHandler({final:"E"},b=>this.cursorNextLine(b)),this._parser.registerCsiHandler({final:"F"},b=>this.cursorPrecedingLine(b)),this._parser.registerCsiHandler({final:"G"},b=>this.cursorCharAbsolute(b)),this._parser.registerCsiHandler({final:"H"},b=>this.cursorPosition(b)),this._parser.registerCsiHandler({final:"I"},b=>this.cursorForwardTab(b)),this._parser.registerCsiHandler({final:"J"},b=>this.eraseInDisplay(b,!1)),this._parser.registerCsiHandler({prefix:"?",final:"J"},b=>this.eraseInDisplay(b,!0)),this._parser.registerCsiHandler({final:"K"},b=>this.eraseInLine(b,!1)),this._parser.registerCsiHandler({prefix:"?",final:"K"},b=>this.eraseInLine(b,!0)),this._parser.registerCsiHandler({final:"L"},b=>this.insertLines(b)),this._parser.registerCsiHandler({final:"M"},b=>this.deleteLines(b)),this._parser.registerCsiHandler({final:"P"},b=>this.deleteChars(b)),this._parser.registerCsiHandler({final:"S"},b=>this.scrollUp(b)),this._parser.registerCsiHandler({final:"T"},b=>this.scrollDown(b)),this._parser.registerCsiHandler({final:"X"},b=>this.eraseChars(b)),this._parser.registerCsiHandler({final:"Z"},b=>this.cursorBackwardTab(b)),this._parser.registerCsiHandler({final:"`"},b=>this.charPosAbsolute(b)),this._parser.registerCsiHandler({final:"a"},b=>this.hPositionRelative(b)),this._parser.registerCsiHandler({final:"b"},b=>this.repeatPrecedingCharacter(b)),this._parser.registerCsiHandler({final:"c"},b=>this.sendDeviceAttributesPrimary(b)),this._parser.registerCsiHandler({prefix:">",final:"c"},b=>this.sendDeviceAttributesSecondary(b)),this._parser.registerCsiHandler({final:"d"},b=>this.linePosAbsolute(b)),this._parser.registerCsiHandler({final:"e"},b=>this.vPositionRelative(b)),this._parser.registerCsiHandler({final:"f"},b=>this.hVPosition(b)),this._parser.registerCsiHandler({final:"g"},b=>this.tabClear(b)),this._parser.registerCsiHandler({final:"h"},b=>this.setMode(b)),this._parser.registerCsiHandler({prefix:"?",final:"h"},b=>this.setModePrivate(b)),this._parser.registerCsiHandler({final:"l"},b=>this.resetMode(b)),this._parser.registerCsiHandler({prefix:"?",final:"l"},b=>this.resetModePrivate(b)),this._parser.registerCsiHandler({final:"m"},b=>this.charAttributes(b)),this._parser.registerCsiHandler({final:"n"},b=>this.deviceStatus(b)),this._parser.registerCsiHandler({prefix:"?",final:"n"},b=>this.deviceStatusPrivate(b)),this._parser.registerCsiHandler({intermediates:"!",final:"p"},b=>this.softReset(b)),this._parser.registerCsiHandler({intermediates:" ",final:"q"},b=>this.setCursorStyle(b)),this._parser.registerCsiHandler({final:"r"},b=>this.setScrollRegion(b)),this._parser.registerCsiHandler({final:"s"},b=>this.saveCursor(b)),this._parser.registerCsiHandler({final:"t"},b=>this.windowOptions(b)),this._parser.registerCsiHandler({final:"u"},b=>this.restoreCursor(b)),this._parser.registerCsiHandler({intermediates:"'",final:"}"},b=>this.insertColumns(b)),this._parser.registerCsiHandler({intermediates:"'",final:"~"},b=>this.deleteColumns(b)),this._parser.registerCsiHandler({intermediates:'"',final:"q"},b=>this.selectProtected(b)),this._parser.registerCsiHandler({intermediates:"$",final:"p"},b=>this.requestMode(b,!0)),this._parser.registerCsiHandler({prefix:"?",intermediates:"$",final:"p"},b=>this.requestMode(b,!1)),this._parser.setExecuteHandler(a.C0.BEL,()=>this.bell()),this._parser.setExecuteHandler(a.C0.LF,()=>this.lineFeed()),this._parser.setExecuteHandler(a.C0.VT,()=>this.lineFeed()),this._parser.setExecuteHandler(a.C0.FF,()=>this.lineFeed()),this._parser.setExecuteHandler(a.C0.CR,()=>this.carriageReturn()),this._parser.setExecuteHandler(a.C0.BS,()=>this.backspace()),this._parser.setExecuteHandler(a.C0.HT,()=>this.tab()),this._parser.setExecuteHandler(a.C0.SO,()=>this.shiftOut()),this._parser.setExecuteHandler(a.C0.SI,()=>this.shiftIn()),this._parser.setExecuteHandler(a.C1.IND,()=>this.index()),this._parser.setExecuteHandler(a.C1.NEL,()=>this.nextLine()),this._parser.setExecuteHandler(a.C1.HTS,()=>this.tabSet()),this._parser.registerOscHandler(0,new f.OscHandler(b=>(this.setTitle(b),this.setIconName(b),!0))),this._parser.registerOscHandler(1,new f.OscHandler(b=>this.setIconName(b))),this._parser.registerOscHandler(2,new f.OscHandler(b=>this.setTitle(b))),this._parser.registerOscHandler(4,new f.OscHandler(b=>this.setOrReportIndexedColor(b))),this._parser.registerOscHandler(8,new f.OscHandler(b=>this.setHyperlink(b))),this._parser.registerOscHandler(10,new f.OscHandler(b=>this.setOrReportFgColor(b))),this._parser.registerOscHandler(11,new f.OscHandler(b=>this.setOrReportBgColor(b))),this._parser.registerOscHandler(12,new f.OscHandler(b=>this.setOrReportCursorColor(b))),this._parser.registerOscHandler(104,new f.OscHandler(b=>this.restoreIndexedColor(b))),this._parser.registerOscHandler(110,new f.OscHandler(b=>this.restoreFgColor(b))),this._parser.registerOscHandler(111,new f.OscHandler(b=>this.restoreBgColor(b))),this._parser.registerOscHandler(112,new f.OscHandler(b=>this.restoreCursorColor(b))),this._parser.registerEscHandler({final:"7"},()=>this.saveCursor()),this._parser.registerEscHandler({final:"8"},()=>this.restoreCursor()),this._parser.registerEscHandler({final:"D"},()=>this.index()),this._parser.registerEscHandler({final:"E"},()=>this.nextLine()),this._parser.registerEscHandler({final:"H"},()=>this.tabSet()),this._parser.registerEscHandler({final:"M"},()=>this.reverseIndex()),this._parser.registerEscHandler({final:"="},()=>this.keypadApplicationMode()),this._parser.registerEscHandler({final:">"},()=>this.keypadNumericMode()),this._parser.registerEscHandler({final:"c"},()=>this.fullReset()),this._parser.registerEscHandler({final:"n"},()=>this.setgLevel(2)),this._parser.registerEscHandler({final:"o"},()=>this.setgLevel(3)),this._parser.registerEscHandler({final:"|"},()=>this.setgLevel(3)),this._parser.registerEscHandler({final:"}"},()=>this.setgLevel(2)),this._parser.registerEscHandler({final:"~"},()=>this.setgLevel(1)),this._parser.registerEscHandler({intermediates:"%",final:"@"},()=>this.selectDefaultCharset()),this._parser.registerEscHandler({intermediates:"%",final:"G"},()=>this.selectDefaultCharset());for(let b in d.CHARSETS)this._parser.registerEscHandler({intermediates:"(",final:b},()=>this.selectCharset("("+b)),this._parser.registerEscHandler({intermediates:")",final:b},()=>this.selectCharset(")"+b)),this._parser.registerEscHandler({intermediates:"*",final:b},()=>this.selectCharset("*"+b)),this._parser.registerEscHandler({intermediates:"+",final:b},()=>this.selectCharset("+"+b)),this._parser.registerEscHandler({intermediates:"-",final:b},()=>this.selectCharset("-"+b)),this._parser.registerEscHandler({intermediates:".",final:b},()=>this.selectCharset("."+b)),this._parser.registerEscHandler({intermediates:"/",final:b},()=>this.selectCharset("/"+b));this._parser.registerEscHandler({intermediates:"#",final:"8"},()=>this.screenAlignmentPattern()),this._parser.setErrorHandler(b=>(this._logService.error("Parsing error: ",b),b)),this._parser.registerDcsHandler({intermediates:"$",final:"q"},new g.DcsHandler((b,H)=>this.requestStatusString(b,H)))}getAttrData(){return this._curAttrData}get onRequestBell(){return this._onRequestBell.event}get onRequestRefreshRows(){return this._onRequestRefreshRows.event}get onRequestReset(){return this._onRequestReset.event}get onRequestSendFocus(){return this._onRequestSendFocus.event}get onRequestSyncScrollBar(){return this._onRequestSyncScrollBar.event}get onRequestWindowsOptionsReport(){return this._onRequestWindowsOptionsReport.event}get onA11yChar(){return this._onA11yChar.event}get onA11yTab(){return this._onA11yTab.event}get onCursorMove(){return this._onCursorMove.event}get onLineFeed(){return this._onLineFeed.event}get onScroll(){return this._onScroll.event}get onTitleChange(){return this._onTitleChange.event}get onColor(){return this._onColor.event}dispose(){super.dispose()}_preserveStack(w,L,R,A){this._parseStack.paused=!0,this._parseStack.cursorStartX=w,this._parseStack.cursorStartY=L,this._parseStack.decodedLength=R,this._parseStack.position=A}_logSlowResolvingAsync(w){this._logService.logLevel<=l.LogLevelEnum.WARN&&Promise.race([w,new Promise((L,R)=>setTimeout(()=>R("#SLOW_TIMEOUT"),5e3))]).catch(L=>{if(L!=="#SLOW_TIMEOUT")throw L;console.warn("async parser handler taking longer than 5000 ms")})}parse(w,L){let R,A=this._activeBuffer.x,M=this._activeBuffer.y,j=0,q=this._parseStack.paused;if(q){if(R=this._parser.parse(this._parseBuffer,this._parseStack.decodedLength,L))return this._logSlowResolvingAsync(R),R;A=this._parseStack.cursorStartX,M=this._parseStack.cursorStartY,this._parseStack.paused=!1,w.length>y&&(j=this._parseStack.position+y)}if(this._logService.logLevel<=l.LogLevelEnum.DEBUG&&this._logService.debug("parsing data"+(typeof w=="string"?` "${w}"`:` "${Array.prototype.map.call(w,V=>String.fromCharCode(V)).join("")}"`),typeof w=="string"?w.split("").map(V=>V.charCodeAt(0)):w),this._parseBuffer.length<w.length&&this._parseBuffer.length<y&&(this._parseBuffer=new Uint32Array(Math.min(w.length,y))),q||this._dirtyRowService.clearRange(),w.length>y)for(let V=j;V<w.length;V+=y){let W=V+y<w.length?V+y:w.length,K=typeof w=="string"?this._stringDecoder.decode(w.substring(V,W),this._parseBuffer):this._utf8Decoder.decode(w.subarray(V,W),this._parseBuffer);if(R=this._parser.parse(this._parseBuffer,K))return this._preserveStack(A,M,K,V),this._logSlowResolvingAsync(R),R}else if(!q){let V=typeof w=="string"?this._stringDecoder.decode(w,this._parseBuffer):this._utf8Decoder.decode(w,this._parseBuffer);if(R=this._parser.parse(this._parseBuffer,V))return this._preserveStack(A,M,V,0),this._logSlowResolvingAsync(R),R}this._activeBuffer.x===A&&this._activeBuffer.y===M||this._onCursorMove.fire(),this._onRequestRefreshRows.fire(this._dirtyRowService.start,this._dirtyRowService.end)}print(w,L,R){let A,M,j=this._charsetService.charset,q=this._optionsService.rawOptions.screenReaderMode,V=this._bufferService.cols,W=this._coreService.decPrivateModes.wraparound,K=this._coreService.modes.insertMode,b=this._curAttrData,H=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);this._dirtyRowService.markDirty(this._activeBuffer.y),this._activeBuffer.x&&R-L>0&&H.getWidth(this._activeBuffer.x-1)===2&&H.setCellFromCodePoint(this._activeBuffer.x-1,0,1,b.fg,b.bg,b.extended);for(let N=L;N<R;++N){if(A=w[N],M=this._unicodeService.wcwidth(A),A<127&&j){let T=j[String.fromCharCode(A)];T&&(A=T.charCodeAt(0))}if(q&&this._onA11yChar.fire((0,m.stringFromCodePoint)(A)),this._currentLinkId!==void 0&&this._oscLinkService.addLineToLink(this._currentLinkId,this._activeBuffer.ybase+this._activeBuffer.y),M||!this._activeBuffer.x){if(this._activeBuffer.x+M-1>=V){if(W){for(;this._activeBuffer.x<V;)H.setCellFromCodePoint(this._activeBuffer.x++,0,1,b.fg,b.bg,b.extended);this._activeBuffer.x=0,this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData(),!0)):(this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!0),H=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y)}else if(this._activeBuffer.x=V-1,M===2)continue}if(K&&(H.insertCells(this._activeBuffer.x,M,this._activeBuffer.getNullCell(b),b),H.getWidth(V-1)===2&&H.setCellFromCodePoint(V-1,c.NULL_CELL_CODE,c.NULL_CELL_WIDTH,b.fg,b.bg,b.extended)),H.setCellFromCodePoint(this._activeBuffer.x++,A,M,b.fg,b.bg,b.extended),M>0)for(;--M;)H.setCellFromCodePoint(this._activeBuffer.x++,0,0,b.fg,b.bg,b.extended)}else H.getWidth(this._activeBuffer.x-1)?H.addCodepointToCell(this._activeBuffer.x-1,A):H.addCodepointToCell(this._activeBuffer.x-2,A)}R-L>0&&(H.loadCell(this._activeBuffer.x-1,this._workCell),this._workCell.getWidth()===2||this._workCell.getCode()>65535?this._parser.precedingCodepoint=0:this._workCell.isCombined()?this._parser.precedingCodepoint=this._workCell.getChars().charCodeAt(0):this._parser.precedingCodepoint=this._workCell.content),this._activeBuffer.x<V&&R-L>0&&H.getWidth(this._activeBuffer.x)===0&&!H.hasContent(this._activeBuffer.x)&&H.setCellFromCodePoint(this._activeBuffer.x,0,1,b.fg,b.bg,b.extended),this._dirtyRowService.markDirty(this._activeBuffer.y)}registerCsiHandler(w,L){return w.final!=="t"||w.prefix||w.intermediates?this._parser.registerCsiHandler(w,L):this._parser.registerCsiHandler(w,R=>!E(R.params[0],this._optionsService.rawOptions.windowOptions)||L(R))}registerDcsHandler(w,L){return this._parser.registerDcsHandler(w,new g.DcsHandler(L))}registerEscHandler(w,L){return this._parser.registerEscHandler(w,L)}registerOscHandler(w,L){return this._parser.registerOscHandler(w,new f.OscHandler(L))}bell(){return this._onRequestBell.fire(),!0}lineFeed(){return this._dirtyRowService.markDirty(this._activeBuffer.y),this._optionsService.rawOptions.convertEol&&(this._activeBuffer.x=0),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.x>=this._bufferService.cols&&this._activeBuffer.x--,this._dirtyRowService.markDirty(this._activeBuffer.y),this._onLineFeed.fire(),!0}carriageReturn(){return this._activeBuffer.x=0,!0}backspace(){var w;if(!this._coreService.decPrivateModes.reverseWraparound)return this._restrictCursor(),this._activeBuffer.x>0&&this._activeBuffer.x--,!0;if(this._restrictCursor(this._bufferService.cols),this._activeBuffer.x>0)this._activeBuffer.x--;else if(this._activeBuffer.x===0&&this._activeBuffer.y>this._activeBuffer.scrollTop&&this._activeBuffer.y<=this._activeBuffer.scrollBottom&&((w=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y))===null||w===void 0?void 0:w.isWrapped)){this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!1,this._activeBuffer.y--,this._activeBuffer.x=this._bufferService.cols-1;let L=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);L.hasWidth(this._activeBuffer.x)&&!L.hasContent(this._activeBuffer.x)&&this._activeBuffer.x--}return this._restrictCursor(),!0}tab(){if(this._activeBuffer.x>=this._bufferService.cols)return!0;let w=this._activeBuffer.x;return this._activeBuffer.x=this._activeBuffer.nextStop(),this._optionsService.rawOptions.screenReaderMode&&this._onA11yTab.fire(this._activeBuffer.x-w),!0}shiftOut(){return this._charsetService.setgLevel(1),!0}shiftIn(){return this._charsetService.setgLevel(0),!0}_restrictCursor(w=this._bufferService.cols-1){this._activeBuffer.x=Math.min(w,Math.max(0,this._activeBuffer.x)),this._activeBuffer.y=this._coreService.decPrivateModes.origin?Math.min(this._activeBuffer.scrollBottom,Math.max(this._activeBuffer.scrollTop,this._activeBuffer.y)):Math.min(this._bufferService.rows-1,Math.max(0,this._activeBuffer.y)),this._dirtyRowService.markDirty(this._activeBuffer.y)}_setCursor(w,L){this._dirtyRowService.markDirty(this._activeBuffer.y),this._coreService.decPrivateModes.origin?(this._activeBuffer.x=w,this._activeBuffer.y=this._activeBuffer.scrollTop+L):(this._activeBuffer.x=w,this._activeBuffer.y=L),this._restrictCursor(),this._dirtyRowService.markDirty(this._activeBuffer.y)}_moveCursor(w,L){this._restrictCursor(),this._setCursor(this._activeBuffer.x+w,this._activeBuffer.y+L)}cursorUp(w){let L=this._activeBuffer.y-this._activeBuffer.scrollTop;return L>=0?this._moveCursor(0,-Math.min(L,w.params[0]||1)):this._moveCursor(0,-(w.params[0]||1)),!0}cursorDown(w){let L=this._activeBuffer.scrollBottom-this._activeBuffer.y;return L>=0?this._moveCursor(0,Math.min(L,w.params[0]||1)):this._moveCursor(0,w.params[0]||1),!0}cursorForward(w){return this._moveCursor(w.params[0]||1,0),!0}cursorBackward(w){return this._moveCursor(-(w.params[0]||1),0),!0}cursorNextLine(w){return this.cursorDown(w),this._activeBuffer.x=0,!0}cursorPrecedingLine(w){return this.cursorUp(w),this._activeBuffer.x=0,!0}cursorCharAbsolute(w){return this._setCursor((w.params[0]||1)-1,this._activeBuffer.y),!0}cursorPosition(w){return this._setCursor(w.length>=2?(w.params[1]||1)-1:0,(w.params[0]||1)-1),!0}charPosAbsolute(w){return this._setCursor((w.params[0]||1)-1,this._activeBuffer.y),!0}hPositionRelative(w){return this._moveCursor(w.params[0]||1,0),!0}linePosAbsolute(w){return this._setCursor(this._activeBuffer.x,(w.params[0]||1)-1),!0}vPositionRelative(w){return this._moveCursor(0,w.params[0]||1),!0}hVPosition(w){return this.cursorPosition(w),!0}tabClear(w){let L=w.params[0];return L===0?delete this._activeBuffer.tabs[this._activeBuffer.x]:L===3&&(this._activeBuffer.tabs={}),!0}cursorForwardTab(w){if(this._activeBuffer.x>=this._bufferService.cols)return!0;let L=w.params[0]||1;for(;L--;)this._activeBuffer.x=this._activeBuffer.nextStop();return!0}cursorBackwardTab(w){if(this._activeBuffer.x>=this._bufferService.cols)return!0;let L=w.params[0]||1;for(;L--;)this._activeBuffer.x=this._activeBuffer.prevStop();return!0}selectProtected(w){let L=w.params[0];return L===1&&(this._curAttrData.bg|=536870912),L!==2&&L!==0||(this._curAttrData.bg&=-536870913),!0}_eraseInBufferLine(w,L,R,A=!1,M=!1){let j=this._activeBuffer.lines.get(this._activeBuffer.ybase+w);j.replaceCells(L,R,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData(),M),A&&(j.isWrapped=!1)}_resetBufferLine(w,L=!1){let R=this._activeBuffer.lines.get(this._activeBuffer.ybase+w);R.fill(this._activeBuffer.getNullCell(this._eraseAttrData()),L),this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase+w),R.isWrapped=!1}eraseInDisplay(w,L=!1){let R;switch(this._restrictCursor(this._bufferService.cols),w.params[0]){case 0:for(R=this._activeBuffer.y,this._dirtyRowService.markDirty(R),this._eraseInBufferLine(R++,this._activeBuffer.x,this._bufferService.cols,this._activeBuffer.x===0,L);R<this._bufferService.rows;R++)this._resetBufferLine(R,L);this._dirtyRowService.markDirty(R);break;case 1:for(R=this._activeBuffer.y,this._dirtyRowService.markDirty(R),this._eraseInBufferLine(R,0,this._activeBuffer.x+1,!0,L),this._activeBuffer.x+1>=this._bufferService.cols&&(this._activeBuffer.lines.get(R+1).isWrapped=!1);R--;)this._resetBufferLine(R,L);this._dirtyRowService.markDirty(0);break;case 2:for(R=this._bufferService.rows,this._dirtyRowService.markDirty(R-1);R--;)this._resetBufferLine(R,L);this._dirtyRowService.markDirty(0);break;case 3:let A=this._activeBuffer.lines.length-this._bufferService.rows;A>0&&(this._activeBuffer.lines.trimStart(A),this._activeBuffer.ybase=Math.max(this._activeBuffer.ybase-A,0),this._activeBuffer.ydisp=Math.max(this._activeBuffer.ydisp-A,0),this._onScroll.fire(0))}return!0}eraseInLine(w,L=!1){switch(this._restrictCursor(this._bufferService.cols),w.params[0]){case 0:this._eraseInBufferLine(this._activeBuffer.y,this._activeBuffer.x,this._bufferService.cols,this._activeBuffer.x===0,L);break;case 1:this._eraseInBufferLine(this._activeBuffer.y,0,this._activeBuffer.x+1,!1,L);break;case 2:this._eraseInBufferLine(this._activeBuffer.y,0,this._bufferService.cols,!0,L)}return this._dirtyRowService.markDirty(this._activeBuffer.y),!0}insertLines(w){this._restrictCursor();let L=w.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;let R=this._activeBuffer.ybase+this._activeBuffer.y,A=this._bufferService.rows-1-this._activeBuffer.scrollBottom,M=this._bufferService.rows-1+this._activeBuffer.ybase-A+1;for(;L--;)this._activeBuffer.lines.splice(M-1,1),this._activeBuffer.lines.splice(R,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0}deleteLines(w){this._restrictCursor();let L=w.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;let R=this._activeBuffer.ybase+this._activeBuffer.y,A;for(A=this._bufferService.rows-1-this._activeBuffer.scrollBottom,A=this._bufferService.rows-1+this._activeBuffer.ybase-A;L--;)this._activeBuffer.lines.splice(R,1),this._activeBuffer.lines.splice(A,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0}insertChars(w){this._restrictCursor();let L=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return L&&(L.insertCells(this._activeBuffer.x,w.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0}deleteChars(w){this._restrictCursor();let L=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return L&&(L.deleteCells(this._activeBuffer.x,w.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0}scrollUp(w){let L=w.params[0]||1;for(;L--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollDown(w){let L=w.params[0]||1;for(;L--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,0,this._activeBuffer.getBlankLine(v.DEFAULT_ATTR_DATA));return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollLeft(w){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;let L=w.params[0]||1;for(let R=this._activeBuffer.scrollTop;R<=this._activeBuffer.scrollBottom;++R){let A=this._activeBuffer.lines.get(this._activeBuffer.ybase+R);A.deleteCells(0,L,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),A.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollRight(w){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;let L=w.params[0]||1;for(let R=this._activeBuffer.scrollTop;R<=this._activeBuffer.scrollBottom;++R){let A=this._activeBuffer.lines.get(this._activeBuffer.ybase+R);A.insertCells(0,L,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),A.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}insertColumns(w){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;let L=w.params[0]||1;for(let R=this._activeBuffer.scrollTop;R<=this._activeBuffer.scrollBottom;++R){let A=this._activeBuffer.lines.get(this._activeBuffer.ybase+R);A.insertCells(this._activeBuffer.x,L,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),A.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}deleteColumns(w){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;let L=w.params[0]||1;for(let R=this._activeBuffer.scrollTop;R<=this._activeBuffer.scrollBottom;++R){let A=this._activeBuffer.lines.get(this._activeBuffer.ybase+R);A.deleteCells(this._activeBuffer.x,L,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),A.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}eraseChars(w){this._restrictCursor();let L=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return L&&(L.replaceCells(this._activeBuffer.x,this._activeBuffer.x+(w.params[0]||1),this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0}repeatPrecedingCharacter(w){if(!this._parser.precedingCodepoint)return!0;let L=w.params[0]||1,R=new Uint32Array(L);for(let A=0;A<L;++A)R[A]=this._parser.precedingCodepoint;return this.print(R,0,R.length),!0}sendDeviceAttributesPrimary(w){return w.params[0]>0||(this._is("xterm")||this._is("rxvt-unicode")||this._is("screen")?this._coreService.triggerDataEvent(a.C0.ESC+"[?1;2c"):this._is("linux")&&this._coreService.triggerDataEvent(a.C0.ESC+"[?6c")),!0}sendDeviceAttributesSecondary(w){return w.params[0]>0||(this._is("xterm")?this._coreService.triggerDataEvent(a.C0.ESC+"[>0;276;0c"):this._is("rxvt-unicode")?this._coreService.triggerDataEvent(a.C0.ESC+"[>85;95;0c"):this._is("linux")?this._coreService.triggerDataEvent(w.params[0]+"c"):this._is("screen")&&this._coreService.triggerDataEvent(a.C0.ESC+"[>83;40003;0c")),!0}_is(w){return(this._optionsService.rawOptions.termName+"").indexOf(w)===0}setMode(w){for(let L=0;L<w.length;L++)switch(w.params[L]){case 4:this._coreService.modes.insertMode=!0;break;case 20:this._optionsService.options.convertEol=!0}return!0}setModePrivate(w){for(let L=0;L<w.length;L++)switch(w.params[L]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!0;break;case 2:this._charsetService.setgCharset(0,d.DEFAULT_CHARSET),this._charsetService.setgCharset(1,d.DEFAULT_CHARSET),this._charsetService.setgCharset(2,d.DEFAULT_CHARSET),this._charsetService.setgCharset(3,d.DEFAULT_CHARSET);break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(132,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!0,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!0;break;case 12:this._optionsService.options.cursorBlink=!0;break;case 45:this._coreService.decPrivateModes.reverseWraparound=!0;break;case 66:this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire();break;case 9:this._coreMouseService.activeProtocol="X10";break;case 1e3:this._coreMouseService.activeProtocol="VT200";break;case 1002:this._coreMouseService.activeProtocol="DRAG";break;case 1003:this._coreMouseService.activeProtocol="ANY";break;case 1004:this._coreService.decPrivateModes.sendFocus=!0,this._onRequestSendFocus.fire();break;case 1005:this._logService.debug("DECSET 1005 not supported (see #2507)");break;case 1006:this._coreMouseService.activeEncoding="SGR";break;case 1015:this._logService.debug("DECSET 1015 not supported (see #2507)");break;case 1016:this._coreMouseService.activeEncoding="SGR_PIXELS";break;case 25:this._coreService.isCursorHidden=!1;break;case 1048:this.saveCursor();break;case 1049:this.saveCursor();case 47:case 1047:this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!0}return!0}resetMode(w){for(let L=0;L<w.length;L++)switch(w.params[L]){case 4:this._coreService.modes.insertMode=!1;break;case 20:this._optionsService.options.convertEol=!1}return!0}resetModePrivate(w){for(let L=0;L<w.length;L++)switch(w.params[L]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!1;break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(80,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!1,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!1;break;case 12:this._optionsService.options.cursorBlink=!1;break;case 45:this._coreService.decPrivateModes.reverseWraparound=!1;break;case 66:this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire();break;case 9:case 1e3:case 1002:case 1003:this._coreMouseService.activeProtocol="NONE";break;case 1004:this._coreService.decPrivateModes.sendFocus=!1;break;case 1005:this._logService.debug("DECRST 1005 not supported (see #2507)");break;case 1006:case 1016:this._coreMouseService.activeEncoding="DEFAULT";break;case 1015:this._logService.debug("DECRST 1015 not supported (see #2507)");break;case 25:this._coreService.isCursorHidden=!0;break;case 1048:this.restoreCursor();break;case 1049:case 47:case 1047:this._bufferService.buffers.activateNormalBuffer(),w.params[L]===1049&&this.restoreCursor(),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!1}return!0}requestMode(w,L){let R=this._coreService.decPrivateModes,{activeProtocol:A,activeEncoding:M}=this._coreMouseService,j=this._coreService,{buffers:q,cols:V}=this._bufferService,{active:W,alt:K}=q,b=this._optionsService.rawOptions,H=I=>I?1:2,N=w.params[0];return T=N,P=L?N===2?3:N===4?H(j.modes.insertMode):N===12?4:N===20?H(b.convertEol):0:N===1?H(R.applicationCursorKeys):N===3?b.windowOptions.setWinLines?V===80?2:V===132?1:0:0:N===6?H(R.origin):N===7?H(R.wraparound):N===8?3:N===9?H(A==="X10"):N===12?H(b.cursorBlink):N===25?H(!j.isCursorHidden):N===45?H(R.reverseWraparound):N===66?H(R.applicationKeypad):N===1e3?H(A==="VT200"):N===1002?H(A==="DRAG"):N===1003?H(A==="ANY"):N===1004?H(R.sendFocus):N===1005?4:N===1006?H(M==="SGR"):N===1015?4:N===1016?H(M==="SGR_PIXELS"):N===1048?1:N===47||N===1047||N===1049?H(W===K):N===2004?H(R.bracketedPasteMode):0,j.triggerDataEvent(`${a.C0.ESC}[${L?"":"?"}${T};${P}$y`),!0;var T,P}_updateAttrColor(w,L,R,A,M){return L===2?(w|=50331648,w&=-16777216,w|=u.AttributeData.fromColorRGB([R,A,M])):L===5&&(w&=-50331904,w|=33554432|255&R),w}_extractColor(w,L,R){let A=[0,0,-1,0,0,0],M=0,j=0;do{if(A[j+M]=w.params[L+j],w.hasSubParams(L+j)){let q=w.getSubParams(L+j),V=0;do A[1]===5&&(M=1),A[j+V+1+M]=q[V];while(++V<q.length&&V+j+1+M<A.length);break}if(A[1]===5&&j+M>=2||A[1]===2&&j+M>=5)break;A[1]&&(M=1)}while(++j+L<w.length&&j+M<A.length);for(let q=2;q<A.length;++q)A[q]===-1&&(A[q]=0);switch(A[0]){case 38:R.fg=this._updateAttrColor(R.fg,A[1],A[3],A[4],A[5]);break;case 48:R.bg=this._updateAttrColor(R.bg,A[1],A[3],A[4],A[5]);break;case 58:R.extended=R.extended.clone(),R.extended.underlineColor=this._updateAttrColor(R.extended.underlineColor,A[1],A[3],A[4],A[5])}return j}_processUnderline(w,L){L.extended=L.extended.clone(),(!~w||w>5)&&(w=1),L.extended.underlineStyle=w,L.fg|=268435456,w===0&&(L.fg&=-268435457),L.updateExtended()}charAttributes(w){if(w.length===1&&w.params[0]===0)return this._curAttrData.fg=v.DEFAULT_ATTR_DATA.fg,this._curAttrData.bg=v.DEFAULT_ATTR_DATA.bg,!0;let L=w.length,R,A=this._curAttrData;for(let M=0;M<L;M++)R=w.params[M],R>=30&&R<=37?(A.fg&=-50331904,A.fg|=16777216|R-30):R>=40&&R<=47?(A.bg&=-50331904,A.bg|=16777216|R-40):R>=90&&R<=97?(A.fg&=-50331904,A.fg|=16777224|R-90):R>=100&&R<=107?(A.bg&=-50331904,A.bg|=16777224|R-100):R===0?(A.fg=v.DEFAULT_ATTR_DATA.fg,A.bg=v.DEFAULT_ATTR_DATA.bg):R===1?A.fg|=134217728:R===3?A.bg|=67108864:R===4?(A.fg|=268435456,this._processUnderline(w.hasSubParams(M)?w.getSubParams(M)[0]:1,A)):R===5?A.fg|=536870912:R===7?A.fg|=67108864:R===8?A.fg|=1073741824:R===9?A.fg|=2147483648:R===2?A.bg|=134217728:R===21?this._processUnderline(2,A):R===22?(A.fg&=-134217729,A.bg&=-134217729):R===23?A.bg&=-67108865:R===24?(A.fg&=-268435457,this._processUnderline(0,A)):R===25?A.fg&=-536870913:R===27?A.fg&=-67108865:R===28?A.fg&=-1073741825:R===29?A.fg&=2147483647:R===39?(A.fg&=-67108864,A.fg|=16777215&v.DEFAULT_ATTR_DATA.fg):R===49?(A.bg&=-67108864,A.bg|=16777215&v.DEFAULT_ATTR_DATA.bg):R===38||R===48||R===58?M+=this._extractColor(w,M,A):R===59?(A.extended=A.extended.clone(),A.extended.underlineColor=-1,A.updateExtended()):R===100?(A.fg&=-67108864,A.fg|=16777215&v.DEFAULT_ATTR_DATA.fg,A.bg&=-67108864,A.bg|=16777215&v.DEFAULT_ATTR_DATA.bg):this._logService.debug("Unknown SGR attribute: %d.",R);return!0}deviceStatus(w){switch(w.params[0]){case 5:this._coreService.triggerDataEvent(`${a.C0.ESC}[0n`);break;case 6:let L=this._activeBuffer.y+1,R=this._activeBuffer.x+1;this._coreService.triggerDataEvent(`${a.C0.ESC}[${L};${R}R`)}return!0}deviceStatusPrivate(w){if(w.params[0]===6){let L=this._activeBuffer.y+1,R=this._activeBuffer.x+1;this._coreService.triggerDataEvent(`${a.C0.ESC}[?${L};${R}R`)}return!0}softReset(w){return this._coreService.isCursorHidden=!1,this._onRequestSyncScrollBar.fire(),this._activeBuffer.scrollTop=0,this._activeBuffer.scrollBottom=this._bufferService.rows-1,this._curAttrData=v.DEFAULT_ATTR_DATA.clone(),this._coreService.reset(),this._charsetService.reset(),this._activeBuffer.savedX=0,this._activeBuffer.savedY=this._activeBuffer.ybase,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,this._coreService.decPrivateModes.origin=!1,!0}setCursorStyle(w){let L=w.params[0]||1;switch(L){case 1:case 2:this._optionsService.options.cursorStyle="block";break;case 3:case 4:this._optionsService.options.cursorStyle="underline";break;case 5:case 6:this._optionsService.options.cursorStyle="bar"}let R=L%2==1;return this._optionsService.options.cursorBlink=R,!0}setScrollRegion(w){let L=w.params[0]||1,R;return(w.length<2||(R=w.params[1])>this._bufferService.rows||R===0)&&(R=this._bufferService.rows),R>L&&(this._activeBuffer.scrollTop=L-1,this._activeBuffer.scrollBottom=R-1,this._setCursor(0,0)),!0}windowOptions(w){if(!E(w.params[0],this._optionsService.rawOptions.windowOptions))return!0;let L=w.length>1?w.params[1]:0;switch(w.params[0]){case 14:L!==2&&this._onRequestWindowsOptionsReport.fire(x.GET_WIN_SIZE_PIXELS);break;case 16:this._onRequestWindowsOptionsReport.fire(x.GET_CELL_SIZE_PIXELS);break;case 18:this._bufferService&&this._coreService.triggerDataEvent(`${a.C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);break;case 22:L!==0&&L!==2||(this._windowTitleStack.push(this._windowTitle),this._windowTitleStack.length>10&&this._windowTitleStack.shift()),L!==0&&L!==1||(this._iconNameStack.push(this._iconName),this._iconNameStack.length>10&&this._iconNameStack.shift());break;case 23:L!==0&&L!==2||this._windowTitleStack.length&&this.setTitle(this._windowTitleStack.pop()),L!==0&&L!==1||this._iconNameStack.length&&this.setIconName(this._iconNameStack.pop())}return!0}saveCursor(w){return this._activeBuffer.savedX=this._activeBuffer.x,this._activeBuffer.savedY=this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,!0}restoreCursor(w){return this._activeBuffer.x=this._activeBuffer.savedX||0,this._activeBuffer.y=Math.max(this._activeBuffer.savedY-this._activeBuffer.ybase,0),this._curAttrData.fg=this._activeBuffer.savedCurAttrData.fg,this._curAttrData.bg=this._activeBuffer.savedCurAttrData.bg,this._charsetService.charset=this._savedCharset,this._activeBuffer.savedCharset&&(this._charsetService.charset=this._activeBuffer.savedCharset),this._restrictCursor(),!0}setTitle(w){return this._windowTitle=w,this._onTitleChange.fire(w),!0}setIconName(w){return this._iconName=w,!0}setOrReportIndexedColor(w){let L=[],R=w.split(";");for(;R.length>1;){let A=R.shift(),M=R.shift();if(/^\d+$/.exec(A)){let j=parseInt(A);if(0<=j&&j<256)if(M==="?")L.push({type:0,index:j});else{let q=(0,C.parseColor)(M);q&&L.push({type:1,index:j,color:q})}}}return L.length&&this._onColor.fire(L),!0}setHyperlink(w){let L=w.split(";");return!(L.length<2)&&(L[1]?this._createHyperlink(L[0],L[1]):!L[0]&&this._finishHyperlink())}_createHyperlink(w,L){this._currentLinkId!==void 0&&this._finishHyperlink();let R=w.split(":"),A,M=R.findIndex(j=>j.startsWith("id="));return M!==-1&&(A=R[M].slice(3)||void 0),this._curAttrData.extended=this._curAttrData.extended.clone(),this._currentLinkId=this._oscLinkService.registerLink({id:A,uri:L}),this._curAttrData.extended.urlId=this._currentLinkId,this._curAttrData.updateExtended(),!0}_finishHyperlink(){return this._curAttrData.extended=this._curAttrData.extended.clone(),this._curAttrData.extended.urlId=0,this._curAttrData.updateExtended(),this._currentLinkId=void 0,!0}_setOrReportSpecialColor(w,L){let R=w.split(";");for(let A=0;A<R.length&&!(L>=this._specialColors.length);++A,++L)if(R[A]==="?")this._onColor.fire([{type:0,index:this._specialColors[L]}]);else{let M=(0,C.parseColor)(R[A]);M&&this._onColor.fire([{type:1,index:this._specialColors[L],color:M}])}return!0}setOrReportFgColor(w){return this._setOrReportSpecialColor(w,0)}setOrReportBgColor(w){return this._setOrReportSpecialColor(w,1)}setOrReportCursorColor(w){return this._setOrReportSpecialColor(w,2)}restoreIndexedColor(w){if(!w)return this._onColor.fire([{type:2}]),!0;let L=[],R=w.split(";");for(let A=0;A<R.length;++A)if(/^\d+$/.exec(R[A])){let M=parseInt(R[A]);0<=M&&M<256&&L.push({type:2,index:M})}return L.length&&this._onColor.fire(L),!0}restoreFgColor(w){return this._onColor.fire([{type:2,index:256}]),!0}restoreBgColor(w){return this._onColor.fire([{type:2,index:257}]),!0}restoreCursorColor(w){return this._onColor.fire([{type:2,index:258}]),!0}nextLine(){return this._activeBuffer.x=0,this.index(),!0}keypadApplicationMode(){return this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire(),!0}keypadNumericMode(){return this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire(),!0}selectDefaultCharset(){return this._charsetService.setgLevel(0),this._charsetService.setgCharset(0,d.DEFAULT_CHARSET),!0}selectCharset(w){return w.length!==2?(this.selectDefaultCharset(),!0):(w[0]==="/"||this._charsetService.setgCharset(k[w[0]],d.CHARSETS[w[1]]||d.DEFAULT_CHARSET),!0)}index(){return this._restrictCursor(),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._restrictCursor(),!0}tabSet(){return this._activeBuffer.tabs[this._activeBuffer.x]=!0,!0}reverseIndex(){if(this._restrictCursor(),this._activeBuffer.y===this._activeBuffer.scrollTop){let w=this._activeBuffer.scrollBottom-this._activeBuffer.scrollTop;this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase+this._activeBuffer.y,w,1),this._activeBuffer.lines.set(this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.getBlankLine(this._eraseAttrData())),this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom)}else this._activeBuffer.y--,this._restrictCursor();return!0}fullReset(){return this._parser.reset(),this._onRequestReset.fire(),!0}reset(){this._curAttrData=v.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=v.DEFAULT_ATTR_DATA.clone()}_eraseAttrData(){return this._eraseAttrDataInternal.bg&=-67108864,this._eraseAttrDataInternal.bg|=67108863&this._curAttrData.bg,this._eraseAttrDataInternal}setgLevel(w){return this._charsetService.setgLevel(w),!0}screenAlignmentPattern(){let w=new h.CellData;w.content=4194304|"E".charCodeAt(0),w.fg=this._curAttrData.fg,w.bg=this._curAttrData.bg,this._setCursor(0,0);for(let L=0;L<this._bufferService.rows;++L){let R=this._activeBuffer.ybase+this._activeBuffer.y+L,A=this._activeBuffer.lines.get(R);A&&(A.fill(w),A.isWrapped=!1)}return this._dirtyRowService.markAllDirty(),this._setCursor(0,0),!0}requestStatusString(w,L){let R=this._bufferService.buffer,A=this._optionsService.rawOptions;return(M=>(this._coreService.triggerDataEvent(`${a.C0.ESC}${M}${a.C0.ESC}\\`),!0))(w==='"q'?`P1$r${this._curAttrData.isProtected()?1:0}"q`:w==='"p'?'P1$r61;1"p':w==="r"?`P1$r${R.scrollTop+1};${R.scrollBottom+1}r`:w==="m"?"P1$r0m":w===" q"?`P1$r${{block:2,underline:4,bar:6}[A.cursorStyle]-(A.cursorBlink?1:0)} q`:"P0$r")}}i.InputHandler=B},844:(o,i)=>{function n(a){for(let d of a)d.dispose();a.length=0}Object.defineProperty(i,"__esModule",{value:!0}),i.getDisposeArrayDisposable=i.disposeArray=i.toDisposable=i.Disposable=void 0,i.Disposable=class{constructor(){this._disposables=[],this._isDisposed=!1}dispose(){this._isDisposed=!0;for(let a of this._disposables)a.dispose();this._disposables.length=0}register(a){return this._disposables.push(a),a}unregister(a){let d=this._disposables.indexOf(a);d!==-1&&this._disposables.splice(d,1)}},i.toDisposable=function(a){return{dispose:a}},i.disposeArray=n,i.getDisposeArrayDisposable=function(a){return{dispose:()=>n(a)}}},1505:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.FourKeyMap=i.TwoKeyMap=void 0;class n{constructor(){this._data={}}set(d,_,S){this._data[d]||(this._data[d]={}),this._data[d][_]=S}get(d,_){return this._data[d]?this._data[d][_]:void 0}clear(){this._data={}}}i.TwoKeyMap=n,i.FourKeyMap=class{constructor(){this._data=new n}set(a,d,_,S,m){this._data.get(a,d)||this._data.set(a,d,new n),this._data.get(a,d).set(_,S,m)}get(a,d,_,S){var m;return(m=this._data.get(a,d))===null||m===void 0?void 0:m.get(_,S)}clear(){this._data.clear()}}},6114:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.isLinux=i.isWindows=i.isIphone=i.isIpad=i.isMac=i.isSafari=i.isLegacyEdge=i.isFirefox=void 0;let n=typeof navigator>"u",a=n?"node":navigator.userAgent,d=n?"node":navigator.platform;i.isFirefox=a.includes("Firefox"),i.isLegacyEdge=a.includes("Edge"),i.isSafari=/^((?!chrome|android).)*safari/i.test(a),i.isMac=["Macintosh","MacIntel","MacPPC","Mac68K"].includes(d),i.isIpad=d==="iPad",i.isIphone=d==="iPhone",i.isWindows=["Windows","Win16","Win32","WinCE"].includes(d),i.isLinux=d.indexOf("Linux")>=0},6106:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.SortedList=void 0;let n=0;i.SortedList=class{constructor(a){this._getKey=a,this._array=[]}clear(){this._array.length=0}insert(a){this._array.length!==0?(n=this._search(this._getKey(a),0,this._array.length-1),this._array.splice(n,0,a)):this._array.push(a)}delete(a){if(this._array.length===0)return!1;let d=this._getKey(a);if(d===void 0||(n=this._search(d,0,this._array.length-1),n===-1)||this._getKey(this._array[n])!==d)return!1;do if(this._array[n]===a)return this._array.splice(n,1),!0;while(++n<this._array.length&&this._getKey(this._array[n])===d);return!1}*getKeyIterator(a){if(this._array.length!==0&&(n=this._search(a,0,this._array.length-1),!(n<0||n>=this._array.length)&&this._getKey(this._array[n])===a))do yield this._array[n];while(++n<this._array.length&&this._getKey(this._array[n])===a)}forEachByKey(a,d){if(this._array.length!==0&&(n=this._search(a,0,this._array.length-1),!(n<0||n>=this._array.length)&&this._getKey(this._array[n])===a))do d(this._array[n]);while(++n<this._array.length&&this._getKey(this._array[n])===a)}values(){return this._array.values()}_search(a,d,_){if(_<d)return d;let S=Math.floor((d+_)/2),m=this._getKey(this._array[S]);if(m>a)return this._search(a,d,S-1);if(m<a)return this._search(a,S+1,_);for(;S>0&&this._getKey(this._array[S-1])===a;)S--;return S}}},8273:(o,i)=>{function n(a,d,_=0,S=a.length){if(_>=a.length)return a;_=(a.length+_)%a.length,S=S>=a.length?a.length:(a.length+S)%a.length;for(let m=_;m<S;++m)a[m]=d;return a}Object.defineProperty(i,"__esModule",{value:!0}),i.concat=i.fillFallback=i.fill=void 0,i.fill=function(a,d,_,S){return a.fill?a.fill(d,_,S):n(a,d,_,S)},i.fillFallback=n,i.concat=function(a,d){let _=new a.constructor(a.length+d.length);return _.set(a),_.set(d,a.length),_}},9282:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.updateWindowsModeWrappedState=void 0;let a=n(643);i.updateWindowsModeWrappedState=function(d){let _=d.buffer.lines.get(d.buffer.ybase+d.buffer.y-1),S=_==null?void 0:_.get(d.cols-1),m=d.buffer.lines.get(d.buffer.ybase+d.buffer.y);m&&S&&(m.isWrapped=S[a.CHAR_DATA_CODE_INDEX]!==a.NULL_CELL_CODE&&S[a.CHAR_DATA_CODE_INDEX]!==a.WHITESPACE_CELL_CODE)}},3734:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.ExtendedAttrs=i.AttributeData=void 0;class n{constructor(){this.fg=0,this.bg=0,this.extended=new a}static toColorRGB(_){return[_>>>16&255,_>>>8&255,255&_]}static fromColorRGB(_){return(255&_[0])<<16|(255&_[1])<<8|255&_[2]}clone(){let _=new n;return _.fg=this.fg,_.bg=this.bg,_.extended=this.extended.clone(),_}isInverse(){return 67108864&this.fg}isBold(){return 134217728&this.fg}isUnderline(){return this.hasExtendedAttrs()&&this.extended.underlineStyle!==0?1:268435456&this.fg}isBlink(){return 536870912&this.fg}isInvisible(){return 1073741824&this.fg}isItalic(){return 67108864&this.bg}isDim(){return 134217728&this.bg}isStrikethrough(){return 2147483648&this.fg}isProtected(){return 536870912&this.bg}getFgColorMode(){return 50331648&this.fg}getBgColorMode(){return 50331648&this.bg}isFgRGB(){return(50331648&this.fg)==50331648}isBgRGB(){return(50331648&this.bg)==50331648}isFgPalette(){return(50331648&this.fg)==16777216||(50331648&this.fg)==33554432}isBgPalette(){return(50331648&this.bg)==16777216||(50331648&this.bg)==33554432}isFgDefault(){return(50331648&this.fg)==0}isBgDefault(){return(50331648&this.bg)==0}isAttributeDefault(){return this.fg===0&&this.bg===0}getFgColor(){switch(50331648&this.fg){case 16777216:case 33554432:return 255&this.fg;case 50331648:return 16777215&this.fg;default:return-1}}getBgColor(){switch(50331648&this.bg){case 16777216:case 33554432:return 255&this.bg;case 50331648:return 16777215&this.bg;default:return-1}}hasExtendedAttrs(){return 268435456&this.bg}updateExtended(){this.extended.isEmpty()?this.bg&=-268435457:this.bg|=268435456}getUnderlineColor(){if(268435456&this.bg&&~this.extended.underlineColor)switch(50331648&this.extended.underlineColor){case 16777216:case 33554432:return 255&this.extended.underlineColor;case 50331648:return 16777215&this.extended.underlineColor;default:return this.getFgColor()}return this.getFgColor()}getUnderlineColorMode(){return 268435456&this.bg&&~this.extended.underlineColor?50331648&this.extended.underlineColor:this.getFgColorMode()}isUnderlineColorRGB(){return 268435456&this.bg&&~this.extended.underlineColor?(50331648&this.extended.underlineColor)==50331648:this.isFgRGB()}isUnderlineColorPalette(){return 268435456&this.bg&&~this.extended.underlineColor?(50331648&this.extended.underlineColor)==16777216||(50331648&this.extended.underlineColor)==33554432:this.isFgPalette()}isUnderlineColorDefault(){return 268435456&this.bg&&~this.extended.underlineColor?(50331648&this.extended.underlineColor)==0:this.isFgDefault()}getUnderlineStyle(){return 268435456&this.fg?268435456&this.bg?this.extended.underlineStyle:1:0}}i.AttributeData=n;class a{constructor(_=0,S=0){this._ext=0,this._urlId=0,this._ext=_,this._urlId=S}get ext(){return this._urlId?-469762049&this._ext|this.underlineStyle<<26:this._ext}set ext(_){this._ext=_}get underlineStyle(){return this._urlId?5:(469762048&this._ext)>>26}set underlineStyle(_){this._ext&=-469762049,this._ext|=_<<26&469762048}get underlineColor(){return 67108863&this._ext}set underlineColor(_){this._ext&=-67108864,this._ext|=67108863&_}get urlId(){return this._urlId}set urlId(_){this._urlId=_}clone(){return new a(this._ext,this._urlId)}isEmpty(){return this.underlineStyle===0&&this._urlId===0}}i.ExtendedAttrs=a},9092:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.BufferStringIterator=i.Buffer=i.MAX_BUFFER_SIZE=void 0;let a=n(6349),d=n(8437),_=n(511),S=n(643),m=n(4634),v=n(4863),p=n(7116),c=n(3734);i.MAX_BUFFER_SIZE=4294967295,i.Buffer=class{constructor(u,l,f){this._hasScrollback=u,this._optionsService=l,this._bufferService=f,this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.savedY=0,this.savedX=0,this.savedCurAttrData=d.DEFAULT_ATTR_DATA.clone(),this.savedCharset=p.DEFAULT_CHARSET,this.markers=[],this._nullCell=_.CellData.fromCharData([0,S.NULL_CELL_CHAR,S.NULL_CELL_WIDTH,S.NULL_CELL_CODE]),this._whitespaceCell=_.CellData.fromCharData([0,S.WHITESPACE_CELL_CHAR,S.WHITESPACE_CELL_WIDTH,S.WHITESPACE_CELL_CODE]),this._isClearing=!1,this._cols=this._bufferService.cols,this._rows=this._bufferService.rows,this.lines=new a.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops()}getNullCell(u){return u?(this._nullCell.fg=u.fg,this._nullCell.bg=u.bg,this._nullCell.extended=u.extended):(this._nullCell.fg=0,this._nullCell.bg=0,this._nullCell.extended=new c.ExtendedAttrs),this._nullCell}getWhitespaceCell(u){return u?(this._whitespaceCell.fg=u.fg,this._whitespaceCell.bg=u.bg,this._whitespaceCell.extended=u.extended):(this._whitespaceCell.fg=0,this._whitespaceCell.bg=0,this._whitespaceCell.extended=new c.ExtendedAttrs),this._whitespaceCell}getBlankLine(u,l){return new d.BufferLine(this._bufferService.cols,this.getNullCell(u),l)}get hasScrollback(){return this._hasScrollback&&this.lines.maxLength>this._rows}get isCursorInViewport(){let u=this.ybase+this.y-this.ydisp;return u>=0&&u<this._rows}_getCorrectBufferLength(u){if(!this._hasScrollback)return u;let l=u+this._optionsService.rawOptions.scrollback;return l>i.MAX_BUFFER_SIZE?i.MAX_BUFFER_SIZE:l}fillViewportRows(u){if(this.lines.length===0){u===void 0&&(u=d.DEFAULT_ATTR_DATA);let l=this._rows;for(;l--;)this.lines.push(this.getBlankLine(u))}}clear(){this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.lines=new a.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops()}resize(u,l){let f=this.getNullCell(d.DEFAULT_ATTR_DATA),g=this._getCorrectBufferLength(l);if(g>this.lines.maxLength&&(this.lines.maxLength=g),this.lines.length>0){if(this._cols<u)for(let k=0;k<this.lines.length;k++)this.lines.get(k).resize(u,f);let C=0;if(this._rows<l)for(let k=this._rows;k<l;k++)this.lines.length<l+this.ybase&&(this._optionsService.rawOptions.windowsMode?this.lines.push(new d.BufferLine(u,f)):this.ybase>0&&this.lines.length<=this.ybase+this.y+C+1?(this.ybase--,C++,this.ydisp>0&&this.ydisp--):this.lines.push(new d.BufferLine(u,f)));else for(let k=this._rows;k>l;k--)this.lines.length>l+this.ybase&&(this.lines.length>this.ybase+this.y+1?this.lines.pop():(this.ybase++,this.ydisp++));if(g<this.lines.maxLength){let k=this.lines.length-g;k>0&&(this.lines.trimStart(k),this.ybase=Math.max(this.ybase-k,0),this.ydisp=Math.max(this.ydisp-k,0),this.savedY=Math.max(this.savedY-k,0)),this.lines.maxLength=g}this.x=Math.min(this.x,u-1),this.y=Math.min(this.y,l-1),C&&(this.y+=C),this.savedX=Math.min(this.savedX,u-1),this.scrollTop=0}if(this.scrollBottom=l-1,this._isReflowEnabled&&(this._reflow(u,l),this._cols>u))for(let C=0;C<this.lines.length;C++)this.lines.get(C).resize(u,f);this._cols=u,this._rows=l}get _isReflowEnabled(){return this._hasScrollback&&!this._optionsService.rawOptions.windowsMode}_reflow(u,l){this._cols!==u&&(u>this._cols?this._reflowLarger(u,l):this._reflowSmaller(u,l))}_reflowLarger(u,l){let f=(0,m.reflowLargerGetLinesToRemove)(this.lines,this._cols,u,this.ybase+this.y,this.getNullCell(d.DEFAULT_ATTR_DATA));if(f.length>0){let g=(0,m.reflowLargerCreateNewLayout)(this.lines,f);(0,m.reflowLargerApplyNewLayout)(this.lines,g.layout),this._reflowLargerAdjustViewport(u,l,g.countRemoved)}}_reflowLargerAdjustViewport(u,l,f){let g=this.getNullCell(d.DEFAULT_ATTR_DATA),C=f;for(;C-- >0;)this.ybase===0?(this.y>0&&this.y--,this.lines.length<l&&this.lines.push(new d.BufferLine(u,g))):(this.ydisp===this.ybase&&this.ydisp--,this.ybase--);this.savedY=Math.max(this.savedY-f,0)}_reflowSmaller(u,l){let f=this.getNullCell(d.DEFAULT_ATTR_DATA),g=[],C=0;for(let k=this.lines.length-1;k>=0;k--){let y=this.lines.get(k);if(!y||!y.isWrapped&&y.getTrimmedLength()<=u)continue;let E=[y];for(;y.isWrapped&&k>0;)y=this.lines.get(--k),E.unshift(y);let x=this.ybase+this.y;if(x>=k&&x<k+E.length)continue;let B=E[E.length-1].getTrimmedLength(),D=(0,m.reflowSmallerGetNewLineLengths)(E,this._cols,u),w=D.length-E.length,L;L=this.ybase===0&&this.y!==this.lines.length-1?Math.max(0,this.y-this.lines.maxLength+w):Math.max(0,this.lines.length-this.lines.maxLength+w);let R=[];for(let W=0;W<w;W++){let K=this.getBlankLine(d.DEFAULT_ATTR_DATA,!0);R.push(K)}R.length>0&&(g.push({start:k+E.length+C,newLines:R}),C+=R.length),E.push(...R);let A=D.length-1,M=D[A];M===0&&(A--,M=D[A]);let j=E.length-w-1,q=B;for(;j>=0;){let W=Math.min(q,M);if(E[A]===void 0)break;if(E[A].copyCellsFrom(E[j],q-W,M-W,W,!0),M-=W,M===0&&(A--,M=D[A]),q-=W,q===0){j--;let K=Math.max(j,0);q=(0,m.getWrappedLineTrimmedLength)(E,K,this._cols)}}for(let W=0;W<E.length;W++)D[W]<u&&E[W].setCell(D[W],f);let V=w-L;for(;V-- >0;)this.ybase===0?this.y<l-1?(this.y++,this.lines.pop()):(this.ybase++,this.ydisp++):this.ybase<Math.min(this.lines.maxLength,this.lines.length+C)-l&&(this.ybase===this.ydisp&&this.ydisp++,this.ybase++);this.savedY=Math.min(this.savedY+w,this.ybase+l-1)}if(g.length>0){let k=[],y=[];for(let A=0;A<this.lines.length;A++)y.push(this.lines.get(A));let E=this.lines.length,x=E-1,B=0,D=g[B];this.lines.length=Math.min(this.lines.maxLength,this.lines.length+C);let w=0;for(let A=Math.min(this.lines.maxLength-1,E+C-1);A>=0;A--)if(D&&D.start>x+w){for(let M=D.newLines.length-1;M>=0;M--)this.lines.set(A--,D.newLines[M]);A++,k.push({index:x+1,amount:D.newLines.length}),w+=D.newLines.length,D=g[++B]}else this.lines.set(A,y[x--]);let L=0;for(let A=k.length-1;A>=0;A--)k[A].index+=L,this.lines.onInsertEmitter.fire(k[A]),L+=k[A].amount;let R=Math.max(0,E+C-this.lines.maxLength);R>0&&this.lines.onTrimEmitter.fire(R)}}stringIndexToBufferIndex(u,l,f=!1){for(;l;){let g=this.lines.get(u);if(!g)return[-1,-1];let C=f?g.getTrimmedLength():g.length;for(let k=0;k<C;++k)if(g.get(k)[S.CHAR_DATA_WIDTH_INDEX]&&(l-=g.get(k)[S.CHAR_DATA_CHAR_INDEX].length||1),l<0)return[u,k];u++}return[u,0]}translateBufferLineToString(u,l,f=0,g){let C=this.lines.get(u);return C?C.translateToString(l,f,g):""}getWrappedRangeForLine(u){let l=u,f=u;for(;l>0&&this.lines.get(l).isWrapped;)l--;for(;f+1<this.lines.length&&this.lines.get(f+1).isWrapped;)f++;return{first:l,last:f}}setupTabStops(u){for(u!=null?this.tabs[u]||(u=this.prevStop(u)):(this.tabs={},u=0);u<this._cols;u+=this._optionsService.rawOptions.tabStopWidth)this.tabs[u]=!0}prevStop(u){for(u==null&&(u=this.x);!this.tabs[--u]&&u>0;);return u>=this._cols?this._cols-1:u<0?0:u}nextStop(u){for(u==null&&(u=this.x);!this.tabs[++u]&&u<this._cols;);return u>=this._cols?this._cols-1:u<0?0:u}clearMarkers(u){this._isClearing=!0;for(let l=0;l<this.markers.length;l++)this.markers[l].line===u&&(this.markers[l].dispose(),this.markers.splice(l--,1));this._isClearing=!1}clearAllMarkers(){this._isClearing=!0;for(let u=0;u<this.markers.length;u++)this.markers[u].dispose(),this.markers.splice(u--,1);this._isClearing=!1}addMarker(u){let l=new v.Marker(u);return this.markers.push(l),l.register(this.lines.onTrim(f=>{l.line-=f,l.line<0&&l.dispose()})),l.register(this.lines.onInsert(f=>{l.line>=f.index&&(l.line+=f.amount)})),l.register(this.lines.onDelete(f=>{l.line>=f.index&&l.line<f.index+f.amount&&l.dispose(),l.line>f.index&&(l.line-=f.amount)})),l.register(l.onDispose(()=>this._removeMarker(l))),l}_removeMarker(u){this._isClearing||this.markers.splice(this.markers.indexOf(u),1)}iterator(u,l,f,g,C){return new h(this,u,l,f,g,C)}};class h{constructor(l,f,g=0,C=l.lines.length,k=0,y=0){this._buffer=l,this._trimRight=f,this._startIndex=g,this._endIndex=C,this._startOverscan=k,this._endOverscan=y,this._startIndex<0&&(this._startIndex=0),this._endIndex>this._buffer.lines.length&&(this._endIndex=this._buffer.lines.length),this._current=this._startIndex}hasNext(){return this._current<this._endIndex}next(){let l=this._buffer.getWrappedRangeForLine(this._current);l.first<this._startIndex-this._startOverscan&&(l.first=this._startIndex-this._startOverscan),l.last>this._endIndex+this._endOverscan&&(l.last=this._endIndex+this._endOverscan),l.first=Math.max(l.first,0),l.last=Math.min(l.last,this._buffer.lines.length);let f="";for(let g=l.first;g<=l.last;++g)f+=this._buffer.translateBufferLineToString(g,this._trimRight);return this._current=l.last+1,{range:l,content:f}}}i.BufferStringIterator=h},8437:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.BufferLine=i.DEFAULT_ATTR_DATA=void 0;let a=n(482),d=n(643),_=n(511),S=n(3734);i.DEFAULT_ATTR_DATA=Object.freeze(new S.AttributeData);let m={startIndex:0};class v{constructor(c,h,u=!1){this.isWrapped=u,this._combined={},this._extendedAttrs={},this._data=new Uint32Array(3*c);let l=h||_.CellData.fromCharData([0,d.NULL_CELL_CHAR,d.NULL_CELL_WIDTH,d.NULL_CELL_CODE]);for(let f=0;f<c;++f)this.setCell(f,l);this.length=c}get(c){let h=this._data[3*c+0],u=2097151&h;return[this._data[3*c+1],2097152&h?this._combined[c]:u?(0,a.stringFromCodePoint)(u):"",h>>22,2097152&h?this._combined[c].charCodeAt(this._combined[c].length-1):u]}set(c,h){this._data[3*c+1]=h[d.CHAR_DATA_ATTR_INDEX],h[d.CHAR_DATA_CHAR_INDEX].length>1?(this._combined[c]=h[1],this._data[3*c+0]=2097152|c|h[d.CHAR_DATA_WIDTH_INDEX]<<22):this._data[3*c+0]=h[d.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|h[d.CHAR_DATA_WIDTH_INDEX]<<22}getWidth(c){return this._data[3*c+0]>>22}hasWidth(c){return 12582912&this._data[3*c+0]}getFg(c){return this._data[3*c+1]}getBg(c){return this._data[3*c+2]}hasContent(c){return 4194303&this._data[3*c+0]}getCodePoint(c){let h=this._data[3*c+0];return 2097152&h?this._combined[c].charCodeAt(this._combined[c].length-1):2097151&h}isCombined(c){return 2097152&this._data[3*c+0]}getString(c){let h=this._data[3*c+0];return 2097152&h?this._combined[c]:2097151&h?(0,a.stringFromCodePoint)(2097151&h):""}isProtected(c){return 536870912&this._data[3*c+2]}loadCell(c,h){return m.startIndex=3*c,h.content=this._data[m.startIndex+0],h.fg=this._data[m.startIndex+1],h.bg=this._data[m.startIndex+2],2097152&h.content&&(h.combinedData=this._combined[c]),268435456&h.bg&&(h.extended=this._extendedAttrs[c]),h}setCell(c,h){2097152&h.content&&(this._combined[c]=h.combinedData),268435456&h.bg&&(this._extendedAttrs[c]=h.extended),this._data[3*c+0]=h.content,this._data[3*c+1]=h.fg,this._data[3*c+2]=h.bg}setCellFromCodePoint(c,h,u,l,f,g){268435456&f&&(this._extendedAttrs[c]=g),this._data[3*c+0]=h|u<<22,this._data[3*c+1]=l,this._data[3*c+2]=f}addCodepointToCell(c,h){let u=this._data[3*c+0];2097152&u?this._combined[c]+=(0,a.stringFromCodePoint)(h):(2097151&u?(this._combined[c]=(0,a.stringFromCodePoint)(2097151&u)+(0,a.stringFromCodePoint)(h),u&=-2097152,u|=2097152):u=h|4194304,this._data[3*c+0]=u)}insertCells(c,h,u,l){if((c%=this.length)&&this.getWidth(c-1)===2&&this.setCellFromCodePoint(c-1,0,1,(l==null?void 0:l.fg)||0,(l==null?void 0:l.bg)||0,(l==null?void 0:l.extended)||new S.ExtendedAttrs),h<this.length-c){let f=new _.CellData;for(let g=this.length-c-h-1;g>=0;--g)this.setCell(c+h+g,this.loadCell(c+g,f));for(let g=0;g<h;++g)this.setCell(c+g,u)}else for(let f=c;f<this.length;++f)this.setCell(f,u);this.getWidth(this.length-1)===2&&this.setCellFromCodePoint(this.length-1,0,1,(l==null?void 0:l.fg)||0,(l==null?void 0:l.bg)||0,(l==null?void 0:l.extended)||new S.ExtendedAttrs)}deleteCells(c,h,u,l){if(c%=this.length,h<this.length-c){let f=new _.CellData;for(let g=0;g<this.length-c-h;++g)this.setCell(c+g,this.loadCell(c+h+g,f));for(let g=this.length-h;g<this.length;++g)this.setCell(g,u)}else for(let f=c;f<this.length;++f)this.setCell(f,u);c&&this.getWidth(c-1)===2&&this.setCellFromCodePoint(c-1,0,1,(l==null?void 0:l.fg)||0,(l==null?void 0:l.bg)||0,(l==null?void 0:l.extended)||new S.ExtendedAttrs),this.getWidth(c)!==0||this.hasContent(c)||this.setCellFromCodePoint(c,0,1,(l==null?void 0:l.fg)||0,(l==null?void 0:l.bg)||0,(l==null?void 0:l.extended)||new S.ExtendedAttrs)}replaceCells(c,h,u,l,f=!1){if(f)for(c&&this.getWidth(c-1)===2&&!this.isProtected(c-1)&&this.setCellFromCodePoint(c-1,0,1,(l==null?void 0:l.fg)||0,(l==null?void 0:l.bg)||0,(l==null?void 0:l.extended)||new S.ExtendedAttrs),h<this.length&&this.getWidth(h-1)===2&&!this.isProtected(h)&&this.setCellFromCodePoint(h,0,1,(l==null?void 0:l.fg)||0,(l==null?void 0:l.bg)||0,(l==null?void 0:l.extended)||new S.ExtendedAttrs);c<h&&c<this.length;)this.isProtected(c)||this.setCell(c,u),c++;else for(c&&this.getWidth(c-1)===2&&this.setCellFromCodePoint(c-1,0,1,(l==null?void 0:l.fg)||0,(l==null?void 0:l.bg)||0,(l==null?void 0:l.extended)||new S.ExtendedAttrs),h<this.length&&this.getWidth(h-1)===2&&this.setCellFromCodePoint(h,0,1,(l==null?void 0:l.fg)||0,(l==null?void 0:l.bg)||0,(l==null?void 0:l.extended)||new S.ExtendedAttrs);c<h&&c<this.length;)this.setCell(c++,u)}resize(c,h){if(c!==this.length){if(c>this.length){let u=new Uint32Array(3*c);this.length&&(3*c<this._data.length?u.set(this._data.subarray(0,3*c)):u.set(this._data)),this._data=u;for(let l=this.length;l<c;++l)this.setCell(l,h)}else if(c){let u=new Uint32Array(3*c);u.set(this._data.subarray(0,3*c)),this._data=u;let l=Object.keys(this._combined);for(let f=0;f<l.length;f++){let g=parseInt(l[f],10);g>=c&&delete this._combined[g]}}else this._data=new Uint32Array(0),this._combined={};this.length=c}}fill(c,h=!1){if(h)for(let u=0;u<this.length;++u)this.isProtected(u)||this.setCell(u,c);else{this._combined={},this._extendedAttrs={};for(let u=0;u<this.length;++u)this.setCell(u,c)}}copyFrom(c){this.length!==c.length?this._data=new Uint32Array(c._data):this._data.set(c._data),this.length=c.length,this._combined={};for(let h in c._combined)this._combined[h]=c._combined[h];this._extendedAttrs={};for(let h in c._extendedAttrs)this._extendedAttrs[h]=c._extendedAttrs[h];this.isWrapped=c.isWrapped}clone(){let c=new v(0);c._data=new Uint32Array(this._data),c.length=this.length;for(let h in this._combined)c._combined[h]=this._combined[h];for(let h in this._extendedAttrs)c._extendedAttrs[h]=this._extendedAttrs[h];return c.isWrapped=this.isWrapped,c}getTrimmedLength(){for(let c=this.length-1;c>=0;--c)if(4194303&this._data[3*c+0])return c+(this._data[3*c+0]>>22);return 0}copyCellsFrom(c,h,u,l,f){let g=c._data;if(f)for(let k=l-1;k>=0;k--){for(let y=0;y<3;y++)this._data[3*(u+k)+y]=g[3*(h+k)+y];268435456&g[3*(h+k)+2]&&(this._extendedAttrs[u+k]=c._extendedAttrs[h+k])}else for(let k=0;k<l;k++){for(let y=0;y<3;y++)this._data[3*(u+k)+y]=g[3*(h+k)+y];268435456&g[3*(h+k)+2]&&(this._extendedAttrs[u+k]=c._extendedAttrs[h+k])}let C=Object.keys(c._combined);for(let k=0;k<C.length;k++){let y=parseInt(C[k],10);y>=h&&(this._combined[y-h+u]=c._combined[y])}}translateToString(c=!1,h=0,u=this.length){c&&(u=Math.min(u,this.getTrimmedLength()));let l="";for(;h<u;){let f=this._data[3*h+0],g=2097151&f;l+=2097152&f?this._combined[h]:g?(0,a.stringFromCodePoint)(g):d.WHITESPACE_CELL_CHAR,h+=f>>22||1}return l}}i.BufferLine=v},4841:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.getRangeLength=void 0,i.getRangeLength=function(n,a){if(n.start.y>n.end.y)throw new Error(`Buffer range end (${n.end.x}, ${n.end.y}) cannot be before start (${n.start.x}, ${n.start.y})`);return a*(n.end.y-n.start.y)+(n.end.x-n.start.x+1)}},4634:(o,i)=>{function n(a,d,_){if(d===a.length-1)return a[d].getTrimmedLength();let S=!a[d].hasContent(_-1)&&a[d].getWidth(_-1)===1,m=a[d+1].getWidth(0)===2;return S&&m?_-1:_}Object.defineProperty(i,"__esModule",{value:!0}),i.getWrappedLineTrimmedLength=i.reflowSmallerGetNewLineLengths=i.reflowLargerApplyNewLayout=i.reflowLargerCreateNewLayout=i.reflowLargerGetLinesToRemove=void 0,i.reflowLargerGetLinesToRemove=function(a,d,_,S,m){let v=[];for(let p=0;p<a.length-1;p++){let c=p,h=a.get(++c);if(!h.isWrapped)continue;let u=[a.get(p)];for(;c<a.length&&h.isWrapped;)u.push(h),h=a.get(++c);if(S>=p&&S<c){p+=u.length-1;continue}let l=0,f=n(u,l,d),g=1,C=0;for(;g<u.length;){let y=n(u,g,d),E=y-C,x=_-f,B=Math.min(E,x);u[l].copyCellsFrom(u[g],C,f,B,!1),f+=B,f===_&&(l++,f=0),C+=B,C===y&&(g++,C=0),f===0&&l!==0&&u[l-1].getWidth(_-1)===2&&(u[l].copyCellsFrom(u[l-1],_-1,f++,1,!1),u[l-1].setCell(_-1,m))}u[l].replaceCells(f,_,m);let k=0;for(let y=u.length-1;y>0&&(y>l||u[y].getTrimmedLength()===0);y--)k++;k>0&&(v.push(p+u.length-k),v.push(k)),p+=u.length-1}return v},i.reflowLargerCreateNewLayout=function(a,d){let _=[],S=0,m=d[S],v=0;for(let p=0;p<a.length;p++)if(m===p){let c=d[++S];a.onDeleteEmitter.fire({index:p-v,amount:c}),p+=c-1,v+=c,m=d[++S]}else _.push(p);return{layout:_,countRemoved:v}},i.reflowLargerApplyNewLayout=function(a,d){let _=[];for(let S=0;S<d.length;S++)_.push(a.get(d[S]));for(let S=0;S<_.length;S++)a.set(S,_[S]);a.length=d.length},i.reflowSmallerGetNewLineLengths=function(a,d,_){let S=[],m=a.map((h,u)=>n(a,u,d)).reduce((h,u)=>h+u),v=0,p=0,c=0;for(;c<m;){if(m-c<_){S.push(m-c);break}v+=_;let h=n(a,p,d);v>h&&(v-=h,p++);let u=a[p].getWidth(v-1)===2;u&&v--;let l=u?_-1:_;S.push(l),c+=l}return S},i.getWrappedLineTrimmedLength=n},5295:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.BufferSet=void 0;let a=n(9092),d=n(8460),_=n(844);class S extends _.Disposable{constructor(v,p){super(),this._optionsService=v,this._bufferService=p,this._onBufferActivate=this.register(new d.EventEmitter),this.reset()}get onBufferActivate(){return this._onBufferActivate.event}reset(){this._normal=new a.Buffer(!0,this._optionsService,this._bufferService),this._normal.fillViewportRows(),this._alt=new a.Buffer(!1,this._optionsService,this._bufferService),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}),this.setupTabStops()}get alt(){return this._alt}get active(){return this._activeBuffer}get normal(){return this._normal}activateNormalBuffer(){this._activeBuffer!==this._normal&&(this._normal.x=this._alt.x,this._normal.y=this._alt.y,this._alt.clearAllMarkers(),this._alt.clear(),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}))}activateAltBuffer(v){this._activeBuffer!==this._alt&&(this._alt.fillViewportRows(v),this._alt.x=this._normal.x,this._alt.y=this._normal.y,this._activeBuffer=this._alt,this._onBufferActivate.fire({activeBuffer:this._alt,inactiveBuffer:this._normal}))}resize(v,p){this._normal.resize(v,p),this._alt.resize(v,p)}setupTabStops(v){this._normal.setupTabStops(v),this._alt.setupTabStops(v)}}i.BufferSet=S},511:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.CellData=void 0;let a=n(482),d=n(643),_=n(3734);class S extends _.AttributeData{constructor(){super(...arguments),this.content=0,this.fg=0,this.bg=0,this.extended=new _.ExtendedAttrs,this.combinedData=""}static fromCharData(v){let p=new S;return p.setFromCharData(v),p}isCombined(){return 2097152&this.content}getWidth(){return this.content>>22}getChars(){return 2097152&this.content?this.combinedData:2097151&this.content?(0,a.stringFromCodePoint)(2097151&this.content):""}getCode(){return this.isCombined()?this.combinedData.charCodeAt(this.combinedData.length-1):2097151&this.content}setFromCharData(v){this.fg=v[d.CHAR_DATA_ATTR_INDEX],this.bg=0;let p=!1;if(v[d.CHAR_DATA_CHAR_INDEX].length>2)p=!0;else if(v[d.CHAR_DATA_CHAR_INDEX].length===2){let c=v[d.CHAR_DATA_CHAR_INDEX].charCodeAt(0);if(55296<=c&&c<=56319){let h=v[d.CHAR_DATA_CHAR_INDEX].charCodeAt(1);56320<=h&&h<=57343?this.content=1024*(c-55296)+h-56320+65536|v[d.CHAR_DATA_WIDTH_INDEX]<<22:p=!0}else p=!0}else this.content=v[d.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|v[d.CHAR_DATA_WIDTH_INDEX]<<22;p&&(this.combinedData=v[d.CHAR_DATA_CHAR_INDEX],this.content=2097152|v[d.CHAR_DATA_WIDTH_INDEX]<<22)}getAsCharData(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]}}i.CellData=S},643:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.WHITESPACE_CELL_CODE=i.WHITESPACE_CELL_WIDTH=i.WHITESPACE_CELL_CHAR=i.NULL_CELL_CODE=i.NULL_CELL_WIDTH=i.NULL_CELL_CHAR=i.CHAR_DATA_CODE_INDEX=i.CHAR_DATA_WIDTH_INDEX=i.CHAR_DATA_CHAR_INDEX=i.CHAR_DATA_ATTR_INDEX=i.DEFAULT_EXT=i.DEFAULT_ATTR=i.DEFAULT_COLOR=void 0,i.DEFAULT_COLOR=256,i.DEFAULT_ATTR=256|i.DEFAULT_COLOR<<9,i.DEFAULT_EXT=0,i.CHAR_DATA_ATTR_INDEX=0,i.CHAR_DATA_CHAR_INDEX=1,i.CHAR_DATA_WIDTH_INDEX=2,i.CHAR_DATA_CODE_INDEX=3,i.NULL_CELL_CHAR="",i.NULL_CELL_WIDTH=1,i.NULL_CELL_CODE=0,i.WHITESPACE_CELL_CHAR=" ",i.WHITESPACE_CELL_WIDTH=1,i.WHITESPACE_CELL_CODE=32},4863:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Marker=void 0;let a=n(8460),d=n(844);class _ extends d.Disposable{constructor(m){super(),this.line=m,this._id=_._nextId++,this.isDisposed=!1,this._onDispose=new a.EventEmitter}get id(){return this._id}get onDispose(){return this._onDispose.event}dispose(){this.isDisposed||(this.isDisposed=!0,this.line=-1,this._onDispose.fire(),super.dispose())}}i.Marker=_,_._nextId=1},7116:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.DEFAULT_CHARSET=i.CHARSETS=void 0,i.CHARSETS={},i.DEFAULT_CHARSET=i.CHARSETS.B,i.CHARSETS[0]={"`":"\u25C6",a:"\u2592",b:"\u2409",c:"\u240C",d:"\u240D",e:"\u240A",f:"\xB0",g:"\xB1",h:"\u2424",i:"\u240B",j:"\u2518",k:"\u2510",l:"\u250C",m:"\u2514",n:"\u253C",o:"\u23BA",p:"\u23BB",q:"\u2500",r:"\u23BC",s:"\u23BD",t:"\u251C",u:"\u2524",v:"\u2534",w:"\u252C",x:"\u2502",y:"\u2264",z:"\u2265","{":"\u03C0","|":"\u2260","}":"\xA3","~":"\xB7"},i.CHARSETS.A={"#":"\xA3"},i.CHARSETS.B=void 0,i.CHARSETS[4]={"#":"\xA3","@":"\xBE","[":"ij","\\":"\xBD","]":"|","{":"\xA8","|":"f","}":"\xBC","~":"\xB4"},i.CHARSETS.C=i.CHARSETS[5]={"[":"\xC4","\\":"\xD6","]":"\xC5","^":"\xDC","`":"\xE9","{":"\xE4","|":"\xF6","}":"\xE5","~":"\xFC"},i.CHARSETS.R={"#":"\xA3","@":"\xE0","[":"\xB0","\\":"\xE7","]":"\xA7","{":"\xE9","|":"\xF9","}":"\xE8","~":"\xA8"},i.CHARSETS.Q={"@":"\xE0","[":"\xE2","\\":"\xE7","]":"\xEA","^":"\xEE","`":"\xF4","{":"\xE9","|":"\xF9","}":"\xE8","~":"\xFB"},i.CHARSETS.K={"@":"\xA7","[":"\xC4","\\":"\xD6","]":"\xDC","{":"\xE4","|":"\xF6","}":"\xFC","~":"\xDF"},i.CHARSETS.Y={"#":"\xA3","@":"\xA7","[":"\xB0","\\":"\xE7","]":"\xE9","`":"\xF9","{":"\xE0","|":"\xF2","}":"\xE8","~":"\xEC"},i.CHARSETS.E=i.CHARSETS[6]={"@":"\xC4","[":"\xC6","\\":"\xD8","]":"\xC5","^":"\xDC","`":"\xE4","{":"\xE6","|":"\xF8","}":"\xE5","~":"\xFC"},i.CHARSETS.Z={"#":"\xA3","@":"\xA7","[":"\xA1","\\":"\xD1","]":"\xBF","{":"\xB0","|":"\xF1","}":"\xE7"},i.CHARSETS.H=i.CHARSETS[7]={"@":"\xC9","[":"\xC4","\\":"\xD6","]":"\xC5","^":"\xDC","`":"\xE9","{":"\xE4","|":"\xF6","}":"\xE5","~":"\xFC"},i.CHARSETS["="]={"#":"\xF9","@":"\xE0","[":"\xE9","\\":"\xE7","]":"\xEA","^":"\xEE",_:"\xE8","`":"\xF4","{":"\xE4","|":"\xF6","}":"\xFC","~":"\xFB"}},2584:(o,i)=>{var n,a;Object.defineProperty(i,"__esModule",{value:!0}),i.C1_ESCAPED=i.C1=i.C0=void 0,function(d){d.NUL="\0",d.SOH="",d.STX="",d.ETX="",d.EOT="",d.ENQ="",d.ACK="",d.BEL="\x07",d.BS="\b",d.HT="	",d.LF=`
`,d.VT="\v",d.FF="\f",d.CR="\r",d.SO="",d.SI="",d.DLE="",d.DC1="",d.DC2="",d.DC3="",d.DC4="",d.NAK="",d.SYN="",d.ETB="",d.CAN="",d.EM="",d.SUB="",d.ESC="\x1B",d.FS="",d.GS="",d.RS="",d.US="",d.SP=" ",d.DEL="\x7F"}(n=i.C0||(i.C0={})),(a=i.C1||(i.C1={})).PAD="\x80",a.HOP="\x81",a.BPH="\x82",a.NBH="\x83",a.IND="\x84",a.NEL="\x85",a.SSA="\x86",a.ESA="\x87",a.HTS="\x88",a.HTJ="\x89",a.VTS="\x8A",a.PLD="\x8B",a.PLU="\x8C",a.RI="\x8D",a.SS2="\x8E",a.SS3="\x8F",a.DCS="\x90",a.PU1="\x91",a.PU2="\x92",a.STS="\x93",a.CCH="\x94",a.MW="\x95",a.SPA="\x96",a.EPA="\x97",a.SOS="\x98",a.SGCI="\x99",a.SCI="\x9A",a.CSI="\x9B",a.ST="\x9C",a.OSC="\x9D",a.PM="\x9E",a.APC="\x9F",(i.C1_ESCAPED||(i.C1_ESCAPED={})).ST=`${n.ESC}\\`},7399:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.evaluateKeyboardEvent=void 0;let a=n(2584),d={48:["0",")"],49:["1","!"],50:["2","@"],51:["3","#"],52:["4","$"],53:["5","%"],54:["6","^"],55:["7","&"],56:["8","*"],57:["9","("],186:[";",":"],187:["=","+"],188:[",","<"],189:["-","_"],190:[".",">"],191:["/","?"],192:["`","~"],219:["[","{"],220:["\\","|"],221:["]","}"],222:["'",'"']};i.evaluateKeyboardEvent=function(_,S,m,v){let p={type:0,cancel:!1,key:void 0},c=(_.shiftKey?1:0)|(_.altKey?2:0)|(_.ctrlKey?4:0)|(_.metaKey?8:0);switch(_.keyCode){case 0:_.key==="UIKeyInputUpArrow"?p.key=S?a.C0.ESC+"OA":a.C0.ESC+"[A":_.key==="UIKeyInputLeftArrow"?p.key=S?a.C0.ESC+"OD":a.C0.ESC+"[D":_.key==="UIKeyInputRightArrow"?p.key=S?a.C0.ESC+"OC":a.C0.ESC+"[C":_.key==="UIKeyInputDownArrow"&&(p.key=S?a.C0.ESC+"OB":a.C0.ESC+"[B");break;case 8:if(_.altKey){p.key=a.C0.ESC+a.C0.DEL;break}p.key=a.C0.DEL;break;case 9:if(_.shiftKey){p.key=a.C0.ESC+"[Z";break}p.key=a.C0.HT,p.cancel=!0;break;case 13:p.key=_.altKey?a.C0.ESC+a.C0.CR:a.C0.CR,p.cancel=!0;break;case 27:p.key=a.C0.ESC,_.altKey&&(p.key=a.C0.ESC+a.C0.ESC),p.cancel=!0;break;case 37:if(_.metaKey)break;c?(p.key=a.C0.ESC+"[1;"+(c+1)+"D",p.key===a.C0.ESC+"[1;3D"&&(p.key=a.C0.ESC+(m?"b":"[1;5D"))):p.key=S?a.C0.ESC+"OD":a.C0.ESC+"[D";break;case 39:if(_.metaKey)break;c?(p.key=a.C0.ESC+"[1;"+(c+1)+"C",p.key===a.C0.ESC+"[1;3C"&&(p.key=a.C0.ESC+(m?"f":"[1;5C"))):p.key=S?a.C0.ESC+"OC":a.C0.ESC+"[C";break;case 38:if(_.metaKey)break;c?(p.key=a.C0.ESC+"[1;"+(c+1)+"A",m||p.key!==a.C0.ESC+"[1;3A"||(p.key=a.C0.ESC+"[1;5A")):p.key=S?a.C0.ESC+"OA":a.C0.ESC+"[A";break;case 40:if(_.metaKey)break;c?(p.key=a.C0.ESC+"[1;"+(c+1)+"B",m||p.key!==a.C0.ESC+"[1;3B"||(p.key=a.C0.ESC+"[1;5B")):p.key=S?a.C0.ESC+"OB":a.C0.ESC+"[B";break;case 45:_.shiftKey||_.ctrlKey||(p.key=a.C0.ESC+"[2~");break;case 46:p.key=c?a.C0.ESC+"[3;"+(c+1)+"~":a.C0.ESC+"[3~";break;case 36:p.key=c?a.C0.ESC+"[1;"+(c+1)+"H":S?a.C0.ESC+"OH":a.C0.ESC+"[H";break;case 35:p.key=c?a.C0.ESC+"[1;"+(c+1)+"F":S?a.C0.ESC+"OF":a.C0.ESC+"[F";break;case 33:_.shiftKey?p.type=2:_.ctrlKey?p.key=a.C0.ESC+"[5;"+(c+1)+"~":p.key=a.C0.ESC+"[5~";break;case 34:_.shiftKey?p.type=3:_.ctrlKey?p.key=a.C0.ESC+"[6;"+(c+1)+"~":p.key=a.C0.ESC+"[6~";break;case 112:p.key=c?a.C0.ESC+"[1;"+(c+1)+"P":a.C0.ESC+"OP";break;case 113:p.key=c?a.C0.ESC+"[1;"+(c+1)+"Q":a.C0.ESC+"OQ";break;case 114:p.key=c?a.C0.ESC+"[1;"+(c+1)+"R":a.C0.ESC+"OR";break;case 115:p.key=c?a.C0.ESC+"[1;"+(c+1)+"S":a.C0.ESC+"OS";break;case 116:p.key=c?a.C0.ESC+"[15;"+(c+1)+"~":a.C0.ESC+"[15~";break;case 117:p.key=c?a.C0.ESC+"[17;"+(c+1)+"~":a.C0.ESC+"[17~";break;case 118:p.key=c?a.C0.ESC+"[18;"+(c+1)+"~":a.C0.ESC+"[18~";break;case 119:p.key=c?a.C0.ESC+"[19;"+(c+1)+"~":a.C0.ESC+"[19~";break;case 120:p.key=c?a.C0.ESC+"[20;"+(c+1)+"~":a.C0.ESC+"[20~";break;case 121:p.key=c?a.C0.ESC+"[21;"+(c+1)+"~":a.C0.ESC+"[21~";break;case 122:p.key=c?a.C0.ESC+"[23;"+(c+1)+"~":a.C0.ESC+"[23~";break;case 123:p.key=c?a.C0.ESC+"[24;"+(c+1)+"~":a.C0.ESC+"[24~";break;default:if(!_.ctrlKey||_.shiftKey||_.altKey||_.metaKey)if(m&&!v||!_.altKey||_.metaKey)!m||_.altKey||_.ctrlKey||_.shiftKey||!_.metaKey?_.key&&!_.ctrlKey&&!_.altKey&&!_.metaKey&&_.keyCode>=48&&_.key.length===1?p.key=_.key:_.key&&_.ctrlKey&&(_.key==="_"&&(p.key=a.C0.US),_.key==="@"&&(p.key=a.C0.NUL)):_.keyCode===65&&(p.type=1);else{let h=d[_.keyCode],u=h==null?void 0:h[_.shiftKey?1:0];if(u)p.key=a.C0.ESC+u;else if(_.keyCode>=65&&_.keyCode<=90){let l=_.ctrlKey?_.keyCode-64:_.keyCode+32,f=String.fromCharCode(l);_.shiftKey&&(f=f.toUpperCase()),p.key=a.C0.ESC+f}else if(_.key==="Dead"&&_.code.startsWith("Key")){let l=_.code.slice(3,4);_.shiftKey||(l=l.toLowerCase()),p.key=a.C0.ESC+l,p.cancel=!0}}else _.keyCode>=65&&_.keyCode<=90?p.key=String.fromCharCode(_.keyCode-64):_.keyCode===32?p.key=a.C0.NUL:_.keyCode>=51&&_.keyCode<=55?p.key=String.fromCharCode(_.keyCode-51+27):_.keyCode===56?p.key=a.C0.DEL:_.keyCode===219?p.key=a.C0.ESC:_.keyCode===220?p.key=a.C0.FS:_.keyCode===221&&(p.key=a.C0.GS)}return p}},482:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Utf8ToUtf32=i.StringToUtf32=i.utf32ToString=i.stringFromCodePoint=void 0,i.stringFromCodePoint=function(n){return n>65535?(n-=65536,String.fromCharCode(55296+(n>>10))+String.fromCharCode(n%1024+56320)):String.fromCharCode(n)},i.utf32ToString=function(n,a=0,d=n.length){let _="";for(let S=a;S<d;++S){let m=n[S];m>65535?(m-=65536,_+=String.fromCharCode(55296+(m>>10))+String.fromCharCode(m%1024+56320)):_+=String.fromCharCode(m)}return _},i.StringToUtf32=class{constructor(){this._interim=0}clear(){this._interim=0}decode(n,a){let d=n.length;if(!d)return 0;let _=0,S=0;if(this._interim){let m=n.charCodeAt(S++);56320<=m&&m<=57343?a[_++]=1024*(this._interim-55296)+m-56320+65536:(a[_++]=this._interim,a[_++]=m),this._interim=0}for(let m=S;m<d;++m){let v=n.charCodeAt(m);if(55296<=v&&v<=56319){if(++m>=d)return this._interim=v,_;let p=n.charCodeAt(m);56320<=p&&p<=57343?a[_++]=1024*(v-55296)+p-56320+65536:(a[_++]=v,a[_++]=p)}else v!==65279&&(a[_++]=v)}return _}},i.Utf8ToUtf32=class{constructor(){this.interim=new Uint8Array(3)}clear(){this.interim.fill(0)}decode(n,a){let d=n.length;if(!d)return 0;let _,S,m,v,p=0,c=0,h=0;if(this.interim[0]){let f=!1,g=this.interim[0];g&=(224&g)==192?31:(240&g)==224?15:7;let C,k=0;for(;(C=63&this.interim[++k])&&k<4;)g<<=6,g|=C;let y=(224&this.interim[0])==192?2:(240&this.interim[0])==224?3:4,E=y-k;for(;h<E;){if(h>=d)return 0;if(C=n[h++],(192&C)!=128){h--,f=!0;break}this.interim[k++]=C,g<<=6,g|=63&C}f||(y===2?g<128?h--:a[p++]=g:y===3?g<2048||g>=55296&&g<=57343||g===65279||(a[p++]=g):g<65536||g>1114111||(a[p++]=g)),this.interim.fill(0)}let u=d-4,l=h;for(;l<d;){for(;!(!(l<u)||128&(_=n[l])||128&(S=n[l+1])||128&(m=n[l+2])||128&(v=n[l+3]));)a[p++]=_,a[p++]=S,a[p++]=m,a[p++]=v,l+=4;if(_=n[l++],_<128)a[p++]=_;else if((224&_)==192){if(l>=d)return this.interim[0]=_,p;if(S=n[l++],(192&S)!=128){l--;continue}if(c=(31&_)<<6|63&S,c<128){l--;continue}a[p++]=c}else if((240&_)==224){if(l>=d)return this.interim[0]=_,p;if(S=n[l++],(192&S)!=128){l--;continue}if(l>=d)return this.interim[0]=_,this.interim[1]=S,p;if(m=n[l++],(192&m)!=128){l--;continue}if(c=(15&_)<<12|(63&S)<<6|63&m,c<2048||c>=55296&&c<=57343||c===65279)continue;a[p++]=c}else if((248&_)==240){if(l>=d)return this.interim[0]=_,p;if(S=n[l++],(192&S)!=128){l--;continue}if(l>=d)return this.interim[0]=_,this.interim[1]=S,p;if(m=n[l++],(192&m)!=128){l--;continue}if(l>=d)return this.interim[0]=_,this.interim[1]=S,this.interim[2]=m,p;if(v=n[l++],(192&v)!=128){l--;continue}if(c=(7&_)<<18|(63&S)<<12|(63&m)<<6|63&v,c<65536||c>1114111)continue;a[p++]=c}}return p}}},225:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.UnicodeV6=void 0;let a=n(8273),d=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531]],_=[[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]],S;i.UnicodeV6=class{constructor(){if(this.version="6",!S){S=new Uint8Array(65536),(0,a.fill)(S,1),S[0]=0,(0,a.fill)(S,0,1,32),(0,a.fill)(S,0,127,160),(0,a.fill)(S,2,4352,4448),S[9001]=2,S[9002]=2,(0,a.fill)(S,2,11904,42192),S[12351]=1,(0,a.fill)(S,2,44032,55204),(0,a.fill)(S,2,63744,64256),(0,a.fill)(S,2,65040,65050),(0,a.fill)(S,2,65072,65136),(0,a.fill)(S,2,65280,65377),(0,a.fill)(S,2,65504,65511);for(let m=0;m<d.length;++m)(0,a.fill)(S,0,d[m][0],d[m][1]+1)}}wcwidth(m){return m<32?0:m<127?1:m<65536?S[m]:function(v,p){let c,h=0,u=p.length-1;if(v<p[0][0]||v>p[u][1])return!1;for(;u>=h;)if(c=h+u>>1,v>p[c][1])h=c+1;else{if(!(v<p[c][0]))return!0;u=c-1}return!1}(m,_)?0:m>=131072&&m<=196605||m>=196608&&m<=262141?2:1}}},5981:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.WriteBuffer=void 0;let a=n(8460),d=typeof queueMicrotask>"u"?_=>{Promise.resolve().then(_)}:queueMicrotask;i.WriteBuffer=class{constructor(_){this._action=_,this._writeBuffer=[],this._callbacks=[],this._pendingData=0,this._bufferOffset=0,this._isSyncWriting=!1,this._syncCalls=0,this._onWriteParsed=new a.EventEmitter}get onWriteParsed(){return this._onWriteParsed.event}writeSync(_,S){if(S!==void 0&&this._syncCalls>S)return void(this._syncCalls=0);if(this._pendingData+=_.length,this._writeBuffer.push(_),this._callbacks.push(void 0),this._syncCalls++,this._isSyncWriting)return;let m;for(this._isSyncWriting=!0;m=this._writeBuffer.shift();){this._action(m);let v=this._callbacks.shift();v&&v()}this._pendingData=0,this._bufferOffset=2147483647,this._isSyncWriting=!1,this._syncCalls=0}write(_,S){if(this._pendingData>5e7)throw new Error("write data discarded, use flow control to avoid losing data");this._writeBuffer.length||(this._bufferOffset=0,setTimeout(()=>this._innerWrite())),this._pendingData+=_.length,this._writeBuffer.push(_),this._callbacks.push(S)}_innerWrite(_=0,S=!0){let m=_||Date.now();for(;this._writeBuffer.length>this._bufferOffset;){let v=this._writeBuffer[this._bufferOffset],p=this._action(v,S);if(p){let h=u=>Date.now()-m>=12?setTimeout(()=>this._innerWrite(0,u)):this._innerWrite(m,u);return void p.catch(u=>(d(()=>{throw u}),Promise.resolve(!1))).then(h)}let c=this._callbacks[this._bufferOffset];if(c&&c(),this._bufferOffset++,this._pendingData-=v.length,Date.now()-m>=12)break}this._writeBuffer.length>this._bufferOffset?(this._bufferOffset>50&&(this._writeBuffer=this._writeBuffer.slice(this._bufferOffset),this._callbacks=this._callbacks.slice(this._bufferOffset),this._bufferOffset=0),setTimeout(()=>this._innerWrite())):(this._writeBuffer.length=0,this._callbacks.length=0,this._pendingData=0,this._bufferOffset=0),this._onWriteParsed.fire()}}},5941:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.toRgbString=i.parseColor=void 0;let n=/^([\da-f])\/([\da-f])\/([\da-f])$|^([\da-f]{2})\/([\da-f]{2})\/([\da-f]{2})$|^([\da-f]{3})\/([\da-f]{3})\/([\da-f]{3})$|^([\da-f]{4})\/([\da-f]{4})\/([\da-f]{4})$/,a=/^[\da-f]+$/;function d(_,S){let m=_.toString(16),v=m.length<2?"0"+m:m;switch(S){case 4:return m[0];case 8:return v;case 12:return(v+v).slice(0,3);default:return v+v}}i.parseColor=function(_){if(!_)return;let S=_.toLowerCase();if(S.indexOf("rgb:")===0){S=S.slice(4);let m=n.exec(S);if(m){let v=m[1]?15:m[4]?255:m[7]?4095:65535;return[Math.round(parseInt(m[1]||m[4]||m[7]||m[10],16)/v*255),Math.round(parseInt(m[2]||m[5]||m[8]||m[11],16)/v*255),Math.round(parseInt(m[3]||m[6]||m[9]||m[12],16)/v*255)]}}else if(S.indexOf("#")===0&&(S=S.slice(1),a.exec(S)&&[3,6,9,12].includes(S.length))){let m=S.length/3,v=[0,0,0];for(let p=0;p<3;++p){let c=parseInt(S.slice(m*p,m*p+m),16);v[p]=m===1?c<<4:m===2?c:m===3?c>>4:c>>8}return v}},i.toRgbString=function(_,S=16){let[m,v,p]=_;return`rgb:${d(m,S)}/${d(v,S)}/${d(p,S)}`}},5770:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.PAYLOAD_LIMIT=void 0,i.PAYLOAD_LIMIT=1e7},6351:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.DcsHandler=i.DcsParser=void 0;let a=n(482),d=n(8742),_=n(5770),S=[];i.DcsParser=class{constructor(){this._handlers=Object.create(null),this._active=S,this._ident=0,this._handlerFb=()=>{},this._stack={paused:!1,loopPosition:0,fallThrough:!1}}dispose(){this._handlers=Object.create(null),this._handlerFb=()=>{},this._active=S}registerHandler(v,p){this._handlers[v]===void 0&&(this._handlers[v]=[]);let c=this._handlers[v];return c.push(p),{dispose:()=>{let h=c.indexOf(p);h!==-1&&c.splice(h,1)}}}clearHandler(v){this._handlers[v]&&delete this._handlers[v]}setHandlerFallback(v){this._handlerFb=v}reset(){if(this._active.length)for(let v=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;v>=0;--v)this._active[v].unhook(!1);this._stack.paused=!1,this._active=S,this._ident=0}hook(v,p){if(this.reset(),this._ident=v,this._active=this._handlers[v]||S,this._active.length)for(let c=this._active.length-1;c>=0;c--)this._active[c].hook(p);else this._handlerFb(this._ident,"HOOK",p)}put(v,p,c){if(this._active.length)for(let h=this._active.length-1;h>=0;h--)this._active[h].put(v,p,c);else this._handlerFb(this._ident,"PUT",(0,a.utf32ToString)(v,p,c))}unhook(v,p=!0){if(this._active.length){let c=!1,h=this._active.length-1,u=!1;if(this._stack.paused&&(h=this._stack.loopPosition-1,c=p,u=this._stack.fallThrough,this._stack.paused=!1),!u&&c===!1){for(;h>=0&&(c=this._active[h].unhook(v),c!==!0);h--)if(c instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=h,this._stack.fallThrough=!1,c;h--}for(;h>=0;h--)if(c=this._active[h].unhook(!1),c instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=h,this._stack.fallThrough=!0,c}else this._handlerFb(this._ident,"UNHOOK",v);this._active=S,this._ident=0}};let m=new d.Params;m.addParam(0),i.DcsHandler=class{constructor(v){this._handler=v,this._data="",this._params=m,this._hitLimit=!1}hook(v){this._params=v.length>1||v.params[0]?v.clone():m,this._data="",this._hitLimit=!1}put(v,p,c){this._hitLimit||(this._data+=(0,a.utf32ToString)(v,p,c),this._data.length>_.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0))}unhook(v){let p=!1;if(this._hitLimit)p=!1;else if(v&&(p=this._handler(this._data,this._params),p instanceof Promise))return p.then(c=>(this._params=m,this._data="",this._hitLimit=!1,c));return this._params=m,this._data="",this._hitLimit=!1,p}}},2015:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.EscapeSequenceParser=i.VT500_TRANSITION_TABLE=i.TransitionTable=void 0;let a=n(844),d=n(8273),_=n(8742),S=n(6242),m=n(6351);class v{constructor(u){this.table=new Uint8Array(u)}setDefault(u,l){(0,d.fill)(this.table,u<<4|l)}add(u,l,f,g){this.table[l<<8|u]=f<<4|g}addMany(u,l,f,g){for(let C=0;C<u.length;C++)this.table[l<<8|u[C]]=f<<4|g}}i.TransitionTable=v;let p=160;i.VT500_TRANSITION_TABLE=function(){let h=new v(4095),u=Array.apply(null,Array(256)).map((y,E)=>E),l=(y,E)=>u.slice(y,E),f=l(32,127),g=l(0,24);g.push(25),g.push.apply(g,l(28,32));let C=l(0,14),k;for(k in h.setDefault(1,0),h.addMany(f,0,2,0),C)h.addMany([24,26,153,154],k,3,0),h.addMany(l(128,144),k,3,0),h.addMany(l(144,152),k,3,0),h.add(156,k,0,0),h.add(27,k,11,1),h.add(157,k,4,8),h.addMany([152,158,159],k,0,7),h.add(155,k,11,3),h.add(144,k,11,9);return h.addMany(g,0,3,0),h.addMany(g,1,3,1),h.add(127,1,0,1),h.addMany(g,8,0,8),h.addMany(g,3,3,3),h.add(127,3,0,3),h.addMany(g,4,3,4),h.add(127,4,0,4),h.addMany(g,6,3,6),h.addMany(g,5,3,5),h.add(127,5,0,5),h.addMany(g,2,3,2),h.add(127,2,0,2),h.add(93,1,4,8),h.addMany(f,8,5,8),h.add(127,8,5,8),h.addMany([156,27,24,26,7],8,6,0),h.addMany(l(28,32),8,0,8),h.addMany([88,94,95],1,0,7),h.addMany(f,7,0,7),h.addMany(g,7,0,7),h.add(156,7,0,0),h.add(127,7,0,7),h.add(91,1,11,3),h.addMany(l(64,127),3,7,0),h.addMany(l(48,60),3,8,4),h.addMany([60,61,62,63],3,9,4),h.addMany(l(48,60),4,8,4),h.addMany(l(64,127),4,7,0),h.addMany([60,61,62,63],4,0,6),h.addMany(l(32,64),6,0,6),h.add(127,6,0,6),h.addMany(l(64,127),6,0,0),h.addMany(l(32,48),3,9,5),h.addMany(l(32,48),5,9,5),h.addMany(l(48,64),5,0,6),h.addMany(l(64,127),5,7,0),h.addMany(l(32,48),4,9,5),h.addMany(l(32,48),1,9,2),h.addMany(l(32,48),2,9,2),h.addMany(l(48,127),2,10,0),h.addMany(l(48,80),1,10,0),h.addMany(l(81,88),1,10,0),h.addMany([89,90,92],1,10,0),h.addMany(l(96,127),1,10,0),h.add(80,1,11,9),h.addMany(g,9,0,9),h.add(127,9,0,9),h.addMany(l(28,32),9,0,9),h.addMany(l(32,48),9,9,12),h.addMany(l(48,60),9,8,10),h.addMany([60,61,62,63],9,9,10),h.addMany(g,11,0,11),h.addMany(l(32,128),11,0,11),h.addMany(l(28,32),11,0,11),h.addMany(g,10,0,10),h.add(127,10,0,10),h.addMany(l(28,32),10,0,10),h.addMany(l(48,60),10,8,10),h.addMany([60,61,62,63],10,0,11),h.addMany(l(32,48),10,9,12),h.addMany(g,12,0,12),h.add(127,12,0,12),h.addMany(l(28,32),12,0,12),h.addMany(l(32,48),12,9,12),h.addMany(l(48,64),12,0,11),h.addMany(l(64,127),12,12,13),h.addMany(l(64,127),10,12,13),h.addMany(l(64,127),9,12,13),h.addMany(g,13,13,13),h.addMany(f,13,13,13),h.add(127,13,0,13),h.addMany([27,156,24,26],13,14,0),h.add(p,0,2,0),h.add(p,8,5,8),h.add(p,6,0,6),h.add(p,11,0,11),h.add(p,13,13,13),h}();class c extends a.Disposable{constructor(u=i.VT500_TRANSITION_TABLE){super(),this._transitions=u,this._parseStack={state:0,handlers:[],handlerPos:0,transition:0,chunkPos:0},this.initialState=0,this.currentState=this.initialState,this._params=new _.Params,this._params.addParam(0),this._collect=0,this.precedingCodepoint=0,this._printHandlerFb=(l,f,g)=>{},this._executeHandlerFb=l=>{},this._csiHandlerFb=(l,f)=>{},this._escHandlerFb=l=>{},this._errorHandlerFb=l=>l,this._printHandler=this._printHandlerFb,this._executeHandlers=Object.create(null),this._csiHandlers=Object.create(null),this._escHandlers=Object.create(null),this._oscParser=new S.OscParser,this._dcsParser=new m.DcsParser,this._errorHandler=this._errorHandlerFb,this.registerEscHandler({final:"\\"},()=>!0)}_identifier(u,l=[64,126]){let f=0;if(u.prefix){if(u.prefix.length>1)throw new Error("only one byte as prefix supported");if(f=u.prefix.charCodeAt(0),f&&60>f||f>63)throw new Error("prefix must be in range 0x3c .. 0x3f")}if(u.intermediates){if(u.intermediates.length>2)throw new Error("only two bytes as intermediates are supported");for(let C=0;C<u.intermediates.length;++C){let k=u.intermediates.charCodeAt(C);if(32>k||k>47)throw new Error("intermediate must be in range 0x20 .. 0x2f");f<<=8,f|=k}}if(u.final.length!==1)throw new Error("final must be a single byte");let g=u.final.charCodeAt(0);if(l[0]>g||g>l[1])throw new Error(`final must be in range ${l[0]} .. ${l[1]}`);return f<<=8,f|=g,f}identToString(u){let l=[];for(;u;)l.push(String.fromCharCode(255&u)),u>>=8;return l.reverse().join("")}dispose(){this._csiHandlers=Object.create(null),this._executeHandlers=Object.create(null),this._escHandlers=Object.create(null),this._oscParser.dispose(),this._dcsParser.dispose()}setPrintHandler(u){this._printHandler=u}clearPrintHandler(){this._printHandler=this._printHandlerFb}registerEscHandler(u,l){let f=this._identifier(u,[48,126]);this._escHandlers[f]===void 0&&(this._escHandlers[f]=[]);let g=this._escHandlers[f];return g.push(l),{dispose:()=>{let C=g.indexOf(l);C!==-1&&g.splice(C,1)}}}clearEscHandler(u){this._escHandlers[this._identifier(u,[48,126])]&&delete this._escHandlers[this._identifier(u,[48,126])]}setEscHandlerFallback(u){this._escHandlerFb=u}setExecuteHandler(u,l){this._executeHandlers[u.charCodeAt(0)]=l}clearExecuteHandler(u){this._executeHandlers[u.charCodeAt(0)]&&delete this._executeHandlers[u.charCodeAt(0)]}setExecuteHandlerFallback(u){this._executeHandlerFb=u}registerCsiHandler(u,l){let f=this._identifier(u);this._csiHandlers[f]===void 0&&(this._csiHandlers[f]=[]);let g=this._csiHandlers[f];return g.push(l),{dispose:()=>{let C=g.indexOf(l);C!==-1&&g.splice(C,1)}}}clearCsiHandler(u){this._csiHandlers[this._identifier(u)]&&delete this._csiHandlers[this._identifier(u)]}setCsiHandlerFallback(u){this._csiHandlerFb=u}registerDcsHandler(u,l){return this._dcsParser.registerHandler(this._identifier(u),l)}clearDcsHandler(u){this._dcsParser.clearHandler(this._identifier(u))}setDcsHandlerFallback(u){this._dcsParser.setHandlerFallback(u)}registerOscHandler(u,l){return this._oscParser.registerHandler(u,l)}clearOscHandler(u){this._oscParser.clearHandler(u)}setOscHandlerFallback(u){this._oscParser.setHandlerFallback(u)}setErrorHandler(u){this._errorHandler=u}clearErrorHandler(){this._errorHandler=this._errorHandlerFb}reset(){this.currentState=this.initialState,this._oscParser.reset(),this._dcsParser.reset(),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0,this._parseStack.state!==0&&(this._parseStack.state=2,this._parseStack.handlers=[])}_preserveStack(u,l,f,g,C){this._parseStack.state=u,this._parseStack.handlers=l,this._parseStack.handlerPos=f,this._parseStack.transition=g,this._parseStack.chunkPos=C}parse(u,l,f){let g,C=0,k=0,y=0;if(this._parseStack.state)if(this._parseStack.state===2)this._parseStack.state=0,y=this._parseStack.chunkPos+1;else{if(f===void 0||this._parseStack.state===1)throw this._parseStack.state=1,new Error("improper continuation due to previous async handler, giving up parsing");let E=this._parseStack.handlers,x=this._parseStack.handlerPos-1;switch(this._parseStack.state){case 3:if(f===!1&&x>-1){for(;x>=0&&(g=E[x](this._params),g!==!0);x--)if(g instanceof Promise)return this._parseStack.handlerPos=x,g}this._parseStack.handlers=[];break;case 4:if(f===!1&&x>-1){for(;x>=0&&(g=E[x](),g!==!0);x--)if(g instanceof Promise)return this._parseStack.handlerPos=x,g}this._parseStack.handlers=[];break;case 6:if(C=u[this._parseStack.chunkPos],g=this._dcsParser.unhook(C!==24&&C!==26,f),g)return g;C===27&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0;break;case 5:if(C=u[this._parseStack.chunkPos],g=this._oscParser.end(C!==24&&C!==26,f),g)return g;C===27&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0}this._parseStack.state=0,y=this._parseStack.chunkPos+1,this.precedingCodepoint=0,this.currentState=15&this._parseStack.transition}for(let E=y;E<l;++E){switch(C=u[E],k=this._transitions.table[this.currentState<<8|(C<160?C:p)],k>>4){case 2:for(let L=E+1;;++L){if(L>=l||(C=u[L])<32||C>126&&C<p){this._printHandler(u,E,L),E=L-1;break}if(++L>=l||(C=u[L])<32||C>126&&C<p){this._printHandler(u,E,L),E=L-1;break}if(++L>=l||(C=u[L])<32||C>126&&C<p){this._printHandler(u,E,L),E=L-1;break}if(++L>=l||(C=u[L])<32||C>126&&C<p){this._printHandler(u,E,L),E=L-1;break}}break;case 3:this._executeHandlers[C]?this._executeHandlers[C]():this._executeHandlerFb(C),this.precedingCodepoint=0;break;case 0:break;case 1:if(this._errorHandler({position:E,code:C,currentState:this.currentState,collect:this._collect,params:this._params,abort:!1}).abort)return;break;case 7:let x=this._csiHandlers[this._collect<<8|C],B=x?x.length-1:-1;for(;B>=0&&(g=x[B](this._params),g!==!0);B--)if(g instanceof Promise)return this._preserveStack(3,x,B,k,E),g;B<0&&this._csiHandlerFb(this._collect<<8|C,this._params),this.precedingCodepoint=0;break;case 8:do switch(C){case 59:this._params.addParam(0);break;case 58:this._params.addSubParam(-1);break;default:this._params.addDigit(C-48)}while(++E<l&&(C=u[E])>47&&C<60);E--;break;case 9:this._collect<<=8,this._collect|=C;break;case 10:let D=this._escHandlers[this._collect<<8|C],w=D?D.length-1:-1;for(;w>=0&&(g=D[w](),g!==!0);w--)if(g instanceof Promise)return this._preserveStack(4,D,w,k,E),g;w<0&&this._escHandlerFb(this._collect<<8|C),this.precedingCodepoint=0;break;case 11:this._params.reset(),this._params.addParam(0),this._collect=0;break;case 12:this._dcsParser.hook(this._collect<<8|C,this._params);break;case 13:for(let L=E+1;;++L)if(L>=l||(C=u[L])===24||C===26||C===27||C>127&&C<p){this._dcsParser.put(u,E,L),E=L-1;break}break;case 14:if(g=this._dcsParser.unhook(C!==24&&C!==26),g)return this._preserveStack(6,[],0,k,E),g;C===27&&(k|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0;break;case 4:this._oscParser.start();break;case 5:for(let L=E+1;;L++)if(L>=l||(C=u[L])<32||C>127&&C<p){this._oscParser.put(u,E,L),E=L-1;break}break;case 6:if(g=this._oscParser.end(C!==24&&C!==26),g)return this._preserveStack(5,[],0,k,E),g;C===27&&(k|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0}this.currentState=15&k}}}i.EscapeSequenceParser=c},6242:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.OscHandler=i.OscParser=void 0;let a=n(5770),d=n(482),_=[];i.OscParser=class{constructor(){this._state=0,this._active=_,this._id=-1,this._handlers=Object.create(null),this._handlerFb=()=>{},this._stack={paused:!1,loopPosition:0,fallThrough:!1}}registerHandler(S,m){this._handlers[S]===void 0&&(this._handlers[S]=[]);let v=this._handlers[S];return v.push(m),{dispose:()=>{let p=v.indexOf(m);p!==-1&&v.splice(p,1)}}}clearHandler(S){this._handlers[S]&&delete this._handlers[S]}setHandlerFallback(S){this._handlerFb=S}dispose(){this._handlers=Object.create(null),this._handlerFb=()=>{},this._active=_}reset(){if(this._state===2)for(let S=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;S>=0;--S)this._active[S].end(!1);this._stack.paused=!1,this._active=_,this._id=-1,this._state=0}_start(){if(this._active=this._handlers[this._id]||_,this._active.length)for(let S=this._active.length-1;S>=0;S--)this._active[S].start();else this._handlerFb(this._id,"START")}_put(S,m,v){if(this._active.length)for(let p=this._active.length-1;p>=0;p--)this._active[p].put(S,m,v);else this._handlerFb(this._id,"PUT",(0,d.utf32ToString)(S,m,v))}start(){this.reset(),this._state=1}put(S,m,v){if(this._state!==3){if(this._state===1)for(;m<v;){let p=S[m++];if(p===59){this._state=2,this._start();break}if(p<48||57<p)return void(this._state=3);this._id===-1&&(this._id=0),this._id=10*this._id+p-48}this._state===2&&v-m>0&&this._put(S,m,v)}}end(S,m=!0){if(this._state!==0){if(this._state!==3)if(this._state===1&&this._start(),this._active.length){let v=!1,p=this._active.length-1,c=!1;if(this._stack.paused&&(p=this._stack.loopPosition-1,v=m,c=this._stack.fallThrough,this._stack.paused=!1),!c&&v===!1){for(;p>=0&&(v=this._active[p].end(S),v!==!0);p--)if(v instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=p,this._stack.fallThrough=!1,v;p--}for(;p>=0;p--)if(v=this._active[p].end(!1),v instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=p,this._stack.fallThrough=!0,v}else this._handlerFb(this._id,"END",S);this._active=_,this._id=-1,this._state=0}}},i.OscHandler=class{constructor(S){this._handler=S,this._data="",this._hitLimit=!1}start(){this._data="",this._hitLimit=!1}put(S,m,v){this._hitLimit||(this._data+=(0,d.utf32ToString)(S,m,v),this._data.length>a.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0))}end(S){let m=!1;if(this._hitLimit)m=!1;else if(S&&(m=this._handler(this._data),m instanceof Promise))return m.then(v=>(this._data="",this._hitLimit=!1,v));return this._data="",this._hitLimit=!1,m}}},8742:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Params=void 0;let n=2147483647;class a{constructor(_=32,S=32){if(this.maxLength=_,this.maxSubParamsLength=S,S>256)throw new Error("maxSubParamsLength must not be greater than 256");this.params=new Int32Array(_),this.length=0,this._subParams=new Int32Array(S),this._subParamsLength=0,this._subParamsIdx=new Uint16Array(_),this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1}static fromArray(_){let S=new a;if(!_.length)return S;for(let m=Array.isArray(_[0])?1:0;m<_.length;++m){let v=_[m];if(Array.isArray(v))for(let p=0;p<v.length;++p)S.addSubParam(v[p]);else S.addParam(v)}return S}clone(){let _=new a(this.maxLength,this.maxSubParamsLength);return _.params.set(this.params),_.length=this.length,_._subParams.set(this._subParams),_._subParamsLength=this._subParamsLength,_._subParamsIdx.set(this._subParamsIdx),_._rejectDigits=this._rejectDigits,_._rejectSubDigits=this._rejectSubDigits,_._digitIsSub=this._digitIsSub,_}toArray(){let _=[];for(let S=0;S<this.length;++S){_.push(this.params[S]);let m=this._subParamsIdx[S]>>8,v=255&this._subParamsIdx[S];v-m>0&&_.push(Array.prototype.slice.call(this._subParams,m,v))}return _}reset(){this.length=0,this._subParamsLength=0,this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1}addParam(_){if(this._digitIsSub=!1,this.length>=this.maxLength)this._rejectDigits=!0;else{if(_<-1)throw new Error("values lesser than -1 are not allowed");this._subParamsIdx[this.length]=this._subParamsLength<<8|this._subParamsLength,this.params[this.length++]=_>n?n:_}}addSubParam(_){if(this._digitIsSub=!0,this.length)if(this._rejectDigits||this._subParamsLength>=this.maxSubParamsLength)this._rejectSubDigits=!0;else{if(_<-1)throw new Error("values lesser than -1 are not allowed");this._subParams[this._subParamsLength++]=_>n?n:_,this._subParamsIdx[this.length-1]++}}hasSubParams(_){return(255&this._subParamsIdx[_])-(this._subParamsIdx[_]>>8)>0}getSubParams(_){let S=this._subParamsIdx[_]>>8,m=255&this._subParamsIdx[_];return m-S>0?this._subParams.subarray(S,m):null}getSubParamsAll(){let _={};for(let S=0;S<this.length;++S){let m=this._subParamsIdx[S]>>8,v=255&this._subParamsIdx[S];v-m>0&&(_[S]=this._subParams.slice(m,v))}return _}addDigit(_){let S;if(this._rejectDigits||!(S=this._digitIsSub?this._subParamsLength:this.length)||this._digitIsSub&&this._rejectSubDigits)return;let m=this._digitIsSub?this._subParams:this.params,v=m[S-1];m[S-1]=~v?Math.min(10*v+_,n):_}}i.Params=a},5741:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.AddonManager=void 0,i.AddonManager=class{constructor(){this._addons=[]}dispose(){for(let n=this._addons.length-1;n>=0;n--)this._addons[n].instance.dispose()}loadAddon(n,a){let d={instance:a,dispose:a.dispose,isDisposed:!1};this._addons.push(d),a.dispose=()=>this._wrappedAddonDispose(d),a.activate(n)}_wrappedAddonDispose(n){if(n.isDisposed)return;let a=-1;for(let d=0;d<this._addons.length;d++)if(this._addons[d]===n){a=d;break}if(a===-1)throw new Error("Could not dispose an addon that has not been loaded");n.isDisposed=!0,n.dispose.apply(n.instance),this._addons.splice(a,1)}}},8771:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.BufferApiView=void 0;let a=n(3785),d=n(511);i.BufferApiView=class{constructor(_,S){this._buffer=_,this.type=S}init(_){return this._buffer=_,this}get cursorY(){return this._buffer.y}get cursorX(){return this._buffer.x}get viewportY(){return this._buffer.ydisp}get baseY(){return this._buffer.ybase}get length(){return this._buffer.lines.length}getLine(_){let S=this._buffer.lines.get(_);if(S)return new a.BufferLineApiView(S)}getNullCell(){return new d.CellData}}},3785:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.BufferLineApiView=void 0;let a=n(511);i.BufferLineApiView=class{constructor(d){this._line=d}get isWrapped(){return this._line.isWrapped}get length(){return this._line.length}getCell(d,_){if(!(d<0||d>=this._line.length))return _?(this._line.loadCell(d,_),_):this._line.loadCell(d,new a.CellData)}translateToString(d,_,S){return this._line.translateToString(d,_,S)}}},8285:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.BufferNamespaceApi=void 0;let a=n(8771),d=n(8460);i.BufferNamespaceApi=class{constructor(_){this._core=_,this._onBufferChange=new d.EventEmitter,this._normal=new a.BufferApiView(this._core.buffers.normal,"normal"),this._alternate=new a.BufferApiView(this._core.buffers.alt,"alternate"),this._core.buffers.onBufferActivate(()=>this._onBufferChange.fire(this.active))}get onBufferChange(){return this._onBufferChange.event}get active(){if(this._core.buffers.active===this._core.buffers.normal)return this.normal;if(this._core.buffers.active===this._core.buffers.alt)return this.alternate;throw new Error("Active buffer is neither normal nor alternate")}get normal(){return this._normal.init(this._core.buffers.normal)}get alternate(){return this._alternate.init(this._core.buffers.alt)}}},7975:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.ParserApi=void 0,i.ParserApi=class{constructor(n){this._core=n}registerCsiHandler(n,a){return this._core.registerCsiHandler(n,d=>a(d.toArray()))}addCsiHandler(n,a){return this.registerCsiHandler(n,a)}registerDcsHandler(n,a){return this._core.registerDcsHandler(n,(d,_)=>a(d,_.toArray()))}addDcsHandler(n,a){return this.registerDcsHandler(n,a)}registerEscHandler(n,a){return this._core.registerEscHandler(n,a)}addEscHandler(n,a){return this.registerEscHandler(n,a)}registerOscHandler(n,a){return this._core.registerOscHandler(n,a)}addOscHandler(n,a){return this.registerOscHandler(n,a)}}},7090:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.UnicodeApi=void 0,i.UnicodeApi=class{constructor(n){this._core=n}register(n){this._core.unicodeService.register(n)}get versions(){return this._core.unicodeService.versions}get activeVersion(){return this._core.unicodeService.activeVersion}set activeVersion(n){this._core.unicodeService.activeVersion=n}}},744:function(o,i,n){var a=this&&this.__decorate||function(c,h,u,l){var f,g=arguments.length,C=g<3?h:l===null?l=Object.getOwnPropertyDescriptor(h,u):l;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")C=Reflect.decorate(c,h,u,l);else for(var k=c.length-1;k>=0;k--)(f=c[k])&&(C=(g<3?f(C):g>3?f(h,u,C):f(h,u))||C);return g>3&&C&&Object.defineProperty(h,u,C),C},d=this&&this.__param||function(c,h){return function(u,l){h(u,l,c)}};Object.defineProperty(i,"__esModule",{value:!0}),i.BufferService=i.MINIMUM_ROWS=i.MINIMUM_COLS=void 0;let _=n(2585),S=n(5295),m=n(8460),v=n(844);i.MINIMUM_COLS=2,i.MINIMUM_ROWS=1;let p=class extends v.Disposable{constructor(c){super(),this.isUserScrolling=!1,this._onResize=new m.EventEmitter,this._onScroll=new m.EventEmitter,this.cols=Math.max(c.rawOptions.cols||0,i.MINIMUM_COLS),this.rows=Math.max(c.rawOptions.rows||0,i.MINIMUM_ROWS),this.buffers=new S.BufferSet(c,this)}get onResize(){return this._onResize.event}get onScroll(){return this._onScroll.event}get buffer(){return this.buffers.active}dispose(){super.dispose(),this.buffers.dispose()}resize(c,h){this.cols=c,this.rows=h,this.buffers.resize(c,h),this.buffers.setupTabStops(this.cols),this._onResize.fire({cols:c,rows:h})}reset(){this.buffers.reset(),this.isUserScrolling=!1}scroll(c,h=!1){let u=this.buffer,l;l=this._cachedBlankLine,l&&l.length===this.cols&&l.getFg(0)===c.fg&&l.getBg(0)===c.bg||(l=u.getBlankLine(c,h),this._cachedBlankLine=l),l.isWrapped=h;let f=u.ybase+u.scrollTop,g=u.ybase+u.scrollBottom;if(u.scrollTop===0){let C=u.lines.isFull;g===u.lines.length-1?C?u.lines.recycle().copyFrom(l):u.lines.push(l.clone()):u.lines.splice(g+1,0,l.clone()),C?this.isUserScrolling&&(u.ydisp=Math.max(u.ydisp-1,0)):(u.ybase++,this.isUserScrolling||u.ydisp++)}else{let C=g-f+1;u.lines.shiftElements(f+1,C-1,-1),u.lines.set(g,l.clone())}this.isUserScrolling||(u.ydisp=u.ybase),this._onScroll.fire(u.ydisp)}scrollLines(c,h,u){let l=this.buffer;if(c<0){if(l.ydisp===0)return;this.isUserScrolling=!0}else c+l.ydisp>=l.ybase&&(this.isUserScrolling=!1);let f=l.ydisp;l.ydisp=Math.max(Math.min(l.ydisp+c,l.ybase),0),f!==l.ydisp&&(h||this._onScroll.fire(l.ydisp))}scrollPages(c){this.scrollLines(c*(this.rows-1))}scrollToTop(){this.scrollLines(-this.buffer.ydisp)}scrollToBottom(){this.scrollLines(this.buffer.ybase-this.buffer.ydisp)}scrollToLine(c){let h=c-this.buffer.ydisp;h!==0&&this.scrollLines(h)}};p=a([d(0,_.IOptionsService)],p),i.BufferService=p},7994:(o,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.CharsetService=void 0,i.CharsetService=class{constructor(){this.glevel=0,this._charsets=[]}reset(){this.charset=void 0,this._charsets=[],this.glevel=0}setgLevel(n){this.glevel=n,this.charset=this._charsets[n]}setgCharset(n,a){this._charsets[n]=a,this.glevel===n&&(this.charset=a)}}},1753:function(o,i,n){var a=this&&this.__decorate||function(u,l,f,g){var C,k=arguments.length,y=k<3?l:g===null?g=Object.getOwnPropertyDescriptor(l,f):g;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")y=Reflect.decorate(u,l,f,g);else for(var E=u.length-1;E>=0;E--)(C=u[E])&&(y=(k<3?C(y):k>3?C(l,f,y):C(l,f))||y);return k>3&&y&&Object.defineProperty(l,f,y),y},d=this&&this.__param||function(u,l){return function(f,g){l(f,g,u)}};Object.defineProperty(i,"__esModule",{value:!0}),i.CoreMouseService=void 0;let _=n(2585),S=n(8460),m={NONE:{events:0,restrict:()=>!1},X10:{events:1,restrict:u=>u.button!==4&&u.action===1&&(u.ctrl=!1,u.alt=!1,u.shift=!1,!0)},VT200:{events:19,restrict:u=>u.action!==32},DRAG:{events:23,restrict:u=>u.action!==32||u.button!==3},ANY:{events:31,restrict:u=>!0}};function v(u,l){let f=(u.ctrl?16:0)|(u.shift?4:0)|(u.alt?8:0);return u.button===4?(f|=64,f|=u.action):(f|=3&u.button,4&u.button&&(f|=64),8&u.button&&(f|=128),u.action===32?f|=32:u.action!==0||l||(f|=3)),f}let p=String.fromCharCode,c={DEFAULT:u=>{let l=[v(u,!1)+32,u.col+32,u.row+32];return l[0]>255||l[1]>255||l[2]>255?"":`\x1B[M${p(l[0])}${p(l[1])}${p(l[2])}`},SGR:u=>{let l=u.action===0&&u.button!==4?"m":"M";return`\x1B[<${v(u,!0)};${u.col};${u.row}${l}`},SGR_PIXELS:u=>{let l=u.action===0&&u.button!==4?"m":"M";return`\x1B[<${v(u,!0)};${u.x};${u.y}${l}`}},h=class{constructor(u,l){this._bufferService=u,this._coreService=l,this._protocols={},this._encodings={},this._activeProtocol="",this._activeEncoding="",this._onProtocolChange=new S.EventEmitter,this._lastEvent=null;for(let f of Object.keys(m))this.addProtocol(f,m[f]);for(let f of Object.keys(c))this.addEncoding(f,c[f]);this.reset()}addProtocol(u,l){this._protocols[u]=l}addEncoding(u,l){this._encodings[u]=l}get activeProtocol(){return this._activeProtocol}get areMouseEventsActive(){return this._protocols[this._activeProtocol].events!==0}set activeProtocol(u){if(!this._protocols[u])throw new Error(`unknown protocol "${u}"`);this._activeProtocol=u,this._onProtocolChange.fire(this._protocols[u].events)}get activeEncoding(){return this._activeEncoding}set activeEncoding(u){if(!this._encodings[u])throw new Error(`unknown encoding "${u}"`);this._activeEncoding=u}reset(){this.activeProtocol="NONE",this.activeEncoding="DEFAULT",this._lastEvent=null}get onProtocolChange(){return this._onProtocolChange.event}triggerMouseEvent(u){if(u.col<0||u.col>=this._bufferService.cols||u.row<0||u.row>=this._bufferService.rows||u.button===4&&u.action===32||u.button===3&&u.action!==32||u.button!==4&&(u.action===2||u.action===3)||(u.col++,u.row++,u.action===32&&this._lastEvent&&this._equalEvents(this._lastEvent,u,this._activeEncoding==="SGR_PIXELS"))||!this._protocols[this._activeProtocol].restrict(u))return!1;let l=this._encodings[this._activeEncoding](u);return l&&(this._activeEncoding==="DEFAULT"?this._coreService.triggerBinaryEvent(l):this._coreService.triggerDataEvent(l,!0)),this._lastEvent=u,!0}explainEvents(u){return{down:!!(1&u),up:!!(2&u),drag:!!(4&u),move:!!(8&u),wheel:!!(16&u)}}_equalEvents(u,l,f){if(f){if(u.x!==l.x||u.y!==l.y)return!1}else if(u.col!==l.col||u.row!==l.row)return!1;return u.button===l.button&&u.action===l.action&&u.ctrl===l.ctrl&&u.alt===l.alt&&u.shift===l.shift}};h=a([d(0,_.IBufferService),d(1,_.ICoreService)],h),i.CoreMouseService=h},6975:function(o,i,n){var a=this&&this.__decorate||function(u,l,f,g){var C,k=arguments.length,y=k<3?l:g===null?g=Object.getOwnPropertyDescriptor(l,f):g;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")y=Reflect.decorate(u,l,f,g);else for(var E=u.length-1;E>=0;E--)(C=u[E])&&(y=(k<3?C(y):k>3?C(l,f,y):C(l,f))||y);return k>3&&y&&Object.defineProperty(l,f,y),y},d=this&&this.__param||function(u,l){return function(f,g){l(f,g,u)}};Object.defineProperty(i,"__esModule",{value:!0}),i.CoreService=void 0;let _=n(2585),S=n(8460),m=n(1439),v=n(844),p=Object.freeze({insertMode:!1}),c=Object.freeze({applicationCursorKeys:!1,applicationKeypad:!1,bracketedPasteMode:!1,origin:!1,reverseWraparound:!1,sendFocus:!1,wraparound:!0}),h=class extends v.Disposable{constructor(u,l,f,g){super(),this._bufferService=l,this._logService=f,this._optionsService=g,this.isCursorInitialized=!1,this.isCursorHidden=!1,this._onData=this.register(new S.EventEmitter),this._onUserInput=this.register(new S.EventEmitter),this._onBinary=this.register(new S.EventEmitter),this._scrollToBottom=u,this.register({dispose:()=>this._scrollToBottom=void 0}),this.modes=(0,m.clone)(p),this.decPrivateModes=(0,m.clone)(c)}get onData(){return this._onData.event}get onUserInput(){return this._onUserInput.event}get onBinary(){return this._onBinary.event}reset(){this.modes=(0,m.clone)(p),this.decPrivateModes=(0,m.clone)(c)}triggerDataEvent(u,l=!1){if(this._optionsService.rawOptions.disableStdin)return;let f=this._bufferService.buffer;f.ybase!==f.ydisp&&this._scrollToBottom(),l&&this._onUserInput.fire(),this._logService.debug(`sending data "${u}"`,()=>u.split("").map(g=>g.charCodeAt(0))),this._onData.fire(u)}triggerBinaryEvent(u){this._optionsService.rawOptions.disableStdin||(this._logService.debug(`sending binary "${u}"`,()=>u.split("").map(l=>l.charCodeAt(0))),this._onBinary.fire(u))}};h=a([d(1,_.IBufferService),d(2,_.ILogService),d(3,_.IOptionsService)],h),i.CoreService=h},9074:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.DecorationService=void 0;let a=n(8055),d=n(8460),_=n(844),S=n(6106),m={xmin:0,xmax:0};class v extends _.Disposable{constructor(){super(...arguments),this._decorations=new S.SortedList(h=>h==null?void 0:h.marker.line),this._onDecorationRegistered=this.register(new d.EventEmitter),this._onDecorationRemoved=this.register(new d.EventEmitter)}get onDecorationRegistered(){return this._onDecorationRegistered.event}get onDecorationRemoved(){return this._onDecorationRemoved.event}get decorations(){return this._decorations.values()}registerDecoration(h){if(h.marker.isDisposed)return;let u=new p(h);if(u){let l=u.marker.onDispose(()=>u.dispose());u.onDispose(()=>{u&&(this._decorations.delete(u)&&this._onDecorationRemoved.fire(u),l.dispose())}),this._decorations.insert(u),this._onDecorationRegistered.fire(u)}return u}reset(){for(let h of this._decorations.values())h.dispose();this._decorations.clear()}*getDecorationsAtCell(h,u,l){var f,g,C;let k=0,y=0;for(let E of this._decorations.getKeyIterator(u))k=(f=E.options.x)!==null&&f!==void 0?f:0,y=k+((g=E.options.width)!==null&&g!==void 0?g:1),h>=k&&h<y&&(!l||((C=E.options.layer)!==null&&C!==void 0?C:"bottom")===l)&&(yield E)}forEachDecorationAtCell(h,u,l,f){this._decorations.forEachByKey(u,g=>{var C,k,y;m.xmin=(C=g.options.x)!==null&&C!==void 0?C:0,m.xmax=m.xmin+((k=g.options.width)!==null&&k!==void 0?k:1),h>=m.xmin&&h<m.xmax&&(!l||((y=g.options.layer)!==null&&y!==void 0?y:"bottom")===l)&&f(g)})}dispose(){for(let h of this._decorations.values())this._onDecorationRemoved.fire(h);this.reset()}}i.DecorationService=v;class p extends _.Disposable{constructor(h){super(),this.options=h,this.isDisposed=!1,this.onRenderEmitter=this.register(new d.EventEmitter),this.onRender=this.onRenderEmitter.event,this._onDispose=this.register(new d.EventEmitter),this.onDispose=this._onDispose.event,this._cachedBg=null,this._cachedFg=null,this.marker=h.marker,this.options.overviewRulerOptions&&!this.options.overviewRulerOptions.position&&(this.options.overviewRulerOptions.position="full")}get backgroundColorRGB(){return this._cachedBg===null&&(this.options.backgroundColor?this._cachedBg=a.css.toColor(this.options.backgroundColor):this._cachedBg=void 0),this._cachedBg}get foregroundColorRGB(){return this._cachedFg===null&&(this.options.foregroundColor?this._cachedFg=a.css.toColor(this.options.foregroundColor):this._cachedFg=void 0),this._cachedFg}dispose(){this._isDisposed||(this._isDisposed=!0,this._onDispose.fire(),super.dispose())}}},3730:function(o,i,n){var a=this&&this.__decorate||function(m,v,p,c){var h,u=arguments.length,l=u<3?v:c===null?c=Object.getOwnPropertyDescriptor(v,p):c;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")l=Reflect.decorate(m,v,p,c);else for(var f=m.length-1;f>=0;f--)(h=m[f])&&(l=(u<3?h(l):u>3?h(v,p,l):h(v,p))||l);return u>3&&l&&Object.defineProperty(v,p,l),l},d=this&&this.__param||function(m,v){return function(p,c){v(p,c,m)}};Object.defineProperty(i,"__esModule",{value:!0}),i.DirtyRowService=void 0;let _=n(2585),S=class{constructor(m){this._bufferService=m,this.clearRange()}get start(){return this._start}get end(){return this._end}clearRange(){this._start=this._bufferService.buffer.y,this._end=this._bufferService.buffer.y}markDirty(m){m<this._start?this._start=m:m>this._end&&(this._end=m)}markRangeDirty(m,v){if(m>v){let p=m;m=v,v=p}m<this._start&&(this._start=m),v>this._end&&(this._end=v)}markAllDirty(){this.markRangeDirty(0,this._bufferService.rows-1)}};S=a([d(0,_.IBufferService)],S),i.DirtyRowService=S},4348:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.InstantiationService=i.ServiceCollection=void 0;let a=n(2585),d=n(8343);class _{constructor(...m){this._entries=new Map;for(let[v,p]of m)this.set(v,p)}set(m,v){let p=this._entries.get(m);return this._entries.set(m,v),p}forEach(m){this._entries.forEach((v,p)=>m(p,v))}has(m){return this._entries.has(m)}get(m){return this._entries.get(m)}}i.ServiceCollection=_,i.InstantiationService=class{constructor(){this._services=new _,this._services.set(a.IInstantiationService,this)}setService(S,m){this._services.set(S,m)}getService(S){return this._services.get(S)}createInstance(S,...m){let v=(0,d.getServiceDependencies)(S).sort((h,u)=>h.index-u.index),p=[];for(let h of v){let u=this._services.get(h.id);if(!u)throw new Error(`[createInstance] ${S.name} depends on UNKNOWN service ${h.id}.`);p.push(u)}let c=v.length>0?v[0].index:m.length;if(m.length!==c)throw new Error(`[createInstance] First service dependency of ${S.name} at position ${c+1} conflicts with ${m.length} static arguments`);return new S(...m,...p)}}},7866:function(o,i,n){var a=this&&this.__decorate||function(v,p,c,h){var u,l=arguments.length,f=l<3?p:h===null?h=Object.getOwnPropertyDescriptor(p,c):h;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")f=Reflect.decorate(v,p,c,h);else for(var g=v.length-1;g>=0;g--)(u=v[g])&&(f=(l<3?u(f):l>3?u(p,c,f):u(p,c))||f);return l>3&&f&&Object.defineProperty(p,c,f),f},d=this&&this.__param||function(v,p){return function(c,h){p(c,h,v)}};Object.defineProperty(i,"__esModule",{value:!0}),i.LogService=void 0;let _=n(2585),S={debug:_.LogLevelEnum.DEBUG,info:_.LogLevelEnum.INFO,warn:_.LogLevelEnum.WARN,error:_.LogLevelEnum.ERROR,off:_.LogLevelEnum.OFF},m=class{constructor(v){this._optionsService=v,this.logLevel=_.LogLevelEnum.OFF,this._updateLogLevel(),this._optionsService.onOptionChange(p=>{p==="logLevel"&&this._updateLogLevel()})}_updateLogLevel(){this.logLevel=S[this._optionsService.rawOptions.logLevel]}_evalLazyOptionalParams(v){for(let p=0;p<v.length;p++)typeof v[p]=="function"&&(v[p]=v[p]())}_log(v,p,c){this._evalLazyOptionalParams(c),v.call(console,"xterm.js: "+p,...c)}debug(v,...p){this.logLevel<=_.LogLevelEnum.DEBUG&&this._log(console.log,v,p)}info(v,...p){this.logLevel<=_.LogLevelEnum.INFO&&this._log(console.info,v,p)}warn(v,...p){this.logLevel<=_.LogLevelEnum.WARN&&this._log(console.warn,v,p)}error(v,...p){this.logLevel<=_.LogLevelEnum.ERROR&&this._log(console.error,v,p)}};m=a([d(0,_.IOptionsService)],m),i.LogService=m},7302:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.OptionsService=i.DEFAULT_OPTIONS=void 0;let a=n(8460),d=n(6114);i.DEFAULT_OPTIONS={cols:80,rows:24,cursorBlink:!1,cursorStyle:"block",cursorWidth:1,customGlyphs:!0,drawBoldTextInBrightColors:!0,fastScrollModifier:"alt",fastScrollSensitivity:5,fontFamily:"courier-new, courier, monospace",fontSize:15,fontWeight:"normal",fontWeightBold:"bold",lineHeight:1,letterSpacing:0,linkHandler:null,logLevel:"info",scrollback:1e3,scrollSensitivity:1,screenReaderMode:!1,smoothScrollDuration:0,macOptionIsMeta:!1,macOptionClickForcesSelection:!1,minimumContrastRatio:1,disableStdin:!1,allowProposedApi:!1,allowTransparency:!1,tabStopWidth:8,theme:{},rightClickSelectsWord:d.isMac,windowOptions:{},windowsMode:!1,wordSeparator:" ()[]{}',\"`",altClickMovesCursor:!0,convertEol:!1,termName:"xterm",cancelEvents:!1,overviewRulerWidth:0};let _=["normal","bold","100","200","300","400","500","600","700","800","900"];i.OptionsService=class{constructor(S){this._onOptionChange=new a.EventEmitter;let m=Object.assign({},i.DEFAULT_OPTIONS);for(let v in S)if(v in m)try{let p=S[v];m[v]=this._sanitizeAndValidateOption(v,p)}catch(p){console.error(p)}this.rawOptions=m,this.options=Object.assign({},m),this._setupOptions()}get onOptionChange(){return this._onOptionChange.event}_setupOptions(){let S=v=>{if(!(v in i.DEFAULT_OPTIONS))throw new Error(`No option with key "${v}"`);return this.rawOptions[v]},m=(v,p)=>{if(!(v in i.DEFAULT_OPTIONS))throw new Error(`No option with key "${v}"`);p=this._sanitizeAndValidateOption(v,p),this.rawOptions[v]!==p&&(this.rawOptions[v]=p,this._onOptionChange.fire(v))};for(let v in this.rawOptions){let p={get:S.bind(this,v),set:m.bind(this,v)};Object.defineProperty(this.options,v,p)}}_sanitizeAndValidateOption(S,m){switch(S){case"cursorStyle":if(m||(m=i.DEFAULT_OPTIONS[S]),!function(v){return v==="block"||v==="underline"||v==="bar"}(m))throw new Error(`"${m}" is not a valid value for ${S}`);break;case"wordSeparator":m||(m=i.DEFAULT_OPTIONS[S]);break;case"fontWeight":case"fontWeightBold":if(typeof m=="number"&&1<=m&&m<=1e3)break;m=_.includes(m)?m:i.DEFAULT_OPTIONS[S];break;case"cursorWidth":m=Math.floor(m);case"lineHeight":case"tabStopWidth":if(m<1)throw new Error(`${S} cannot be less than 1, value: ${m}`);break;case"minimumContrastRatio":m=Math.max(1,Math.min(21,Math.round(10*m)/10));break;case"scrollback":if((m=Math.min(m,4294967295))<0)throw new Error(`${S} cannot be less than 0, value: ${m}`);break;case"fastScrollSensitivity":case"scrollSensitivity":if(m<=0)throw new Error(`${S} cannot be less than or equal to 0, value: ${m}`);case"rows":case"cols":if(!m&&m!==0)throw new Error(`${S} must be numeric, value: ${m}`)}return m}}},2660:function(o,i,n){var a=this&&this.__decorate||function(m,v,p,c){var h,u=arguments.length,l=u<3?v:c===null?c=Object.getOwnPropertyDescriptor(v,p):c;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")l=Reflect.decorate(m,v,p,c);else for(var f=m.length-1;f>=0;f--)(h=m[f])&&(l=(u<3?h(l):u>3?h(v,p,l):h(v,p))||l);return u>3&&l&&Object.defineProperty(v,p,l),l},d=this&&this.__param||function(m,v){return function(p,c){v(p,c,m)}};Object.defineProperty(i,"__esModule",{value:!0}),i.OscLinkService=void 0;let _=n(2585),S=class{constructor(m){this._bufferService=m,this._nextId=1,this._entriesWithId=new Map,this._dataByLinkId=new Map}registerLink(m){let v=this._bufferService.buffer;if(m.id===void 0){let f=v.addMarker(v.ybase+v.y),g={data:m,id:this._nextId++,lines:[f]};return f.onDispose(()=>this._removeMarkerFromLink(g,f)),this._dataByLinkId.set(g.id,g),g.id}let p=m,c=this._getEntryIdKey(p),h=this._entriesWithId.get(c);if(h)return this.addLineToLink(h.id,v.ybase+v.y),h.id;let u=v.addMarker(v.ybase+v.y),l={id:this._nextId++,key:this._getEntryIdKey(p),data:p,lines:[u]};return u.onDispose(()=>this._removeMarkerFromLink(l,u)),this._entriesWithId.set(l.key,l),this._dataByLinkId.set(l.id,l),l.id}addLineToLink(m,v){let p=this._dataByLinkId.get(m);if(p&&p.lines.every(c=>c.line!==v)){let c=this._bufferService.buffer.addMarker(v);p.lines.push(c),c.onDispose(()=>this._removeMarkerFromLink(p,c))}}getLinkData(m){var v;return(v=this._dataByLinkId.get(m))===null||v===void 0?void 0:v.data}_getEntryIdKey(m){return`${m.id};;${m.uri}`}_removeMarkerFromLink(m,v){let p=m.lines.indexOf(v);p!==-1&&(m.lines.splice(p,1),m.lines.length===0&&(m.data.id!==void 0&&this._entriesWithId.delete(m.key),this._dataByLinkId.delete(m.id)))}};S=a([d(0,_.IBufferService)],S),i.OscLinkService=S},8343:(o,i)=>{function n(a,d,_){d.di$target===d?d.di$dependencies.push({id:a,index:_}):(d.di$dependencies=[{id:a,index:_}],d.di$target=d)}Object.defineProperty(i,"__esModule",{value:!0}),i.createDecorator=i.getServiceDependencies=i.serviceRegistry=void 0,i.serviceRegistry=new Map,i.getServiceDependencies=function(a){return a.di$dependencies||[]},i.createDecorator=function(a){if(i.serviceRegistry.has(a))return i.serviceRegistry.get(a);let d=function(_,S,m){if(arguments.length!==3)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");n(d,_,m)};return d.toString=()=>a,i.serviceRegistry.set(a,d),d}},2585:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.IDecorationService=i.IUnicodeService=i.IOscLinkService=i.IOptionsService=i.ILogService=i.LogLevelEnum=i.IInstantiationService=i.IDirtyRowService=i.ICharsetService=i.ICoreService=i.ICoreMouseService=i.IBufferService=void 0;let a=n(8343);var d;i.IBufferService=(0,a.createDecorator)("BufferService"),i.ICoreMouseService=(0,a.createDecorator)("CoreMouseService"),i.ICoreService=(0,a.createDecorator)("CoreService"),i.ICharsetService=(0,a.createDecorator)("CharsetService"),i.IDirtyRowService=(0,a.createDecorator)("DirtyRowService"),i.IInstantiationService=(0,a.createDecorator)("InstantiationService"),(d=i.LogLevelEnum||(i.LogLevelEnum={}))[d.DEBUG=0]="DEBUG",d[d.INFO=1]="INFO",d[d.WARN=2]="WARN",d[d.ERROR=3]="ERROR",d[d.OFF=4]="OFF",i.ILogService=(0,a.createDecorator)("LogService"),i.IOptionsService=(0,a.createDecorator)("OptionsService"),i.IOscLinkService=(0,a.createDecorator)("OscLinkService"),i.IUnicodeService=(0,a.createDecorator)("UnicodeService"),i.IDecorationService=(0,a.createDecorator)("DecorationService")},1480:(o,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.UnicodeService=void 0;let a=n(8460),d=n(225);i.UnicodeService=class{constructor(){this._providers=Object.create(null),this._active="",this._onChange=new a.EventEmitter;let _=new d.UnicodeV6;this.register(_),this._active=_.version,this._activeProvider=_}get onChange(){return this._onChange.event}get versions(){return Object.keys(this._providers)}get activeVersion(){return this._active}set activeVersion(_){if(!this._providers[_])throw new Error(`unknown Unicode version "${_}"`);this._active=_,this._activeProvider=this._providers[_],this._onChange.fire(_)}register(_){this._providers[_.version]=_}wcwidth(_){return this._activeProvider.wcwidth(_)}getStringCellWidth(_){let S=0,m=_.length;for(let v=0;v<m;++v){let p=_.charCodeAt(v);if(55296<=p&&p<=56319){if(++v>=m)return S+this.wcwidth(p);let c=_.charCodeAt(v);56320<=c&&c<=57343?p=1024*(p-55296)+c-56320+65536:S+=this.wcwidth(c)}S+=this.wcwidth(p)}return S}}}},t={};function r(o){var i=t[o];if(i!==void 0)return i.exports;var n=t[o]={exports:{}};return e[o].call(n.exports,n,n.exports,r),n.exports}var s={};return(()=>{var o=s;Object.defineProperty(o,"__esModule",{value:!0}),o.Terminal=void 0;let i=r(3236),n=r(9042),a=r(7975),d=r(7090),_=r(5741),S=r(8285),m=["cols","rows"];o.Terminal=class{constructor(v){this._core=new i.Terminal(v),this._addonManager=new _.AddonManager,this._publicOptions=Object.assign({},this._core.options);let p=h=>this._core.options[h],c=(h,u)=>{this._checkReadonlyOptions(h),this._core.options[h]=u};for(let h in this._core.options){let u={get:p.bind(this,h),set:c.bind(this,h)};Object.defineProperty(this._publicOptions,h,u)}}_checkReadonlyOptions(v){if(m.includes(v))throw new Error(`Option "${v}" can only be set in the constructor`)}_checkProposedApi(){if(!this._core.optionsService.rawOptions.allowProposedApi)throw new Error("You must set the allowProposedApi option to true to use proposed API")}get onBell(){return this._core.onBell}get onBinary(){return this._core.onBinary}get onCursorMove(){return this._core.onCursorMove}get onData(){return this._core.onData}get onKey(){return this._core.onKey}get onLineFeed(){return this._core.onLineFeed}get onRender(){return this._core.onRender}get onResize(){return this._core.onResize}get onScroll(){return this._core.onScroll}get onSelectionChange(){return this._core.onSelectionChange}get onTitleChange(){return this._core.onTitleChange}get onWriteParsed(){return this._core.onWriteParsed}get element(){return this._core.element}get parser(){return this._checkProposedApi(),this._parser||(this._parser=new a.ParserApi(this._core)),this._parser}get unicode(){return this._checkProposedApi(),new d.UnicodeApi(this._core)}get textarea(){return this._core.textarea}get rows(){return this._core.rows}get cols(){return this._core.cols}get buffer(){return this._checkProposedApi(),this._buffer||(this._buffer=new S.BufferNamespaceApi(this._core)),this._buffer}get markers(){return this._checkProposedApi(),this._core.markers}get modes(){let v=this._core.coreService.decPrivateModes,p="none";switch(this._core.coreMouseService.activeProtocol){case"X10":p="x10";break;case"VT200":p="vt200";break;case"DRAG":p="drag";break;case"ANY":p="any"}return{applicationCursorKeysMode:v.applicationCursorKeys,applicationKeypadMode:v.applicationKeypad,bracketedPasteMode:v.bracketedPasteMode,insertMode:this._core.coreService.modes.insertMode,mouseTrackingMode:p,originMode:v.origin,reverseWraparoundMode:v.reverseWraparound,sendFocusMode:v.sendFocus,wraparoundMode:v.wraparound}}get options(){return this._publicOptions}set options(v){for(let p in v)this._publicOptions[p]=v[p]}blur(){this._core.blur()}focus(){this._core.focus()}resize(v,p){this._verifyIntegers(v,p),this._core.resize(v,p)}open(v){this._core.open(v)}attachCustomKeyEventHandler(v){this._core.attachCustomKeyEventHandler(v)}registerLinkProvider(v){return this._checkProposedApi(),this._core.registerLinkProvider(v)}registerCharacterJoiner(v){return this._checkProposedApi(),this._core.registerCharacterJoiner(v)}deregisterCharacterJoiner(v){this._checkProposedApi(),this._core.deregisterCharacterJoiner(v)}registerMarker(v=0){return this._verifyIntegers(v),this._core.addMarker(v)}registerDecoration(v){var p,c,h;return this._checkProposedApi(),this._verifyPositiveIntegers((p=v.x)!==null&&p!==void 0?p:0,(c=v.width)!==null&&c!==void 0?c:0,(h=v.height)!==null&&h!==void 0?h:0),this._core.registerDecoration(v)}hasSelection(){return this._core.hasSelection()}select(v,p,c){this._verifyIntegers(v,p,c),this._core.select(v,p,c)}getSelection(){return this._core.getSelection()}getSelectionPosition(){return this._core.getSelectionPosition()}clearSelection(){this._core.clearSelection()}selectAll(){this._core.selectAll()}selectLines(v,p){this._verifyIntegers(v,p),this._core.selectLines(v,p)}dispose(){this._addonManager.dispose(),this._core.dispose()}scrollLines(v){this._verifyIntegers(v),this._core.scrollLines(v)}scrollPages(v){this._verifyIntegers(v),this._core.scrollPages(v)}scrollToTop(){this._core.scrollToTop()}scrollToBottom(){this._core.scrollToBottom()}scrollToLine(v){this._verifyIntegers(v),this._core.scrollToLine(v)}clear(){this._core.clear()}write(v,p){this._core.write(v,p)}writeln(v,p){this._core.write(v),this._core.write(`\r
`,p)}paste(v){this._core.paste(v)}refresh(v,p){this._verifyIntegers(v,p),this._core.refresh(v,p)}reset(){this._core.reset()}clearTextureAtlas(){this._core.clearTextureAtlas()}loadAddon(v){return this._addonManager.loadAddon(this,v)}static get strings(){return n}_verifyIntegers(...v){for(let p of v)if(p===1/0||isNaN(p)||p%1!=0)throw new Error("This API only accepts integers")}_verifyPositiveIntegers(...v){for(let p of v)if(p&&(p===1/0||isNaN(p)||p%1!=0||p<0))throw new Error("This API only accepts positive integers")}}})(),s})()})});var kl=Ve((ki,Ys)=>{(function(e,t){typeof ki=="object"&&typeof Ys=="object"?Ys.exports=t():typeof define=="function"&&define.amd?define([],t):typeof ki=="object"?ki.AttachAddon=t():e.AttachAddon=t()})(self,function(){return(()=>{"use strict";var e={};return(()=>{var t=e;function r(s,o,i){return s.addEventListener(o,i),{dispose:()=>{i&&s.removeEventListener(o,i)}}}Object.defineProperty(t,"__esModule",{value:!0}),t.AttachAddon=void 0,t.AttachAddon=class{constructor(s,o){this._disposables=[],this._socket=s,this._socket.binaryType="arraybuffer",this._bidirectional=!(o&&o.bidirectional===!1)}activate(s){this._disposables.push(r(this._socket,"message",o=>{let i=o.data;s.write(typeof i=="string"?i:new Uint8Array(i))})),this._bidirectional&&(this._disposables.push(s.onData(o=>this._sendData(o))),this._disposables.push(s.onBinary(o=>this._sendBinary(o)))),this._disposables.push(r(this._socket,"close",()=>this.dispose())),this._disposables.push(r(this._socket,"error",()=>this.dispose()))}dispose(){for(let s of this._disposables)s.dispose()}_sendData(s){this._socket.readyState===1&&this._socket.send(s)}_sendBinary(s){if(this._socket.readyState!==1)return;let o=new Uint8Array(s.length);for(let i=0;i<s.length;++i)o[i]=255&s.charCodeAt(i);this._socket.send(o)}}})(),e})()})});var Ol=Ve(G=>{"use strict";var Tr=Symbol.for("react.element"),gh=Symbol.for("react.portal"),mh=Symbol.for("react.fragment"),Sh=Symbol.for("react.strict_mode"),yh=Symbol.for("react.profiler"),Ch=Symbol.for("react.provider"),wh=Symbol.for("react.context"),Eh=Symbol.for("react.forward_ref"),kh=Symbol.for("react.suspense"),Lh=Symbol.for("react.memo"),xh=Symbol.for("react.lazy"),Ll=Symbol.iterator;function Rh(e){return e===null||typeof e!="object"?null:(e=Ll&&e[Ll]||e["@@iterator"],typeof e=="function"?e:null)}var bl={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Dl=Object.assign,Al={};function tr(e,t,r){this.props=e,this.context=t,this.refs=Al,this.updater=r||bl}tr.prototype.isReactComponent={};tr.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};tr.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function Tl(){}Tl.prototype=tr.prototype;function Zs(e,t,r){this.props=e,this.context=t,this.refs=Al,this.updater=r||bl}var Js=Zs.prototype=new Tl;Js.constructor=Zs;Dl(Js,tr.prototype);Js.isPureReactComponent=!0;var xl=Array.isArray,Bl=Object.prototype.hasOwnProperty,en={current:null},Pl={key:!0,ref:!0,__self:!0,__source:!0};function Ml(e,t,r){var s,o={},i=null,n=null;if(t!=null)for(s in t.ref!==void 0&&(n=t.ref),t.key!==void 0&&(i=""+t.key),t)Bl.call(t,s)&&!Pl.hasOwnProperty(s)&&(o[s]=t[s]);var a=arguments.length-2;if(a===1)o.children=r;else if(1<a){for(var d=Array(a),_=0;_<a;_++)d[_]=arguments[_+2];o.children=d}if(e&&e.defaultProps)for(s in a=e.defaultProps,a)o[s]===void 0&&(o[s]=a[s]);return{$$typeof:Tr,type:e,key:i,ref:n,props:o,_owner:en.current}}function bh(e,t){return{$$typeof:Tr,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function tn(e){return typeof e=="object"&&e!==null&&e.$$typeof===Tr}function Dh(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(r){return t[r]})}var Rl=/\/+/g;function Qs(e,t){return typeof e=="object"&&e!==null&&e.key!=null?Dh(""+e.key):t.toString(36)}function xi(e,t,r,s,o){var i=typeof e;(i==="undefined"||i==="boolean")&&(e=null);var n=!1;if(e===null)n=!0;else switch(i){case"string":case"number":n=!0;break;case"object":switch(e.$$typeof){case Tr:case gh:n=!0}}if(n)return n=e,o=o(n),e=s===""?"."+Qs(n,0):s,xl(o)?(r="",e!=null&&(r=e.replace(Rl,"$&/")+"/"),xi(o,t,r,"",function(_){return _})):o!=null&&(tn(o)&&(o=bh(o,r+(!o.key||n&&n.key===o.key?"":(""+o.key).replace(Rl,"$&/")+"/")+e)),t.push(o)),1;if(n=0,s=s===""?".":s+":",xl(e))for(var a=0;a<e.length;a++){i=e[a];var d=s+Qs(i,a);n+=xi(i,t,r,d,o)}else if(d=Rh(e),typeof d=="function")for(e=d.call(e),a=0;!(i=e.next()).done;)i=i.value,d=s+Qs(i,a++),n+=xi(i,t,r,d,o);else if(i==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return n}function Li(e,t,r){if(e==null)return e;var s=[],o=0;return xi(e,s,"","",function(i){return t.call(r,i,o++)}),s}function Ah(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(r){(e._status===0||e._status===-1)&&(e._status=1,e._result=r)},function(r){(e._status===0||e._status===-1)&&(e._status=2,e._result=r)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var Ee={current:null},Ri={transition:null},Th={ReactCurrentDispatcher:Ee,ReactCurrentBatchConfig:Ri,ReactCurrentOwner:en};G.Children={map:Li,forEach:function(e,t,r){Li(e,function(){t.apply(this,arguments)},r)},count:function(e){var t=0;return Li(e,function(){t++}),t},toArray:function(e){return Li(e,function(t){return t})||[]},only:function(e){if(!tn(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};G.Component=tr;G.Fragment=mh;G.Profiler=yh;G.PureComponent=Zs;G.StrictMode=Sh;G.Suspense=kh;G.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Th;G.cloneElement=function(e,t,r){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var s=Dl({},e.props),o=e.key,i=e.ref,n=e._owner;if(t!=null){if(t.ref!==void 0&&(i=t.ref,n=en.current),t.key!==void 0&&(o=""+t.key),e.type&&e.type.defaultProps)var a=e.type.defaultProps;for(d in t)Bl.call(t,d)&&!Pl.hasOwnProperty(d)&&(s[d]=t[d]===void 0&&a!==void 0?a[d]:t[d])}var d=arguments.length-2;if(d===1)s.children=r;else if(1<d){a=Array(d);for(var _=0;_<d;_++)a[_]=arguments[_+2];s.children=a}return{$$typeof:Tr,type:e.type,key:o,ref:i,props:s,_owner:n}};G.createContext=function(e){return e={$$typeof:wh,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:Ch,_context:e},e.Consumer=e};G.createElement=Ml;G.createFactory=function(e){var t=Ml.bind(null,e);return t.type=e,t};G.createRef=function(){return{current:null}};G.forwardRef=function(e){return{$$typeof:Eh,render:e}};G.isValidElement=tn;G.lazy=function(e){return{$$typeof:xh,_payload:{_status:-1,_result:e},_init:Ah}};G.memo=function(e,t){return{$$typeof:Lh,type:e,compare:t===void 0?null:t}};G.startTransition=function(e){var t=Ri.transition;Ri.transition={};try{e()}finally{Ri.transition=t}};G.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")};G.useCallback=function(e,t){return Ee.current.useCallback(e,t)};G.useContext=function(e){return Ee.current.useContext(e)};G.useDebugValue=function(){};G.useDeferredValue=function(e){return Ee.current.useDeferredValue(e)};G.useEffect=function(e,t){return Ee.current.useEffect(e,t)};G.useId=function(){return Ee.current.useId()};G.useImperativeHandle=function(e,t,r){return Ee.current.useImperativeHandle(e,t,r)};G.useInsertionEffect=function(e,t){return Ee.current.useInsertionEffect(e,t)};G.useLayoutEffect=function(e,t){return Ee.current.useLayoutEffect(e,t)};G.useMemo=function(e,t){return Ee.current.useMemo(e,t)};G.useReducer=function(e,t,r){return Ee.current.useReducer(e,t,r)};G.useRef=function(e){return Ee.current.useRef(e)};G.useState=function(e){return Ee.current.useState(e)};G.useSyncExternalStore=function(e,t,r){return Ee.current.useSyncExternalStore(e,t,r)};G.useTransition=function(){return Ee.current.useTransition()};G.version="18.2.0"});var bi=Ve((z_,Il)=>{"use strict";Il.exports=Ol()});var Vl=Ve(Z=>{"use strict";function on(e,t){var r=e.length;e.push(t);e:for(;0<r;){var s=r-1>>>1,o=e[s];if(0<Di(o,t))e[s]=t,e[r]=o,r=s;else break e}}function qe(e){return e.length===0?null:e[0]}function Ti(e){if(e.length===0)return null;var t=e[0],r=e.pop();if(r!==t){e[0]=r;e:for(var s=0,o=e.length,i=o>>>1;s<i;){var n=2*(s+1)-1,a=e[n],d=n+1,_=e[d];if(0>Di(a,r))d<o&&0>Di(_,a)?(e[s]=_,e[d]=r,s=d):(e[s]=a,e[n]=r,s=n);else if(d<o&&0>Di(_,r))e[s]=_,e[d]=r,s=d;else break e}}return t}function Di(e,t){var r=e.sortIndex-t.sortIndex;return r!==0?r:e.id-t.id}typeof performance=="object"&&typeof performance.now=="function"?(Hl=performance,Z.unstable_now=function(){return Hl.now()}):(rn=Date,Fl=rn.now(),Z.unstable_now=function(){return rn.now()-Fl});var Hl,rn,Fl,tt=[],gt=[],Bh=1,Fe=null,me=3,Bi=!1,Nt=!1,Pr=!1,zl=typeof setTimeout=="function"?setTimeout:null,Wl=typeof clearTimeout=="function"?clearTimeout:null,Nl=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function ln(e){for(var t=qe(gt);t!==null;){if(t.callback===null)Ti(gt);else if(t.startTime<=e)Ti(gt),t.sortIndex=t.expirationTime,on(tt,t);else break;t=qe(gt)}}function an(e){if(Pr=!1,ln(e),!Nt)if(qe(tt)!==null)Nt=!0,un(cn);else{var t=qe(gt);t!==null&&hn(an,t.startTime-e)}}function cn(e,t){Nt=!1,Pr&&(Pr=!1,Wl(Mr),Mr=-1),Bi=!0;var r=me;try{for(ln(t),Fe=qe(tt);Fe!==null&&(!(Fe.expirationTime>t)||e&&!Kl());){var s=Fe.callback;if(typeof s=="function"){Fe.callback=null,me=Fe.priorityLevel;var o=s(Fe.expirationTime<=t);t=Z.unstable_now(),typeof o=="function"?Fe.callback=o:Fe===qe(tt)&&Ti(tt),ln(t)}else Ti(tt);Fe=qe(tt)}if(Fe!==null)var i=!0;else{var n=qe(gt);n!==null&&hn(an,n.startTime-t),i=!1}return i}finally{Fe=null,me=r,Bi=!1}}var Pi=!1,Ai=null,Mr=-1,jl=5,$l=-1;function Kl(){return!(Z.unstable_now()-$l<jl)}function sn(){if(Ai!==null){var e=Z.unstable_now();$l=e;var t=!0;try{t=Ai(!0,e)}finally{t?Br():(Pi=!1,Ai=null)}}else Pi=!1}var Br;typeof Nl=="function"?Br=function(){Nl(sn)}:typeof MessageChannel<"u"?(nn=new MessageChannel,Ul=nn.port2,nn.port1.onmessage=sn,Br=function(){Ul.postMessage(null)}):Br=function(){zl(sn,0)};var nn,Ul;function un(e){Ai=e,Pi||(Pi=!0,Br())}function hn(e,t){Mr=zl(function(){e(Z.unstable_now())},t)}Z.unstable_IdlePriority=5;Z.unstable_ImmediatePriority=1;Z.unstable_LowPriority=4;Z.unstable_NormalPriority=3;Z.unstable_Profiling=null;Z.unstable_UserBlockingPriority=2;Z.unstable_cancelCallback=function(e){e.callback=null};Z.unstable_continueExecution=function(){Nt||Bi||(Nt=!0,un(cn))};Z.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):jl=0<e?Math.floor(1e3/e):5};Z.unstable_getCurrentPriorityLevel=function(){return me};Z.unstable_getFirstCallbackNode=function(){return qe(tt)};Z.unstable_next=function(e){switch(me){case 1:case 2:case 3:var t=3;break;default:t=me}var r=me;me=t;try{return e()}finally{me=r}};Z.unstable_pauseExecution=function(){};Z.unstable_requestPaint=function(){};Z.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=me;me=e;try{return t()}finally{me=r}};Z.unstable_scheduleCallback=function(e,t,r){var s=Z.unstable_now();switch(typeof r=="object"&&r!==null?(r=r.delay,r=typeof r=="number"&&0<r?s+r:s):r=s,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return o=r+o,e={id:Bh++,callback:t,priorityLevel:e,startTime:r,expirationTime:o,sortIndex:-1},r>s?(e.sortIndex=r,on(gt,e),qe(tt)===null&&e===qe(gt)&&(Pr?(Wl(Mr),Mr=-1):Pr=!0,hn(an,r-s))):(e.sortIndex=o,on(tt,e),Nt||Bi||(Nt=!0,un(cn))),e};Z.unstable_shouldYield=Kl;Z.unstable_wrapCallback=function(e){var t=me;return function(){var r=me;me=t;try{return e.apply(this,arguments)}finally{me=r}}}});var Xl=Ve((j_,ql)=>{"use strict";ql.exports=Vl()});var eh=Ve(He=>{"use strict";var tc=bi(),Oe=Xl();function O(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var rc=new Set,ri={};function Zt(e,t){wr(e,t),wr(e+"Capture",t)}function wr(e,t){for(ri[e]=t,e=0;e<t.length;e++)rc.add(t[e])}var dt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Mn=Object.prototype.hasOwnProperty,Ph=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Gl={},Yl={};function Mh(e){return Mn.call(Yl,e)?!0:Mn.call(Gl,e)?!1:Ph.test(e)?Yl[e]=!0:(Gl[e]=!0,!1)}function Oh(e,t,r,s){if(r!==null&&r.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return s?!1:r!==null?!r.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function Ih(e,t,r,s){if(t===null||typeof t>"u"||Oh(e,t,r,s))return!0;if(s)return!1;if(r!==null)switch(r.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function xe(e,t,r,s,o,i,n){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=s,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=n}var ge={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ge[e]=new xe(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ge[t]=new xe(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){ge[e]=new xe(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ge[e]=new xe(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ge[e]=new xe(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){ge[e]=new xe(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){ge[e]=new xe(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){ge[e]=new xe(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){ge[e]=new xe(e,5,!1,e.toLowerCase(),null,!1,!1)});var Ro=/[\-:]([a-z])/g;function bo(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Ro,bo);ge[t]=new xe(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Ro,bo);ge[t]=new xe(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Ro,bo);ge[t]=new xe(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){ge[e]=new xe(e,1,!1,e.toLowerCase(),null,!1,!1)});ge.xlinkHref=new xe("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){ge[e]=new xe(e,1,!1,e.toLowerCase(),null,!0,!0)});function Do(e,t,r,s){var o=ge.hasOwnProperty(t)?ge[t]:null;(o!==null?o.type!==0:s||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(Ih(t,r,o,s)&&(r=null),s||o===null?Mh(t)&&(r===null?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=r===null?o.type===3?!1:"":r:(t=o.attributeName,s=o.attributeNamespace,r===null?e.removeAttribute(t):(o=o.type,r=o===3||o===4&&r===!0?"":""+r,s?e.setAttributeNS(s,t,r):e.setAttribute(t,r))))}var vt=tc.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Mi=Symbol.for("react.element"),sr=Symbol.for("react.portal"),nr=Symbol.for("react.fragment"),Ao=Symbol.for("react.strict_mode"),On=Symbol.for("react.profiler"),ic=Symbol.for("react.provider"),sc=Symbol.for("react.context"),To=Symbol.for("react.forward_ref"),In=Symbol.for("react.suspense"),Hn=Symbol.for("react.suspense_list"),Bo=Symbol.for("react.memo"),St=Symbol.for("react.lazy");Symbol.for("react.scope");Symbol.for("react.debug_trace_mode");var nc=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden");Symbol.for("react.cache");Symbol.for("react.tracing_marker");var Ql=Symbol.iterator;function Or(e){return e===null||typeof e!="object"?null:(e=Ql&&e[Ql]||e["@@iterator"],typeof e=="function"?e:null)}var ne=Object.assign,dn;function jr(e){if(dn===void 0)try{throw Error()}catch(r){var t=r.stack.trim().match(/\n( *(at )?)/);dn=t&&t[1]||""}return`
`+dn+e}var fn=!1;function _n(e,t){if(!e||fn)return"";fn=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(_){var s=_}Reflect.construct(e,[],t)}else{try{t.call()}catch(_){s=_}e.call(t.prototype)}else{try{throw Error()}catch(_){s=_}e()}}catch(_){if(_&&s&&typeof _.stack=="string"){for(var o=_.stack.split(`
`),i=s.stack.split(`
`),n=o.length-1,a=i.length-1;1<=n&&0<=a&&o[n]!==i[a];)a--;for(;1<=n&&0<=a;n--,a--)if(o[n]!==i[a]){if(n!==1||a!==1)do if(n--,a--,0>a||o[n]!==i[a]){var d=`
`+o[n].replace(" at new "," at ");return e.displayName&&d.includes("<anonymous>")&&(d=d.replace("<anonymous>",e.displayName)),d}while(1<=n&&0<=a);break}}}finally{fn=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?jr(e):""}function Hh(e){switch(e.tag){case 5:return jr(e.type);case 16:return jr("Lazy");case 13:return jr("Suspense");case 19:return jr("SuspenseList");case 0:case 2:case 15:return e=_n(e.type,!1),e;case 11:return e=_n(e.type.render,!1),e;case 1:return e=_n(e.type,!0),e;default:return""}}function Fn(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case nr:return"Fragment";case sr:return"Portal";case On:return"Profiler";case Ao:return"StrictMode";case In:return"Suspense";case Hn:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case sc:return(e.displayName||"Context")+".Consumer";case ic:return(e._context.displayName||"Context")+".Provider";case To:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case Bo:return t=e.displayName||null,t!==null?t:Fn(e.type)||"Memo";case St:t=e._payload,e=e._init;try{return Fn(e(t))}catch{}}return null}function Fh(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Fn(t);case 8:return t===Ao?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function Pt(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function oc(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Nh(e){var t=oc(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),s=""+e[t];if(!e.hasOwnProperty(t)&&typeof r<"u"&&typeof r.get=="function"&&typeof r.set=="function"){var o=r.get,i=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(n){s=""+n,i.call(this,n)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return s},setValue:function(n){s=""+n},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function Oi(e){e._valueTracker||(e._valueTracker=Nh(e))}function lc(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),s="";return e&&(s=oc(e)?e.checked?"true":"false":e.value),e=s,e!==r?(t.setValue(e),!0):!1}function cs(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Nn(e,t){var r=t.checked;return ne({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:r!=null?r:e._wrapperState.initialChecked})}function Zl(e,t){var r=t.defaultValue==null?"":t.defaultValue,s=t.checked!=null?t.checked:t.defaultChecked;r=Pt(t.value!=null?t.value:r),e._wrapperState={initialChecked:s,initialValue:r,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function ac(e,t){t=t.checked,t!=null&&Do(e,"checked",t,!1)}function Un(e,t){ac(e,t);var r=Pt(t.value),s=t.type;if(r!=null)s==="number"?(r===0&&e.value===""||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if(s==="submit"||s==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?zn(e,t.type,r):t.hasOwnProperty("defaultValue")&&zn(e,t.type,Pt(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function Jl(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var s=t.type;if(!(s!=="submit"&&s!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}r=e.name,r!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,r!==""&&(e.name=r)}function zn(e,t,r){(t!=="number"||cs(e.ownerDocument)!==e)&&(r==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}var $r=Array.isArray;function vr(e,t,r,s){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&s&&(e[r].defaultSelected=!0)}else{for(r=""+Pt(r),t=null,o=0;o<e.length;o++){if(e[o].value===r){e[o].selected=!0,s&&(e[o].defaultSelected=!0);return}t!==null||e[o].disabled||(t=e[o])}t!==null&&(t.selected=!0)}}function Wn(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(O(91));return ne({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ea(e,t){var r=t.value;if(r==null){if(r=t.children,t=t.defaultValue,r!=null){if(t!=null)throw Error(O(92));if($r(r)){if(1<r.length)throw Error(O(93));r=r[0]}t=r}t==null&&(t=""),r=t}e._wrapperState={initialValue:Pt(r)}}function cc(e,t){var r=Pt(t.value),s=Pt(t.defaultValue);r!=null&&(r=""+r,r!==e.value&&(e.value=r),t.defaultValue==null&&e.defaultValue!==r&&(e.defaultValue=r)),s!=null&&(e.defaultValue=""+s)}function ta(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function uc(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function jn(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?uc(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var Ii,hc=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,r,s,o){MSApp.execUnsafeLocalFunction(function(){return e(t,r,s,o)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(Ii=Ii||document.createElement("div"),Ii.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ii.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function ii(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&r.nodeType===3){r.nodeValue=t;return}}e.textContent=t}var qr={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Uh=["Webkit","ms","Moz","O"];Object.keys(qr).forEach(function(e){Uh.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),qr[t]=qr[e]})});function dc(e,t,r){return t==null||typeof t=="boolean"||t===""?"":r||typeof t!="number"||t===0||qr.hasOwnProperty(e)&&qr[e]?(""+t).trim():t+"px"}function fc(e,t){e=e.style;for(var r in t)if(t.hasOwnProperty(r)){var s=r.indexOf("--")===0,o=dc(r,t[r],s);r==="float"&&(r="cssFloat"),s?e.setProperty(r,o):e[r]=o}}var zh=ne({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function $n(e,t){if(t){if(zh[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(O(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(O(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(O(61))}if(t.style!=null&&typeof t.style!="object")throw Error(O(62))}}function Kn(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Vn=null;function Po(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var qn=null,gr=null,mr=null;function ra(e){if(e=Ci(e)){if(typeof qn!="function")throw Error(O(280));var t=e.stateNode;t&&(t=Hs(t),qn(e.stateNode,e.type,t))}}function _c(e){gr?mr?mr.push(e):mr=[e]:gr=e}function pc(){if(gr){var e=gr,t=mr;if(mr=gr=null,ra(e),t)for(e=0;e<t.length;e++)ra(t[e])}}function vc(e,t){return e(t)}function gc(){}var pn=!1;function mc(e,t,r){if(pn)return e(t,r);pn=!0;try{return vc(e,t,r)}finally{pn=!1,(gr!==null||mr!==null)&&(gc(),pc())}}function si(e,t){var r=e.stateNode;if(r===null)return null;var s=Hs(r);if(s===null)return null;r=s[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(s=!s.disabled)||(e=e.type,s=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!s;break e;default:e=!1}if(e)return null;if(r&&typeof r!="function")throw Error(O(231,t,typeof r));return r}var Xn=!1;if(dt)try{rr={},Object.defineProperty(rr,"passive",{get:function(){Xn=!0}}),window.addEventListener("test",rr,rr),window.removeEventListener("test",rr,rr)}catch{Xn=!1}var rr;function Wh(e,t,r,s,o,i,n,a,d){var _=Array.prototype.slice.call(arguments,3);try{t.apply(r,_)}catch(S){this.onError(S)}}var Xr=!1,us=null,hs=!1,Gn=null,jh={onError:function(e){Xr=!0,us=e}};function $h(e,t,r,s,o,i,n,a,d){Xr=!1,us=null,Wh.apply(jh,arguments)}function Kh(e,t,r,s,o,i,n,a,d){if($h.apply(this,arguments),Xr){if(Xr){var _=us;Xr=!1,us=null}else throw Error(O(198));hs||(hs=!0,Gn=_)}}function Jt(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,(t.flags&4098)!==0&&(r=t.return),e=t.return;while(e)}return t.tag===3?r:null}function Sc(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function ia(e){if(Jt(e)!==e)throw Error(O(188))}function Vh(e){var t=e.alternate;if(!t){if(t=Jt(e),t===null)throw Error(O(188));return t!==e?null:e}for(var r=e,s=t;;){var o=r.return;if(o===null)break;var i=o.alternate;if(i===null){if(s=o.return,s!==null){r=s;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===r)return ia(o),e;if(i===s)return ia(o),t;i=i.sibling}throw Error(O(188))}if(r.return!==s.return)r=o,s=i;else{for(var n=!1,a=o.child;a;){if(a===r){n=!0,r=o,s=i;break}if(a===s){n=!0,s=o,r=i;break}a=a.sibling}if(!n){for(a=i.child;a;){if(a===r){n=!0,r=i,s=o;break}if(a===s){n=!0,s=i,r=o;break}a=a.sibling}if(!n)throw Error(O(189))}}if(r.alternate!==s)throw Error(O(190))}if(r.tag!==3)throw Error(O(188));return r.stateNode.current===r?e:t}function yc(e){return e=Vh(e),e!==null?Cc(e):null}function Cc(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=Cc(e);if(t!==null)return t;e=e.sibling}return null}var wc=Oe.unstable_scheduleCallback,sa=Oe.unstable_cancelCallback,qh=Oe.unstable_shouldYield,Xh=Oe.unstable_requestPaint,ae=Oe.unstable_now,Gh=Oe.unstable_getCurrentPriorityLevel,Mo=Oe.unstable_ImmediatePriority,Ec=Oe.unstable_UserBlockingPriority,ds=Oe.unstable_NormalPriority,Yh=Oe.unstable_LowPriority,kc=Oe.unstable_IdlePriority,Ps=null,nt=null;function Qh(e){if(nt&&typeof nt.onCommitFiberRoot=="function")try{nt.onCommitFiberRoot(Ps,e,void 0,(e.current.flags&128)===128)}catch{}}var Ze=Math.clz32?Math.clz32:ed,Zh=Math.log,Jh=Math.LN2;function ed(e){return e>>>=0,e===0?32:31-(Zh(e)/Jh|0)|0}var Hi=64,Fi=4194304;function Kr(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function fs(e,t){var r=e.pendingLanes;if(r===0)return 0;var s=0,o=e.suspendedLanes,i=e.pingedLanes,n=r&268435455;if(n!==0){var a=n&~o;a!==0?s=Kr(a):(i&=n,i!==0&&(s=Kr(i)))}else n=r&~o,n!==0?s=Kr(n):i!==0&&(s=Kr(i));if(s===0)return 0;if(t!==0&&t!==s&&(t&o)===0&&(o=s&-s,i=t&-t,o>=i||o===16&&(i&4194240)!==0))return t;if((s&4)!==0&&(s|=r&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=s;0<t;)r=31-Ze(t),o=1<<r,s|=e[r],t&=~o;return s}function td(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function rd(e,t){for(var r=e.suspendedLanes,s=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var n=31-Ze(i),a=1<<n,d=o[n];d===-1?((a&r)===0||(a&s)!==0)&&(o[n]=td(a,t)):d<=t&&(e.expiredLanes|=a),i&=~a}}function Yn(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function Lc(){var e=Hi;return Hi<<=1,(Hi&4194240)===0&&(Hi=64),e}function vn(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function Si(e,t,r){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-Ze(t),e[t]=r}function id(e,t){var r=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var s=e.eventTimes;for(e=e.expirationTimes;0<r;){var o=31-Ze(r),i=1<<o;t[o]=0,s[o]=-1,e[o]=-1,r&=~i}}function Oo(e,t){var r=e.entangledLanes|=t;for(e=e.entanglements;r;){var s=31-Ze(r),o=1<<s;o&t|e[s]&t&&(e[s]|=t),r&=~o}}var Q=0;function xc(e){return e&=-e,1<e?4<e?(e&268435455)!==0?16:536870912:4:1}var Rc,Io,bc,Dc,Ac,Qn=!1,Ni=[],Lt=null,xt=null,Rt=null,ni=new Map,oi=new Map,Ct=[],sd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function na(e,t){switch(e){case"focusin":case"focusout":Lt=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":Rt=null;break;case"pointerover":case"pointerout":ni.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":oi.delete(t.pointerId)}}function Ir(e,t,r,s,o,i){return e===null||e.nativeEvent!==i?(e={blockedOn:t,domEventName:r,eventSystemFlags:s,nativeEvent:i,targetContainers:[o]},t!==null&&(t=Ci(t),t!==null&&Io(t)),e):(e.eventSystemFlags|=s,t=e.targetContainers,o!==null&&t.indexOf(o)===-1&&t.push(o),e)}function nd(e,t,r,s,o){switch(t){case"focusin":return Lt=Ir(Lt,e,t,r,s,o),!0;case"dragenter":return xt=Ir(xt,e,t,r,s,o),!0;case"mouseover":return Rt=Ir(Rt,e,t,r,s,o),!0;case"pointerover":var i=o.pointerId;return ni.set(i,Ir(ni.get(i)||null,e,t,r,s,o)),!0;case"gotpointercapture":return i=o.pointerId,oi.set(i,Ir(oi.get(i)||null,e,t,r,s,o)),!0}return!1}function Tc(e){var t=Wt(e.target);if(t!==null){var r=Jt(t);if(r!==null){if(t=r.tag,t===13){if(t=Sc(r),t!==null){e.blockedOn=t,Ac(e.priority,function(){bc(r)});return}}else if(t===3&&r.stateNode.current.memoizedState.isDehydrated){e.blockedOn=r.tag===3?r.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Ji(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var r=Zn(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(r===null){r=e.nativeEvent;var s=new r.constructor(r.type,r);Vn=s,r.target.dispatchEvent(s),Vn=null}else return t=Ci(r),t!==null&&Io(t),e.blockedOn=r,!1;t.shift()}return!0}function oa(e,t,r){Ji(e)&&r.delete(t)}function od(){Qn=!1,Lt!==null&&Ji(Lt)&&(Lt=null),xt!==null&&Ji(xt)&&(xt=null),Rt!==null&&Ji(Rt)&&(Rt=null),ni.forEach(oa),oi.forEach(oa)}function Hr(e,t){e.blockedOn===t&&(e.blockedOn=null,Qn||(Qn=!0,Oe.unstable_scheduleCallback(Oe.unstable_NormalPriority,od)))}function li(e){function t(o){return Hr(o,e)}if(0<Ni.length){Hr(Ni[0],e);for(var r=1;r<Ni.length;r++){var s=Ni[r];s.blockedOn===e&&(s.blockedOn=null)}}for(Lt!==null&&Hr(Lt,e),xt!==null&&Hr(xt,e),Rt!==null&&Hr(Rt,e),ni.forEach(t),oi.forEach(t),r=0;r<Ct.length;r++)s=Ct[r],s.blockedOn===e&&(s.blockedOn=null);for(;0<Ct.length&&(r=Ct[0],r.blockedOn===null);)Tc(r),r.blockedOn===null&&Ct.shift()}var Sr=vt.ReactCurrentBatchConfig,_s=!0;function ld(e,t,r,s){var o=Q,i=Sr.transition;Sr.transition=null;try{Q=1,Ho(e,t,r,s)}finally{Q=o,Sr.transition=i}}function ad(e,t,r,s){var o=Q,i=Sr.transition;Sr.transition=null;try{Q=4,Ho(e,t,r,s)}finally{Q=o,Sr.transition=i}}function Ho(e,t,r,s){if(_s){var o=Zn(e,t,r,s);if(o===null)En(e,t,s,ps,r),na(e,s);else if(nd(o,e,t,r,s))s.stopPropagation();else if(na(e,s),t&4&&-1<sd.indexOf(e)){for(;o!==null;){var i=Ci(o);if(i!==null&&Rc(i),i=Zn(e,t,r,s),i===null&&En(e,t,s,ps,r),i===o)break;o=i}o!==null&&s.stopPropagation()}else En(e,t,s,null,r)}}var ps=null;function Zn(e,t,r,s){if(ps=null,e=Po(s),e=Wt(e),e!==null)if(t=Jt(e),t===null)e=null;else if(r=t.tag,r===13){if(e=Sc(t),e!==null)return e;e=null}else if(r===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return ps=e,null}function Bc(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Gh()){case Mo:return 1;case Ec:return 4;case ds:case Yh:return 16;case kc:return 536870912;default:return 16}default:return 16}}var Et=null,Fo=null,es=null;function Pc(){if(es)return es;var e,t=Fo,r=t.length,s,o="value"in Et?Et.value:Et.textContent,i=o.length;for(e=0;e<r&&t[e]===o[e];e++);var n=r-e;for(s=1;s<=n&&t[r-s]===o[i-s];s++);return es=o.slice(e,1<s?1-s:void 0)}function ts(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function Ui(){return!0}function la(){return!1}function Ie(e){function t(r,s,o,i,n){this._reactName=r,this._targetInst=o,this.type=s,this.nativeEvent=i,this.target=n,this.currentTarget=null;for(var a in e)e.hasOwnProperty(a)&&(r=e[a],this[a]=r?r(i):i[a]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?Ui:la,this.isPropagationStopped=la,this}return ne(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var r=this.nativeEvent;r&&(r.preventDefault?r.preventDefault():typeof r.returnValue!="unknown"&&(r.returnValue=!1),this.isDefaultPrevented=Ui)},stopPropagation:function(){var r=this.nativeEvent;r&&(r.stopPropagation?r.stopPropagation():typeof r.cancelBubble!="unknown"&&(r.cancelBubble=!0),this.isPropagationStopped=Ui)},persist:function(){},isPersistent:Ui}),t}var Dr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},No=Ie(Dr),yi=ne({},Dr,{view:0,detail:0}),cd=Ie(yi),gn,mn,Fr,Ms=ne({},yi,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Uo,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Fr&&(Fr&&e.type==="mousemove"?(gn=e.screenX-Fr.screenX,mn=e.screenY-Fr.screenY):mn=gn=0,Fr=e),gn)},movementY:function(e){return"movementY"in e?e.movementY:mn}}),aa=Ie(Ms),ud=ne({},Ms,{dataTransfer:0}),hd=Ie(ud),dd=ne({},yi,{relatedTarget:0}),Sn=Ie(dd),fd=ne({},Dr,{animationName:0,elapsedTime:0,pseudoElement:0}),_d=Ie(fd),pd=ne({},Dr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),vd=Ie(pd),gd=ne({},Dr,{data:0}),ca=Ie(gd),md={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},yd={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cd(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=yd[e])?!!t[e]:!1}function Uo(){return Cd}var wd=ne({},yi,{key:function(e){if(e.key){var t=md[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=ts(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?Sd[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Uo,charCode:function(e){return e.type==="keypress"?ts(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?ts(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),Ed=Ie(wd),kd=ne({},Ms,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),ua=Ie(kd),Ld=ne({},yi,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Uo}),xd=Ie(Ld),Rd=ne({},Dr,{propertyName:0,elapsedTime:0,pseudoElement:0}),bd=Ie(Rd),Dd=ne({},Ms,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ad=Ie(Dd),Td=[9,13,27,32],zo=dt&&"CompositionEvent"in window,Gr=null;dt&&"documentMode"in document&&(Gr=document.documentMode);var Bd=dt&&"TextEvent"in window&&!Gr,Mc=dt&&(!zo||Gr&&8<Gr&&11>=Gr),ha=String.fromCharCode(32),da=!1;function Oc(e,t){switch(e){case"keyup":return Td.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ic(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var or=!1;function Pd(e,t){switch(e){case"compositionend":return Ic(t);case"keypress":return t.which!==32?null:(da=!0,ha);case"textInput":return e=t.data,e===ha&&da?null:e;default:return null}}function Md(e,t){if(or)return e==="compositionend"||!zo&&Oc(e,t)?(e=Pc(),es=Fo=Et=null,or=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mc&&t.locale!=="ko"?null:t.data;default:return null}}var Od={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function fa(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!Od[e.type]:t==="textarea"}function Hc(e,t,r,s){_c(s),t=vs(t,"onChange"),0<t.length&&(r=new No("onChange","change",null,r,s),e.push({event:r,listeners:t}))}var Yr=null,ai=null;function Id(e){Xc(e,0)}function Os(e){var t=cr(e);if(lc(t))return e}function Hd(e,t){if(e==="change")return t}var Fc=!1;dt&&(dt?(Wi="oninput"in document,Wi||(yn=document.createElement("div"),yn.setAttribute("oninput","return;"),Wi=typeof yn.oninput=="function"),zi=Wi):zi=!1,Fc=zi&&(!document.documentMode||9<document.documentMode));var zi,Wi,yn;function _a(){Yr&&(Yr.detachEvent("onpropertychange",Nc),ai=Yr=null)}function Nc(e){if(e.propertyName==="value"&&Os(ai)){var t=[];Hc(t,ai,e,Po(e)),mc(Id,t)}}function Fd(e,t,r){e==="focusin"?(_a(),Yr=t,ai=r,Yr.attachEvent("onpropertychange",Nc)):e==="focusout"&&_a()}function Nd(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Os(ai)}function Ud(e,t){if(e==="click")return Os(t)}function zd(e,t){if(e==="input"||e==="change")return Os(t)}function Wd(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var et=typeof Object.is=="function"?Object.is:Wd;function ci(e,t){if(et(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var r=Object.keys(e),s=Object.keys(t);if(r.length!==s.length)return!1;for(s=0;s<r.length;s++){var o=r[s];if(!Mn.call(t,o)||!et(e[o],t[o]))return!1}return!0}function pa(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function va(e,t){var r=pa(e);e=0;for(var s;r;){if(r.nodeType===3){if(s=e+r.textContent.length,e<=t&&s>=t)return{node:r,offset:t-e};e=s}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=pa(r)}}function Uc(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?Uc(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function zc(){for(var e=window,t=cs();t instanceof e.HTMLIFrameElement;){try{var r=typeof t.contentWindow.location.href=="string"}catch{r=!1}if(r)e=t.contentWindow;else break;t=cs(e.document)}return t}function Wo(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function jd(e){var t=zc(),r=e.focusedElem,s=e.selectionRange;if(t!==r&&r&&r.ownerDocument&&Uc(r.ownerDocument.documentElement,r)){if(s!==null&&Wo(r)){if(t=s.start,e=s.end,e===void 0&&(e=t),"selectionStart"in r)r.selectionStart=t,r.selectionEnd=Math.min(e,r.value.length);else if(e=(t=r.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var o=r.textContent.length,i=Math.min(s.start,o);s=s.end===void 0?i:Math.min(s.end,o),!e.extend&&i>s&&(o=s,s=i,i=o),o=va(r,i);var n=va(r,s);o&&n&&(e.rangeCount!==1||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==n.node||e.focusOffset!==n.offset)&&(t=t.createRange(),t.setStart(o.node,o.offset),e.removeAllRanges(),i>s?(e.addRange(t),e.extend(n.node,n.offset)):(t.setEnd(n.node,n.offset),e.addRange(t)))}}for(t=[],e=r;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof r.focus=="function"&&r.focus(),r=0;r<t.length;r++)e=t[r],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var $d=dt&&"documentMode"in document&&11>=document.documentMode,lr=null,Jn=null,Qr=null,eo=!1;function ga(e,t,r){var s=r.window===r?r.document:r.nodeType===9?r:r.ownerDocument;eo||lr==null||lr!==cs(s)||(s=lr,"selectionStart"in s&&Wo(s)?s={start:s.selectionStart,end:s.selectionEnd}:(s=(s.ownerDocument&&s.ownerDocument.defaultView||window).getSelection(),s={anchorNode:s.anchorNode,anchorOffset:s.anchorOffset,focusNode:s.focusNode,focusOffset:s.focusOffset}),Qr&&ci(Qr,s)||(Qr=s,s=vs(Jn,"onSelect"),0<s.length&&(t=new No("onSelect","select",null,t,r),e.push({event:t,listeners:s}),t.target=lr)))}function ji(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var ar={animationend:ji("Animation","AnimationEnd"),animationiteration:ji("Animation","AnimationIteration"),animationstart:ji("Animation","AnimationStart"),transitionend:ji("Transition","TransitionEnd")},Cn={},Wc={};dt&&(Wc=document.createElement("div").style,"AnimationEvent"in window||(delete ar.animationend.animation,delete ar.animationiteration.animation,delete ar.animationstart.animation),"TransitionEvent"in window||delete ar.transitionend.transition);function Is(e){if(Cn[e])return Cn[e];if(!ar[e])return e;var t=ar[e],r;for(r in t)if(t.hasOwnProperty(r)&&r in Wc)return Cn[e]=t[r];return e}var jc=Is("animationend"),$c=Is("animationiteration"),Kc=Is("animationstart"),Vc=Is("transitionend"),qc=new Map,ma="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ot(e,t){qc.set(e,t),Zt(t,[e])}for($i=0;$i<ma.length;$i++)Ki=ma[$i],Sa=Ki.toLowerCase(),ya=Ki[0].toUpperCase()+Ki.slice(1),Ot(Sa,"on"+ya);var Ki,Sa,ya,$i;Ot(jc,"onAnimationEnd");Ot($c,"onAnimationIteration");Ot(Kc,"onAnimationStart");Ot("dblclick","onDoubleClick");Ot("focusin","onFocus");Ot("focusout","onBlur");Ot(Vc,"onTransitionEnd");wr("onMouseEnter",["mouseout","mouseover"]);wr("onMouseLeave",["mouseout","mouseover"]);wr("onPointerEnter",["pointerout","pointerover"]);wr("onPointerLeave",["pointerout","pointerover"]);Zt("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));Zt("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));Zt("onBeforeInput",["compositionend","keypress","textInput","paste"]);Zt("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));Zt("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));Zt("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Vr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Kd=new Set("cancel close invalid load scroll toggle".split(" ").concat(Vr));function Ca(e,t,r){var s=e.type||"unknown-event";e.currentTarget=r,Kh(s,t,void 0,e),e.currentTarget=null}function Xc(e,t){t=(t&4)!==0;for(var r=0;r<e.length;r++){var s=e[r],o=s.event;s=s.listeners;e:{var i=void 0;if(t)for(var n=s.length-1;0<=n;n--){var a=s[n],d=a.instance,_=a.currentTarget;if(a=a.listener,d!==i&&o.isPropagationStopped())break e;Ca(o,a,_),i=d}else for(n=0;n<s.length;n++){if(a=s[n],d=a.instance,_=a.currentTarget,a=a.listener,d!==i&&o.isPropagationStopped())break e;Ca(o,a,_),i=d}}}if(hs)throw e=Gn,hs=!1,Gn=null,e}function ee(e,t){var r=t[no];r===void 0&&(r=t[no]=new Set);var s=e+"__bubble";r.has(s)||(Gc(t,e,2,!1),r.add(s))}function wn(e,t,r){var s=0;t&&(s|=4),Gc(r,e,s,t)}var Vi="_reactListening"+Math.random().toString(36).slice(2);function ui(e){if(!e[Vi]){e[Vi]=!0,rc.forEach(function(r){r!=="selectionchange"&&(Kd.has(r)||wn(r,!1,e),wn(r,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Vi]||(t[Vi]=!0,wn("selectionchange",!1,t))}}function Gc(e,t,r,s){switch(Bc(t)){case 1:var o=ld;break;case 4:o=ad;break;default:o=Ho}r=o.bind(null,t,r,e),o=void 0,!Xn||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(o=!0),s?o!==void 0?e.addEventListener(t,r,{capture:!0,passive:o}):e.addEventListener(t,r,!0):o!==void 0?e.addEventListener(t,r,{passive:o}):e.addEventListener(t,r,!1)}function En(e,t,r,s,o){var i=s;if((t&1)===0&&(t&2)===0&&s!==null)e:for(;;){if(s===null)return;var n=s.tag;if(n===3||n===4){var a=s.stateNode.containerInfo;if(a===o||a.nodeType===8&&a.parentNode===o)break;if(n===4)for(n=s.return;n!==null;){var d=n.tag;if((d===3||d===4)&&(d=n.stateNode.containerInfo,d===o||d.nodeType===8&&d.parentNode===o))return;n=n.return}for(;a!==null;){if(n=Wt(a),n===null)return;if(d=n.tag,d===5||d===6){s=i=n;continue e}a=a.parentNode}}s=s.return}mc(function(){var _=i,S=Po(r),m=[];e:{var v=qc.get(e);if(v!==void 0){var p=No,c=e;switch(e){case"keypress":if(ts(r)===0)break e;case"keydown":case"keyup":p=Ed;break;case"focusin":c="focus",p=Sn;break;case"focusout":c="blur",p=Sn;break;case"beforeblur":case"afterblur":p=Sn;break;case"click":if(r.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":p=aa;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":p=hd;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":p=xd;break;case jc:case $c:case Kc:p=_d;break;case Vc:p=bd;break;case"scroll":p=cd;break;case"wheel":p=Ad;break;case"copy":case"cut":case"paste":p=vd;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":p=ua}var h=(t&4)!==0,u=!h&&e==="scroll",l=h?v!==null?v+"Capture":null:v;h=[];for(var f=_,g;f!==null;){g=f;var C=g.stateNode;if(g.tag===5&&C!==null&&(g=C,l!==null&&(C=si(f,l),C!=null&&h.push(hi(f,C,g)))),u)break;f=f.return}0<h.length&&(v=new p(v,c,null,r,S),m.push({event:v,listeners:h}))}}if((t&7)===0){e:{if(v=e==="mouseover"||e==="pointerover",p=e==="mouseout"||e==="pointerout",v&&r!==Vn&&(c=r.relatedTarget||r.fromElement)&&(Wt(c)||c[ft]))break e;if((p||v)&&(v=S.window===S?S:(v=S.ownerDocument)?v.defaultView||v.parentWindow:window,p?(c=r.relatedTarget||r.toElement,p=_,c=c?Wt(c):null,c!==null&&(u=Jt(c),c!==u||c.tag!==5&&c.tag!==6)&&(c=null)):(p=null,c=_),p!==c)){if(h=aa,C="onMouseLeave",l="onMouseEnter",f="mouse",(e==="pointerout"||e==="pointerover")&&(h=ua,C="onPointerLeave",l="onPointerEnter",f="pointer"),u=p==null?v:cr(p),g=c==null?v:cr(c),v=new h(C,f+"leave",p,r,S),v.target=u,v.relatedTarget=g,C=null,Wt(S)===_&&(h=new h(l,f+"enter",c,r,S),h.target=g,h.relatedTarget=u,C=h),u=C,p&&c)t:{for(h=p,l=c,f=0,g=h;g;g=ir(g))f++;for(g=0,C=l;C;C=ir(C))g++;for(;0<f-g;)h=ir(h),f--;for(;0<g-f;)l=ir(l),g--;for(;f--;){if(h===l||l!==null&&h===l.alternate)break t;h=ir(h),l=ir(l)}h=null}else h=null;p!==null&&wa(m,v,p,h,!1),c!==null&&u!==null&&wa(m,u,c,h,!0)}}e:{if(v=_?cr(_):window,p=v.nodeName&&v.nodeName.toLowerCase(),p==="select"||p==="input"&&v.type==="file")var k=Hd;else if(fa(v))if(Fc)k=zd;else{k=Nd;var y=Fd}else(p=v.nodeName)&&p.toLowerCase()==="input"&&(v.type==="checkbox"||v.type==="radio")&&(k=Ud);if(k&&(k=k(e,_))){Hc(m,k,r,S);break e}y&&y(e,v,_),e==="focusout"&&(y=v._wrapperState)&&y.controlled&&v.type==="number"&&zn(v,"number",v.value)}switch(y=_?cr(_):window,e){case"focusin":(fa(y)||y.contentEditable==="true")&&(lr=y,Jn=_,Qr=null);break;case"focusout":Qr=Jn=lr=null;break;case"mousedown":eo=!0;break;case"contextmenu":case"mouseup":case"dragend":eo=!1,ga(m,r,S);break;case"selectionchange":if($d)break;case"keydown":case"keyup":ga(m,r,S)}var E;if(zo)e:{switch(e){case"compositionstart":var x="onCompositionStart";break e;case"compositionend":x="onCompositionEnd";break e;case"compositionupdate":x="onCompositionUpdate";break e}x=void 0}else or?Oc(e,r)&&(x="onCompositionEnd"):e==="keydown"&&r.keyCode===229&&(x="onCompositionStart");x&&(Mc&&r.locale!=="ko"&&(or||x!=="onCompositionStart"?x==="onCompositionEnd"&&or&&(E=Pc()):(Et=S,Fo="value"in Et?Et.value:Et.textContent,or=!0)),y=vs(_,x),0<y.length&&(x=new ca(x,e,null,r,S),m.push({event:x,listeners:y}),E?x.data=E:(E=Ic(r),E!==null&&(x.data=E)))),(E=Bd?Pd(e,r):Md(e,r))&&(_=vs(_,"onBeforeInput"),0<_.length&&(S=new ca("onBeforeInput","beforeinput",null,r,S),m.push({event:S,listeners:_}),S.data=E))}Xc(m,t)})}function hi(e,t,r){return{instance:e,listener:t,currentTarget:r}}function vs(e,t){for(var r=t+"Capture",s=[];e!==null;){var o=e,i=o.stateNode;o.tag===5&&i!==null&&(o=i,i=si(e,r),i!=null&&s.unshift(hi(e,i,o)),i=si(e,t),i!=null&&s.push(hi(e,i,o))),e=e.return}return s}function ir(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function wa(e,t,r,s,o){for(var i=t._reactName,n=[];r!==null&&r!==s;){var a=r,d=a.alternate,_=a.stateNode;if(d!==null&&d===s)break;a.tag===5&&_!==null&&(a=_,o?(d=si(r,i),d!=null&&n.unshift(hi(r,d,a))):o||(d=si(r,i),d!=null&&n.push(hi(r,d,a)))),r=r.return}n.length!==0&&e.push({event:t,listeners:n})}var Vd=/\r\n?/g,qd=/\u0000|\uFFFD/g;function Ea(e){return(typeof e=="string"?e:""+e).replace(Vd,`
`).replace(qd,"")}function qi(e,t,r){if(t=Ea(t),Ea(e)!==t&&r)throw Error(O(425))}function gs(){}var to=null,ro=null;function io(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var so=typeof setTimeout=="function"?setTimeout:void 0,Xd=typeof clearTimeout=="function"?clearTimeout:void 0,ka=typeof Promise=="function"?Promise:void 0,Gd=typeof queueMicrotask=="function"?queueMicrotask:typeof ka<"u"?function(e){return ka.resolve(null).then(e).catch(Yd)}:so;function Yd(e){setTimeout(function(){throw e})}function kn(e,t){var r=t,s=0;do{var o=r.nextSibling;if(e.removeChild(r),o&&o.nodeType===8)if(r=o.data,r==="/$"){if(s===0){e.removeChild(o),li(t);return}s--}else r!=="$"&&r!=="$?"&&r!=="$!"||s++;r=o}while(r);li(t)}function bt(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function La(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var r=e.data;if(r==="$"||r==="$!"||r==="$?"){if(t===0)return e;t--}else r==="/$"&&t++}e=e.previousSibling}return null}var Ar=Math.random().toString(36).slice(2),st="__reactFiber$"+Ar,di="__reactProps$"+Ar,ft="__reactContainer$"+Ar,no="__reactEvents$"+Ar,Qd="__reactListeners$"+Ar,Zd="__reactHandles$"+Ar;function Wt(e){var t=e[st];if(t)return t;for(var r=e.parentNode;r;){if(t=r[ft]||r[st]){if(r=t.alternate,t.child!==null||r!==null&&r.child!==null)for(e=La(e);e!==null;){if(r=e[st])return r;e=La(e)}return t}e=r,r=e.parentNode}return null}function Ci(e){return e=e[st]||e[ft],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function cr(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(O(33))}function Hs(e){return e[di]||null}var oo=[],ur=-1;function It(e){return{current:e}}function te(e){0>ur||(e.current=oo[ur],oo[ur]=null,ur--)}function J(e,t){ur++,oo[ur]=e.current,e.current=t}var Mt={},we=It(Mt),De=It(!1),qt=Mt;function Er(e,t){var r=e.type.contextTypes;if(!r)return Mt;var s=e.stateNode;if(s&&s.__reactInternalMemoizedUnmaskedChildContext===t)return s.__reactInternalMemoizedMaskedChildContext;var o={},i;for(i in r)o[i]=t[i];return s&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ae(e){return e=e.childContextTypes,e!=null}function ms(){te(De),te(we)}function xa(e,t,r){if(we.current!==Mt)throw Error(O(168));J(we,t),J(De,r)}function Yc(e,t,r){var s=e.stateNode;if(t=t.childContextTypes,typeof s.getChildContext!="function")return r;s=s.getChildContext();for(var o in s)if(!(o in t))throw Error(O(108,Fh(e)||"Unknown",o));return ne({},r,s)}function Ss(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Mt,qt=we.current,J(we,e),J(De,De.current),!0}function Ra(e,t,r){var s=e.stateNode;if(!s)throw Error(O(169));r?(e=Yc(e,t,qt),s.__reactInternalMemoizedMergedChildContext=e,te(De),te(we),J(we,e)):te(De),J(De,r)}var at=null,Fs=!1,Ln=!1;function Qc(e){at===null?at=[e]:at.push(e)}function Jd(e){Fs=!0,Qc(e)}function Ht(){if(!Ln&&at!==null){Ln=!0;var e=0,t=Q;try{var r=at;for(Q=1;e<r.length;e++){var s=r[e];do s=s(!0);while(s!==null)}at=null,Fs=!1}catch(o){throw at!==null&&(at=at.slice(e+1)),wc(Mo,Ht),o}finally{Q=t,Ln=!1}}return null}var hr=[],dr=0,ys=null,Cs=0,Ne=[],Ue=0,Xt=null,ct=1,ut="";function Ut(e,t){hr[dr++]=Cs,hr[dr++]=ys,ys=e,Cs=t}function Zc(e,t,r){Ne[Ue++]=ct,Ne[Ue++]=ut,Ne[Ue++]=Xt,Xt=e;var s=ct;e=ut;var o=32-Ze(s)-1;s&=~(1<<o),r+=1;var i=32-Ze(t)+o;if(30<i){var n=o-o%5;i=(s&(1<<n)-1).toString(32),s>>=n,o-=n,ct=1<<32-Ze(t)+o|r<<o|s,ut=i+e}else ct=1<<i|r<<o|s,ut=e}function jo(e){e.return!==null&&(Ut(e,1),Zc(e,1,0))}function $o(e){for(;e===ys;)ys=hr[--dr],hr[dr]=null,Cs=hr[--dr],hr[dr]=null;for(;e===Xt;)Xt=Ne[--Ue],Ne[Ue]=null,ut=Ne[--Ue],Ne[Ue]=null,ct=Ne[--Ue],Ne[Ue]=null}var Me=null,Pe=null,re=!1,Qe=null;function Jc(e,t){var r=ze(5,null,null,0);r.elementType="DELETED",r.stateNode=t,r.return=e,t=e.deletions,t===null?(e.deletions=[r],e.flags|=16):t.push(r)}function ba(e,t){switch(e.tag){case 5:var r=e.type;return t=t.nodeType!==1||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,Me=e,Pe=bt(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,Me=e,Pe=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(r=Xt!==null?{id:ct,overflow:ut}:null,e.memoizedState={dehydrated:t,treeContext:r,retryLane:1073741824},r=ze(18,null,null,0),r.stateNode=t,r.return=e,e.child=r,Me=e,Pe=null,!0):!1;default:return!1}}function lo(e){return(e.mode&1)!==0&&(e.flags&128)===0}function ao(e){if(re){var t=Pe;if(t){var r=t;if(!ba(e,t)){if(lo(e))throw Error(O(418));t=bt(r.nextSibling);var s=Me;t&&ba(e,t)?Jc(s,r):(e.flags=e.flags&-4097|2,re=!1,Me=e)}}else{if(lo(e))throw Error(O(418));e.flags=e.flags&-4097|2,re=!1,Me=e}}}function Da(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;Me=e}function Xi(e){if(e!==Me)return!1;if(!re)return Da(e),re=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!io(e.type,e.memoizedProps)),t&&(t=Pe)){if(lo(e))throw eu(),Error(O(418));for(;t;)Jc(e,t),t=bt(t.nextSibling)}if(Da(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(O(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var r=e.data;if(r==="/$"){if(t===0){Pe=bt(e.nextSibling);break e}t--}else r!=="$"&&r!=="$!"&&r!=="$?"||t++}e=e.nextSibling}Pe=null}}else Pe=Me?bt(e.stateNode.nextSibling):null;return!0}function eu(){for(var e=Pe;e;)e=bt(e.nextSibling)}function kr(){Pe=Me=null,re=!1}function Ko(e){Qe===null?Qe=[e]:Qe.push(e)}var ef=vt.ReactCurrentBatchConfig;function Ge(e,t){if(e&&e.defaultProps){t=ne({},t),e=e.defaultProps;for(var r in e)t[r]===void 0&&(t[r]=e[r]);return t}return t}var ws=It(null),Es=null,fr=null,Vo=null;function qo(){Vo=fr=Es=null}function Xo(e){var t=ws.current;te(ws),e._currentValue=t}function co(e,t,r){for(;e!==null;){var s=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,s!==null&&(s.childLanes|=t)):s!==null&&(s.childLanes&t)!==t&&(s.childLanes|=t),e===r)break;e=e.return}}function yr(e,t){Es=e,Vo=fr=null,e=e.dependencies,e!==null&&e.firstContext!==null&&((e.lanes&t)!==0&&(be=!0),e.firstContext=null)}function je(e){var t=e._currentValue;if(Vo!==e)if(e={context:e,memoizedValue:t,next:null},fr===null){if(Es===null)throw Error(O(308));fr=e,Es.dependencies={lanes:0,firstContext:e}}else fr=fr.next=e;return t}var jt=null;function Go(e){jt===null?jt=[e]:jt.push(e)}function tu(e,t,r,s){var o=t.interleaved;return o===null?(r.next=r,Go(t)):(r.next=o.next,o.next=r),t.interleaved=r,_t(e,s)}function _t(e,t){e.lanes|=t;var r=e.alternate;for(r!==null&&(r.lanes|=t),r=e,e=e.return;e!==null;)e.childLanes|=t,r=e.alternate,r!==null&&(r.childLanes|=t),r=e,e=e.return;return r.tag===3?r.stateNode:null}var yt=!1;function Yo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function ru(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ht(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Dt(e,t,r){var s=e.updateQueue;if(s===null)return null;if(s=s.shared,(Y&2)!==0){var o=s.pending;return o===null?t.next=t:(t.next=o.next,o.next=t),s.pending=t,_t(e,r)}return o=s.interleaved,o===null?(t.next=t,Go(s)):(t.next=o.next,o.next=t),s.interleaved=t,_t(e,r)}function rs(e,t,r){if(t=t.updateQueue,t!==null&&(t=t.shared,(r&4194240)!==0)){var s=t.lanes;s&=e.pendingLanes,r|=s,t.lanes=r,Oo(e,r)}}function Aa(e,t){var r=e.updateQueue,s=e.alternate;if(s!==null&&(s=s.updateQueue,r===s)){var o=null,i=null;if(r=r.firstBaseUpdate,r!==null){do{var n={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};i===null?o=i=n:i=i.next=n,r=r.next}while(r!==null);i===null?o=i=t:i=i.next=t}else o=i=t;r={baseState:s.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:s.shared,effects:s.effects},e.updateQueue=r;return}e=r.lastBaseUpdate,e===null?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function ks(e,t,r,s){var o=e.updateQueue;yt=!1;var i=o.firstBaseUpdate,n=o.lastBaseUpdate,a=o.shared.pending;if(a!==null){o.shared.pending=null;var d=a,_=d.next;d.next=null,n===null?i=_:n.next=_,n=d;var S=e.alternate;S!==null&&(S=S.updateQueue,a=S.lastBaseUpdate,a!==n&&(a===null?S.firstBaseUpdate=_:a.next=_,S.lastBaseUpdate=d))}if(i!==null){var m=o.baseState;n=0,S=_=d=null,a=i;do{var v=a.lane,p=a.eventTime;if((s&v)===v){S!==null&&(S=S.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var c=e,h=a;switch(v=t,p=r,h.tag){case 1:if(c=h.payload,typeof c=="function"){m=c.call(p,m,v);break e}m=c;break e;case 3:c.flags=c.flags&-65537|128;case 0:if(c=h.payload,v=typeof c=="function"?c.call(p,m,v):c,v==null)break e;m=ne({},m,v);break e;case 2:yt=!0}}a.callback!==null&&a.lane!==0&&(e.flags|=64,v=o.effects,v===null?o.effects=[a]:v.push(a))}else p={eventTime:p,lane:v,tag:a.tag,payload:a.payload,callback:a.callback,next:null},S===null?(_=S=p,d=m):S=S.next=p,n|=v;if(a=a.next,a===null){if(a=o.shared.pending,a===null)break;v=a,a=v.next,v.next=null,o.lastBaseUpdate=v,o.shared.pending=null}}while(1);if(S===null&&(d=m),o.baseState=d,o.firstBaseUpdate=_,o.lastBaseUpdate=S,t=o.shared.interleaved,t!==null){o=t;do n|=o.lane,o=o.next;while(o!==t)}else i===null&&(o.shared.lanes=0);Yt|=n,e.lanes=n,e.memoizedState=m}}function Ta(e,t,r){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var s=e[t],o=s.callback;if(o!==null){if(s.callback=null,s=r,typeof o!="function")throw Error(O(191,o));o.call(s)}}}var iu=new tc.Component().refs;function uo(e,t,r,s){t=e.memoizedState,r=r(s,t),r=r==null?t:ne({},t,r),e.memoizedState=r,e.lanes===0&&(e.updateQueue.baseState=r)}var Ns={isMounted:function(e){return(e=e._reactInternals)?Jt(e)===e:!1},enqueueSetState:function(e,t,r){e=e._reactInternals;var s=Le(),o=Tt(e),i=ht(s,o);i.payload=t,r!=null&&(i.callback=r),t=Dt(e,i,o),t!==null&&(Je(t,e,o,s),rs(t,e,o))},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var s=Le(),o=Tt(e),i=ht(s,o);i.tag=1,i.payload=t,r!=null&&(i.callback=r),t=Dt(e,i,o),t!==null&&(Je(t,e,o,s),rs(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=Le(),s=Tt(e),o=ht(r,s);o.tag=2,t!=null&&(o.callback=t),t=Dt(e,o,s),t!==null&&(Je(t,e,s,r),rs(t,e,s))}};function Ba(e,t,r,s,o,i,n){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(s,i,n):t.prototype&&t.prototype.isPureReactComponent?!ci(r,s)||!ci(o,i):!0}function su(e,t,r){var s=!1,o=Mt,i=t.contextType;return typeof i=="object"&&i!==null?i=je(i):(o=Ae(t)?qt:we.current,s=t.contextTypes,i=(s=s!=null)?Er(e,o):Mt),t=new t(r,i),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Ns,e.stateNode=t,t._reactInternals=e,s&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Pa(e,t,r,s){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(r,s),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(r,s),t.state!==e&&Ns.enqueueReplaceState(t,t.state,null)}function ho(e,t,r,s){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=iu,Yo(e);var i=t.contextType;typeof i=="object"&&i!==null?o.context=je(i):(i=Ae(t)?qt:we.current,o.context=Er(e,i)),o.state=e.memoizedState,i=t.getDerivedStateFromProps,typeof i=="function"&&(uo(e,t,i,r),o.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof o.getSnapshotBeforeUpdate=="function"||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(t=o.state,typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount(),t!==o.state&&Ns.enqueueReplaceState(o,o.state,null),ks(e,r,o,s),o.state=e.memoizedState),typeof o.componentDidMount=="function"&&(e.flags|=4194308)}function Nr(e,t,r){if(e=r.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(r._owner){if(r=r._owner,r){if(r.tag!==1)throw Error(O(309));var s=r.stateNode}if(!s)throw Error(O(147,e));var o=s,i=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===i?t.ref:(t=function(n){var a=o.refs;a===iu&&(a=o.refs={}),n===null?delete a[i]:a[i]=n},t._stringRef=i,t)}if(typeof e!="string")throw Error(O(284));if(!r._owner)throw Error(O(290,e))}return e}function Gi(e,t){throw e=Object.prototype.toString.call(t),Error(O(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ma(e){var t=e._init;return t(e._payload)}function nu(e){function t(l,f){if(e){var g=l.deletions;g===null?(l.deletions=[f],l.flags|=16):g.push(f)}}function r(l,f){if(!e)return null;for(;f!==null;)t(l,f),f=f.sibling;return null}function s(l,f){for(l=new Map;f!==null;)f.key!==null?l.set(f.key,f):l.set(f.index,f),f=f.sibling;return l}function o(l,f){return l=Bt(l,f),l.index=0,l.sibling=null,l}function i(l,f,g){return l.index=g,e?(g=l.alternate,g!==null?(g=g.index,g<f?(l.flags|=2,f):g):(l.flags|=2,f)):(l.flags|=1048576,f)}function n(l){return e&&l.alternate===null&&(l.flags|=2),l}function a(l,f,g,C){return f===null||f.tag!==6?(f=Bn(g,l.mode,C),f.return=l,f):(f=o(f,g),f.return=l,f)}function d(l,f,g,C){var k=g.type;return k===nr?S(l,f,g.props.children,C,g.key):f!==null&&(f.elementType===k||typeof k=="object"&&k!==null&&k.$$typeof===St&&Ma(k)===f.type)?(C=o(f,g.props),C.ref=Nr(l,f,g),C.return=l,C):(C=as(g.type,g.key,g.props,null,l.mode,C),C.ref=Nr(l,f,g),C.return=l,C)}function _(l,f,g,C){return f===null||f.tag!==4||f.stateNode.containerInfo!==g.containerInfo||f.stateNode.implementation!==g.implementation?(f=Pn(g,l.mode,C),f.return=l,f):(f=o(f,g.children||[]),f.return=l,f)}function S(l,f,g,C,k){return f===null||f.tag!==7?(f=Vt(g,l.mode,C,k),f.return=l,f):(f=o(f,g),f.return=l,f)}function m(l,f,g){if(typeof f=="string"&&f!==""||typeof f=="number")return f=Bn(""+f,l.mode,g),f.return=l,f;if(typeof f=="object"&&f!==null){switch(f.$$typeof){case Mi:return g=as(f.type,f.key,f.props,null,l.mode,g),g.ref=Nr(l,null,f),g.return=l,g;case sr:return f=Pn(f,l.mode,g),f.return=l,f;case St:var C=f._init;return m(l,C(f._payload),g)}if($r(f)||Or(f))return f=Vt(f,l.mode,g,null),f.return=l,f;Gi(l,f)}return null}function v(l,f,g,C){var k=f!==null?f.key:null;if(typeof g=="string"&&g!==""||typeof g=="number")return k!==null?null:a(l,f,""+g,C);if(typeof g=="object"&&g!==null){switch(g.$$typeof){case Mi:return g.key===k?d(l,f,g,C):null;case sr:return g.key===k?_(l,f,g,C):null;case St:return k=g._init,v(l,f,k(g._payload),C)}if($r(g)||Or(g))return k!==null?null:S(l,f,g,C,null);Gi(l,g)}return null}function p(l,f,g,C,k){if(typeof C=="string"&&C!==""||typeof C=="number")return l=l.get(g)||null,a(f,l,""+C,k);if(typeof C=="object"&&C!==null){switch(C.$$typeof){case Mi:return l=l.get(C.key===null?g:C.key)||null,d(f,l,C,k);case sr:return l=l.get(C.key===null?g:C.key)||null,_(f,l,C,k);case St:var y=C._init;return p(l,f,g,y(C._payload),k)}if($r(C)||Or(C))return l=l.get(g)||null,S(f,l,C,k,null);Gi(f,C)}return null}function c(l,f,g,C){for(var k=null,y=null,E=f,x=f=0,B=null;E!==null&&x<g.length;x++){E.index>x?(B=E,E=null):B=E.sibling;var D=v(l,E,g[x],C);if(D===null){E===null&&(E=B);break}e&&E&&D.alternate===null&&t(l,E),f=i(D,f,x),y===null?k=D:y.sibling=D,y=D,E=B}if(x===g.length)return r(l,E),re&&Ut(l,x),k;if(E===null){for(;x<g.length;x++)E=m(l,g[x],C),E!==null&&(f=i(E,f,x),y===null?k=E:y.sibling=E,y=E);return re&&Ut(l,x),k}for(E=s(l,E);x<g.length;x++)B=p(E,l,x,g[x],C),B!==null&&(e&&B.alternate!==null&&E.delete(B.key===null?x:B.key),f=i(B,f,x),y===null?k=B:y.sibling=B,y=B);return e&&E.forEach(function(w){return t(l,w)}),re&&Ut(l,x),k}function h(l,f,g,C){var k=Or(g);if(typeof k!="function")throw Error(O(150));if(g=k.call(g),g==null)throw Error(O(151));for(var y=k=null,E=f,x=f=0,B=null,D=g.next();E!==null&&!D.done;x++,D=g.next()){E.index>x?(B=E,E=null):B=E.sibling;var w=v(l,E,D.value,C);if(w===null){E===null&&(E=B);break}e&&E&&w.alternate===null&&t(l,E),f=i(w,f,x),y===null?k=w:y.sibling=w,y=w,E=B}if(D.done)return r(l,E),re&&Ut(l,x),k;if(E===null){for(;!D.done;x++,D=g.next())D=m(l,D.value,C),D!==null&&(f=i(D,f,x),y===null?k=D:y.sibling=D,y=D);return re&&Ut(l,x),k}for(E=s(l,E);!D.done;x++,D=g.next())D=p(E,l,x,D.value,C),D!==null&&(e&&D.alternate!==null&&E.delete(D.key===null?x:D.key),f=i(D,f,x),y===null?k=D:y.sibling=D,y=D);return e&&E.forEach(function(L){return t(l,L)}),re&&Ut(l,x),k}function u(l,f,g,C){if(typeof g=="object"&&g!==null&&g.type===nr&&g.key===null&&(g=g.props.children),typeof g=="object"&&g!==null){switch(g.$$typeof){case Mi:e:{for(var k=g.key,y=f;y!==null;){if(y.key===k){if(k=g.type,k===nr){if(y.tag===7){r(l,y.sibling),f=o(y,g.props.children),f.return=l,l=f;break e}}else if(y.elementType===k||typeof k=="object"&&k!==null&&k.$$typeof===St&&Ma(k)===y.type){r(l,y.sibling),f=o(y,g.props),f.ref=Nr(l,y,g),f.return=l,l=f;break e}r(l,y);break}else t(l,y);y=y.sibling}g.type===nr?(f=Vt(g.props.children,l.mode,C,g.key),f.return=l,l=f):(C=as(g.type,g.key,g.props,null,l.mode,C),C.ref=Nr(l,f,g),C.return=l,l=C)}return n(l);case sr:e:{for(y=g.key;f!==null;){if(f.key===y)if(f.tag===4&&f.stateNode.containerInfo===g.containerInfo&&f.stateNode.implementation===g.implementation){r(l,f.sibling),f=o(f,g.children||[]),f.return=l,l=f;break e}else{r(l,f);break}else t(l,f);f=f.sibling}f=Pn(g,l.mode,C),f.return=l,l=f}return n(l);case St:return y=g._init,u(l,f,y(g._payload),C)}if($r(g))return c(l,f,g,C);if(Or(g))return h(l,f,g,C);Gi(l,g)}return typeof g=="string"&&g!==""||typeof g=="number"?(g=""+g,f!==null&&f.tag===6?(r(l,f.sibling),f=o(f,g),f.return=l,l=f):(r(l,f),f=Bn(g,l.mode,C),f.return=l,l=f),n(l)):r(l,f)}return u}var Lr=nu(!0),ou=nu(!1),wi={},ot=It(wi),fi=It(wi),_i=It(wi);function $t(e){if(e===wi)throw Error(O(174));return e}function Qo(e,t){switch(J(_i,t),J(fi,e),J(ot,wi),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:jn(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=jn(t,e)}te(ot),J(ot,t)}function xr(){te(ot),te(fi),te(_i)}function lu(e){$t(_i.current);var t=$t(ot.current),r=jn(t,e.type);t!==r&&(J(fi,e),J(ot,r))}function Zo(e){fi.current===e&&(te(ot),te(fi))}var ie=It(0);function Ls(e){for(var t=e;t!==null;){if(t.tag===13){var r=t.memoizedState;if(r!==null&&(r=r.dehydrated,r===null||r.data==="$?"||r.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if((t.flags&128)!==0)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var xn=[];function Jo(){for(var e=0;e<xn.length;e++)xn[e]._workInProgressVersionPrimary=null;xn.length=0}var is=vt.ReactCurrentDispatcher,Rn=vt.ReactCurrentBatchConfig,Gt=0,se=null,ue=null,de=null,xs=!1,Zr=!1,pi=0,tf=0;function Se(){throw Error(O(321))}function el(e,t){if(t===null)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!et(e[r],t[r]))return!1;return!0}function tl(e,t,r,s,o,i){if(Gt=i,se=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,is.current=e===null||e.memoizedState===null?of:lf,e=r(s,o),Zr){i=0;do{if(Zr=!1,pi=0,25<=i)throw Error(O(301));i+=1,de=ue=null,t.updateQueue=null,is.current=af,e=r(s,o)}while(Zr)}if(is.current=Rs,t=ue!==null&&ue.next!==null,Gt=0,de=ue=se=null,xs=!1,t)throw Error(O(300));return e}function rl(){var e=pi!==0;return pi=0,e}function it(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return de===null?se.memoizedState=de=e:de=de.next=e,de}function $e(){if(ue===null){var e=se.alternate;e=e!==null?e.memoizedState:null}else e=ue.next;var t=de===null?se.memoizedState:de.next;if(t!==null)de=t,ue=e;else{if(e===null)throw Error(O(310));ue=e,e={memoizedState:ue.memoizedState,baseState:ue.baseState,baseQueue:ue.baseQueue,queue:ue.queue,next:null},de===null?se.memoizedState=de=e:de=de.next=e}return de}function vi(e,t){return typeof t=="function"?t(e):t}function bn(e){var t=$e(),r=t.queue;if(r===null)throw Error(O(311));r.lastRenderedReducer=e;var s=ue,o=s.baseQueue,i=r.pending;if(i!==null){if(o!==null){var n=o.next;o.next=i.next,i.next=n}s.baseQueue=o=i,r.pending=null}if(o!==null){i=o.next,s=s.baseState;var a=n=null,d=null,_=i;do{var S=_.lane;if((Gt&S)===S)d!==null&&(d=d.next={lane:0,action:_.action,hasEagerState:_.hasEagerState,eagerState:_.eagerState,next:null}),s=_.hasEagerState?_.eagerState:e(s,_.action);else{var m={lane:S,action:_.action,hasEagerState:_.hasEagerState,eagerState:_.eagerState,next:null};d===null?(a=d=m,n=s):d=d.next=m,se.lanes|=S,Yt|=S}_=_.next}while(_!==null&&_!==i);d===null?n=s:d.next=a,et(s,t.memoizedState)||(be=!0),t.memoizedState=s,t.baseState=n,t.baseQueue=d,r.lastRenderedState=s}if(e=r.interleaved,e!==null){o=e;do i=o.lane,se.lanes|=i,Yt|=i,o=o.next;while(o!==e)}else o===null&&(r.lanes=0);return[t.memoizedState,r.dispatch]}function Dn(e){var t=$e(),r=t.queue;if(r===null)throw Error(O(311));r.lastRenderedReducer=e;var s=r.dispatch,o=r.pending,i=t.memoizedState;if(o!==null){r.pending=null;var n=o=o.next;do i=e(i,n.action),n=n.next;while(n!==o);et(i,t.memoizedState)||(be=!0),t.memoizedState=i,t.baseQueue===null&&(t.baseState=i),r.lastRenderedState=i}return[i,s]}function au(){}function cu(e,t){var r=se,s=$e(),o=t(),i=!et(s.memoizedState,o);if(i&&(s.memoizedState=o,be=!0),s=s.queue,il(du.bind(null,r,s,e),[e]),s.getSnapshot!==t||i||de!==null&&de.memoizedState.tag&1){if(r.flags|=2048,gi(9,hu.bind(null,r,s,o,t),void 0,null),fe===null)throw Error(O(349));(Gt&30)!==0||uu(r,t,o)}return o}function uu(e,t,r){e.flags|=16384,e={getSnapshot:t,value:r},t=se.updateQueue,t===null?(t={lastEffect:null,stores:null},se.updateQueue=t,t.stores=[e]):(r=t.stores,r===null?t.stores=[e]:r.push(e))}function hu(e,t,r,s){t.value=r,t.getSnapshot=s,fu(t)&&_u(e)}function du(e,t,r){return r(function(){fu(t)&&_u(e)})}function fu(e){var t=e.getSnapshot;e=e.value;try{var r=t();return!et(e,r)}catch{return!0}}function _u(e){var t=_t(e,1);t!==null&&Je(t,e,1,-1)}function Oa(e){var t=it();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:vi,lastRenderedState:e},t.queue=e,e=e.dispatch=nf.bind(null,se,e),[t.memoizedState,e]}function gi(e,t,r,s){return e={tag:e,create:t,destroy:r,deps:s,next:null},t=se.updateQueue,t===null?(t={lastEffect:null,stores:null},se.updateQueue=t,t.lastEffect=e.next=e):(r=t.lastEffect,r===null?t.lastEffect=e.next=e:(s=r.next,r.next=e,e.next=s,t.lastEffect=e)),e}function pu(){return $e().memoizedState}function ss(e,t,r,s){var o=it();se.flags|=e,o.memoizedState=gi(1|t,r,void 0,s===void 0?null:s)}function Us(e,t,r,s){var o=$e();s=s===void 0?null:s;var i=void 0;if(ue!==null){var n=ue.memoizedState;if(i=n.destroy,s!==null&&el(s,n.deps)){o.memoizedState=gi(t,r,i,s);return}}se.flags|=e,o.memoizedState=gi(1|t,r,i,s)}function Ia(e,t){return ss(8390656,8,e,t)}function il(e,t){return Us(2048,8,e,t)}function vu(e,t){return Us(4,2,e,t)}function gu(e,t){return Us(4,4,e,t)}function mu(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function Su(e,t,r){return r=r!=null?r.concat([e]):null,Us(4,4,mu.bind(null,t,e),r)}function sl(){}function yu(e,t){var r=$e();t=t===void 0?null:t;var s=r.memoizedState;return s!==null&&t!==null&&el(t,s[1])?s[0]:(r.memoizedState=[e,t],e)}function Cu(e,t){var r=$e();t=t===void 0?null:t;var s=r.memoizedState;return s!==null&&t!==null&&el(t,s[1])?s[0]:(e=e(),r.memoizedState=[e,t],e)}function wu(e,t,r){return(Gt&21)===0?(e.baseState&&(e.baseState=!1,be=!0),e.memoizedState=r):(et(r,t)||(r=Lc(),se.lanes|=r,Yt|=r,e.baseState=!0),t)}function rf(e,t){var r=Q;Q=r!==0&&4>r?r:4,e(!0);var s=Rn.transition;Rn.transition={};try{e(!1),t()}finally{Q=r,Rn.transition=s}}function Eu(){return $e().memoizedState}function sf(e,t,r){var s=Tt(e);if(r={lane:s,action:r,hasEagerState:!1,eagerState:null,next:null},ku(e))Lu(t,r);else if(r=tu(e,t,r,s),r!==null){var o=Le();Je(r,e,s,o),xu(r,t,s)}}function nf(e,t,r){var s=Tt(e),o={lane:s,action:r,hasEagerState:!1,eagerState:null,next:null};if(ku(e))Lu(t,o);else{var i=e.alternate;if(e.lanes===0&&(i===null||i.lanes===0)&&(i=t.lastRenderedReducer,i!==null))try{var n=t.lastRenderedState,a=i(n,r);if(o.hasEagerState=!0,o.eagerState=a,et(a,n)){var d=t.interleaved;d===null?(o.next=o,Go(t)):(o.next=d.next,d.next=o),t.interleaved=o;return}}catch{}finally{}r=tu(e,t,o,s),r!==null&&(o=Le(),Je(r,e,s,o),xu(r,t,s))}}function ku(e){var t=e.alternate;return e===se||t!==null&&t===se}function Lu(e,t){Zr=xs=!0;var r=e.pending;r===null?t.next=t:(t.next=r.next,r.next=t),e.pending=t}function xu(e,t,r){if((r&4194240)!==0){var s=t.lanes;s&=e.pendingLanes,r|=s,t.lanes=r,Oo(e,r)}}var Rs={readContext:je,useCallback:Se,useContext:Se,useEffect:Se,useImperativeHandle:Se,useInsertionEffect:Se,useLayoutEffect:Se,useMemo:Se,useReducer:Se,useRef:Se,useState:Se,useDebugValue:Se,useDeferredValue:Se,useTransition:Se,useMutableSource:Se,useSyncExternalStore:Se,useId:Se,unstable_isNewReconciler:!1},of={readContext:je,useCallback:function(e,t){return it().memoizedState=[e,t===void 0?null:t],e},useContext:je,useEffect:Ia,useImperativeHandle:function(e,t,r){return r=r!=null?r.concat([e]):null,ss(4194308,4,mu.bind(null,t,e),r)},useLayoutEffect:function(e,t){return ss(4194308,4,e,t)},useInsertionEffect:function(e,t){return ss(4,2,e,t)},useMemo:function(e,t){var r=it();return t=t===void 0?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var s=it();return t=r!==void 0?r(t):t,s.memoizedState=s.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},s.queue=e,e=e.dispatch=sf.bind(null,se,e),[s.memoizedState,e]},useRef:function(e){var t=it();return e={current:e},t.memoizedState=e},useState:Oa,useDebugValue:sl,useDeferredValue:function(e){return it().memoizedState=e},useTransition:function(){var e=Oa(!1),t=e[0];return e=rf.bind(null,e[1]),it().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,r){var s=se,o=it();if(re){if(r===void 0)throw Error(O(407));r=r()}else{if(r=t(),fe===null)throw Error(O(349));(Gt&30)!==0||uu(s,t,r)}o.memoizedState=r;var i={value:r,getSnapshot:t};return o.queue=i,Ia(du.bind(null,s,i,e),[e]),s.flags|=2048,gi(9,hu.bind(null,s,i,r,t),void 0,null),r},useId:function(){var e=it(),t=fe.identifierPrefix;if(re){var r=ut,s=ct;r=(s&~(1<<32-Ze(s)-1)).toString(32)+r,t=":"+t+"R"+r,r=pi++,0<r&&(t+="H"+r.toString(32)),t+=":"}else r=tf++,t=":"+t+"r"+r.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},lf={readContext:je,useCallback:yu,useContext:je,useEffect:il,useImperativeHandle:Su,useInsertionEffect:vu,useLayoutEffect:gu,useMemo:Cu,useReducer:bn,useRef:pu,useState:function(){return bn(vi)},useDebugValue:sl,useDeferredValue:function(e){var t=$e();return wu(t,ue.memoizedState,e)},useTransition:function(){var e=bn(vi)[0],t=$e().memoizedState;return[e,t]},useMutableSource:au,useSyncExternalStore:cu,useId:Eu,unstable_isNewReconciler:!1},af={readContext:je,useCallback:yu,useContext:je,useEffect:il,useImperativeHandle:Su,useInsertionEffect:vu,useLayoutEffect:gu,useMemo:Cu,useReducer:Dn,useRef:pu,useState:function(){return Dn(vi)},useDebugValue:sl,useDeferredValue:function(e){var t=$e();return ue===null?t.memoizedState=e:wu(t,ue.memoizedState,e)},useTransition:function(){var e=Dn(vi)[0],t=$e().memoizedState;return[e,t]},useMutableSource:au,useSyncExternalStore:cu,useId:Eu,unstable_isNewReconciler:!1};function Rr(e,t){try{var r="",s=t;do r+=Hh(s),s=s.return;while(s);var o=r}catch(i){o=`
Error generating stack: `+i.message+`
`+i.stack}return{value:e,source:t,stack:o,digest:null}}function An(e,t,r){return{value:e,source:null,stack:r!=null?r:null,digest:t!=null?t:null}}function fo(e,t){try{console.error(t.value)}catch(r){setTimeout(function(){throw r})}}var cf=typeof WeakMap=="function"?WeakMap:Map;function Ru(e,t,r){r=ht(-1,r),r.tag=3,r.payload={element:null};var s=t.value;return r.callback=function(){Ds||(Ds=!0,Eo=s),fo(e,t)},r}function bu(e,t,r){r=ht(-1,r),r.tag=3;var s=e.type.getDerivedStateFromError;if(typeof s=="function"){var o=t.value;r.payload=function(){return s(o)},r.callback=function(){fo(e,t)}}var i=e.stateNode;return i!==null&&typeof i.componentDidCatch=="function"&&(r.callback=function(){fo(e,t),typeof s!="function"&&(At===null?At=new Set([this]):At.add(this));var n=t.stack;this.componentDidCatch(t.value,{componentStack:n!==null?n:""})}),r}function Ha(e,t,r){var s=e.pingCache;if(s===null){s=e.pingCache=new cf;var o=new Set;s.set(t,o)}else o=s.get(t),o===void 0&&(o=new Set,s.set(t,o));o.has(r)||(o.add(r),e=Ef.bind(null,e,t,r),t.then(e,e))}function Fa(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function Na(e,t,r,s,o){return(e.mode&1)===0?(e===t?e.flags|=65536:(e.flags|=128,r.flags|=131072,r.flags&=-52805,r.tag===1&&(r.alternate===null?r.tag=17:(t=ht(-1,1),t.tag=2,Dt(r,t,1))),r.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var uf=vt.ReactCurrentOwner,be=!1;function ke(e,t,r,s){t.child=e===null?ou(t,null,r,s):Lr(t,e.child,r,s)}function Ua(e,t,r,s,o){r=r.render;var i=t.ref;return yr(t,o),s=tl(e,t,r,s,i,o),r=rl(),e!==null&&!be?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,pt(e,t,o)):(re&&r&&jo(t),t.flags|=1,ke(e,t,s,o),t.child)}function za(e,t,r,s,o){if(e===null){var i=r.type;return typeof i=="function"&&!dl(i)&&i.defaultProps===void 0&&r.compare===null&&r.defaultProps===void 0?(t.tag=15,t.type=i,Du(e,t,i,s,o)):(e=as(r.type,null,s,t,t.mode,o),e.ref=t.ref,e.return=t,t.child=e)}if(i=e.child,(e.lanes&o)===0){var n=i.memoizedProps;if(r=r.compare,r=r!==null?r:ci,r(n,s)&&e.ref===t.ref)return pt(e,t,o)}return t.flags|=1,e=Bt(i,s),e.ref=t.ref,e.return=t,t.child=e}function Du(e,t,r,s,o){if(e!==null){var i=e.memoizedProps;if(ci(i,s)&&e.ref===t.ref)if(be=!1,t.pendingProps=s=i,(e.lanes&o)!==0)(e.flags&131072)!==0&&(be=!0);else return t.lanes=e.lanes,pt(e,t,o)}return _o(e,t,r,s,o)}function Au(e,t,r){var s=t.pendingProps,o=s.children,i=e!==null?e.memoizedState:null;if(s.mode==="hidden")if((t.mode&1)===0)t.memoizedState={baseLanes:0,cachePool:null,transitions:null},J(pr,Be),Be|=r;else{if((r&1073741824)===0)return e=i!==null?i.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,J(pr,Be),Be|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},s=i!==null?i.baseLanes:r,J(pr,Be),Be|=s}else i!==null?(s=i.baseLanes|r,t.memoizedState=null):s=r,J(pr,Be),Be|=s;return ke(e,t,o,r),t.child}function Tu(e,t){var r=t.ref;(e===null&&r!==null||e!==null&&e.ref!==r)&&(t.flags|=512,t.flags|=2097152)}function _o(e,t,r,s,o){var i=Ae(r)?qt:we.current;return i=Er(t,i),yr(t,o),r=tl(e,t,r,s,i,o),s=rl(),e!==null&&!be?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,pt(e,t,o)):(re&&s&&jo(t),t.flags|=1,ke(e,t,r,o),t.child)}function Wa(e,t,r,s,o){if(Ae(r)){var i=!0;Ss(t)}else i=!1;if(yr(t,o),t.stateNode===null)ns(e,t),su(t,r,s),ho(t,r,s,o),s=!0;else if(e===null){var n=t.stateNode,a=t.memoizedProps;n.props=a;var d=n.context,_=r.contextType;typeof _=="object"&&_!==null?_=je(_):(_=Ae(r)?qt:we.current,_=Er(t,_));var S=r.getDerivedStateFromProps,m=typeof S=="function"||typeof n.getSnapshotBeforeUpdate=="function";m||typeof n.UNSAFE_componentWillReceiveProps!="function"&&typeof n.componentWillReceiveProps!="function"||(a!==s||d!==_)&&Pa(t,n,s,_),yt=!1;var v=t.memoizedState;n.state=v,ks(t,s,n,o),d=t.memoizedState,a!==s||v!==d||De.current||yt?(typeof S=="function"&&(uo(t,r,S,s),d=t.memoizedState),(a=yt||Ba(t,r,a,s,v,d,_))?(m||typeof n.UNSAFE_componentWillMount!="function"&&typeof n.componentWillMount!="function"||(typeof n.componentWillMount=="function"&&n.componentWillMount(),typeof n.UNSAFE_componentWillMount=="function"&&n.UNSAFE_componentWillMount()),typeof n.componentDidMount=="function"&&(t.flags|=4194308)):(typeof n.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=s,t.memoizedState=d),n.props=s,n.state=d,n.context=_,s=a):(typeof n.componentDidMount=="function"&&(t.flags|=4194308),s=!1)}else{n=t.stateNode,ru(e,t),a=t.memoizedProps,_=t.type===t.elementType?a:Ge(t.type,a),n.props=_,m=t.pendingProps,v=n.context,d=r.contextType,typeof d=="object"&&d!==null?d=je(d):(d=Ae(r)?qt:we.current,d=Er(t,d));var p=r.getDerivedStateFromProps;(S=typeof p=="function"||typeof n.getSnapshotBeforeUpdate=="function")||typeof n.UNSAFE_componentWillReceiveProps!="function"&&typeof n.componentWillReceiveProps!="function"||(a!==m||v!==d)&&Pa(t,n,s,d),yt=!1,v=t.memoizedState,n.state=v,ks(t,s,n,o);var c=t.memoizedState;a!==m||v!==c||De.current||yt?(typeof p=="function"&&(uo(t,r,p,s),c=t.memoizedState),(_=yt||Ba(t,r,_,s,v,c,d)||!1)?(S||typeof n.UNSAFE_componentWillUpdate!="function"&&typeof n.componentWillUpdate!="function"||(typeof n.componentWillUpdate=="function"&&n.componentWillUpdate(s,c,d),typeof n.UNSAFE_componentWillUpdate=="function"&&n.UNSAFE_componentWillUpdate(s,c,d)),typeof n.componentDidUpdate=="function"&&(t.flags|=4),typeof n.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof n.componentDidUpdate!="function"||a===e.memoizedProps&&v===e.memoizedState||(t.flags|=4),typeof n.getSnapshotBeforeUpdate!="function"||a===e.memoizedProps&&v===e.memoizedState||(t.flags|=1024),t.memoizedProps=s,t.memoizedState=c),n.props=s,n.state=c,n.context=d,s=_):(typeof n.componentDidUpdate!="function"||a===e.memoizedProps&&v===e.memoizedState||(t.flags|=4),typeof n.getSnapshotBeforeUpdate!="function"||a===e.memoizedProps&&v===e.memoizedState||(t.flags|=1024),s=!1)}return po(e,t,r,s,i,o)}function po(e,t,r,s,o,i){Tu(e,t);var n=(t.flags&128)!==0;if(!s&&!n)return o&&Ra(t,r,!1),pt(e,t,i);s=t.stateNode,uf.current=t;var a=n&&typeof r.getDerivedStateFromError!="function"?null:s.render();return t.flags|=1,e!==null&&n?(t.child=Lr(t,e.child,null,i),t.child=Lr(t,null,a,i)):ke(e,t,a,i),t.memoizedState=s.state,o&&Ra(t,r,!0),t.child}function Bu(e){var t=e.stateNode;t.pendingContext?xa(e,t.pendingContext,t.pendingContext!==t.context):t.context&&xa(e,t.context,!1),Qo(e,t.containerInfo)}function ja(e,t,r,s,o){return kr(),Ko(o),t.flags|=256,ke(e,t,r,s),t.child}var vo={dehydrated:null,treeContext:null,retryLane:0};function go(e){return{baseLanes:e,cachePool:null,transitions:null}}function Pu(e,t,r){var s=t.pendingProps,o=ie.current,i=!1,n=(t.flags&128)!==0,a;if((a=n)||(a=e!==null&&e.memoizedState===null?!1:(o&2)!==0),a?(i=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(o|=1),J(ie,o&1),e===null)return ao(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?((t.mode&1)===0?t.lanes=1:e.data==="$!"?t.lanes=8:t.lanes=1073741824,null):(n=s.children,e=s.fallback,i?(s=t.mode,i=t.child,n={mode:"hidden",children:n},(s&1)===0&&i!==null?(i.childLanes=0,i.pendingProps=n):i=js(n,s,0,null),e=Vt(e,s,r,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=go(r),t.memoizedState=vo,e):nl(t,n));if(o=e.memoizedState,o!==null&&(a=o.dehydrated,a!==null))return hf(e,t,n,s,a,o,r);if(i){i=s.fallback,n=t.mode,o=e.child,a=o.sibling;var d={mode:"hidden",children:s.children};return(n&1)===0&&t.child!==o?(s=t.child,s.childLanes=0,s.pendingProps=d,t.deletions=null):(s=Bt(o,d),s.subtreeFlags=o.subtreeFlags&14680064),a!==null?i=Bt(a,i):(i=Vt(i,n,r,null),i.flags|=2),i.return=t,s.return=t,s.sibling=i,t.child=s,s=i,i=t.child,n=e.child.memoizedState,n=n===null?go(r):{baseLanes:n.baseLanes|r,cachePool:null,transitions:n.transitions},i.memoizedState=n,i.childLanes=e.childLanes&~r,t.memoizedState=vo,s}return i=e.child,e=i.sibling,s=Bt(i,{mode:"visible",children:s.children}),(t.mode&1)===0&&(s.lanes=r),s.return=t,s.sibling=null,e!==null&&(r=t.deletions,r===null?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=s,t.memoizedState=null,s}function nl(e,t){return t=js({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function Yi(e,t,r,s){return s!==null&&Ko(s),Lr(t,e.child,null,r),e=nl(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function hf(e,t,r,s,o,i,n){if(r)return t.flags&256?(t.flags&=-257,s=An(Error(O(422))),Yi(e,t,n,s)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(i=s.fallback,o=t.mode,s=js({mode:"visible",children:s.children},o,0,null),i=Vt(i,o,n,null),i.flags|=2,s.return=t,i.return=t,s.sibling=i,t.child=s,(t.mode&1)!==0&&Lr(t,e.child,null,n),t.child.memoizedState=go(n),t.memoizedState=vo,i);if((t.mode&1)===0)return Yi(e,t,n,null);if(o.data==="$!"){if(s=o.nextSibling&&o.nextSibling.dataset,s)var a=s.dgst;return s=a,i=Error(O(419)),s=An(i,s,void 0),Yi(e,t,n,s)}if(a=(n&e.childLanes)!==0,be||a){if(s=fe,s!==null){switch(n&-n){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}o=(o&(s.suspendedLanes|n))!==0?0:o,o!==0&&o!==i.retryLane&&(i.retryLane=o,_t(e,o),Je(s,e,o,-1))}return hl(),s=An(Error(O(421))),Yi(e,t,n,s)}return o.data==="$?"?(t.flags|=128,t.child=e.child,t=kf.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,Pe=bt(o.nextSibling),Me=t,re=!0,Qe=null,e!==null&&(Ne[Ue++]=ct,Ne[Ue++]=ut,Ne[Ue++]=Xt,ct=e.id,ut=e.overflow,Xt=t),t=nl(t,s.children),t.flags|=4096,t)}function $a(e,t,r){e.lanes|=t;var s=e.alternate;s!==null&&(s.lanes|=t),co(e.return,t,r)}function Tn(e,t,r,s,o){var i=e.memoizedState;i===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:s,tail:r,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=s,i.tail=r,i.tailMode=o)}function Mu(e,t,r){var s=t.pendingProps,o=s.revealOrder,i=s.tail;if(ke(e,t,s.children,r),s=ie.current,(s&2)!==0)s=s&1|2,t.flags|=128;else{if(e!==null&&(e.flags&128)!==0)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&$a(e,r,t);else if(e.tag===19)$a(e,r,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}s&=1}if(J(ie,s),(t.mode&1)===0)t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;r!==null;)e=r.alternate,e!==null&&Ls(e)===null&&(o=r),r=r.sibling;r=o,r===null?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),Tn(t,!1,o,r,i);break;case"backwards":for(r=null,o=t.child,t.child=null;o!==null;){if(e=o.alternate,e!==null&&Ls(e)===null){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}Tn(t,!0,r,null,i);break;case"together":Tn(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function ns(e,t){(t.mode&1)===0&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function pt(e,t,r){if(e!==null&&(t.dependencies=e.dependencies),Yt|=t.lanes,(r&t.childLanes)===0)return null;if(e!==null&&t.child!==e.child)throw Error(O(153));if(t.child!==null){for(e=t.child,r=Bt(e,e.pendingProps),t.child=r,r.return=t;e.sibling!==null;)e=e.sibling,r=r.sibling=Bt(e,e.pendingProps),r.return=t;r.sibling=null}return t.child}function df(e,t,r){switch(t.tag){case 3:Bu(t),kr();break;case 5:lu(t);break;case 1:Ae(t.type)&&Ss(t);break;case 4:Qo(t,t.stateNode.containerInfo);break;case 10:var s=t.type._context,o=t.memoizedProps.value;J(ws,s._currentValue),s._currentValue=o;break;case 13:if(s=t.memoizedState,s!==null)return s.dehydrated!==null?(J(ie,ie.current&1),t.flags|=128,null):(r&t.child.childLanes)!==0?Pu(e,t,r):(J(ie,ie.current&1),e=pt(e,t,r),e!==null?e.sibling:null);J(ie,ie.current&1);break;case 19:if(s=(r&t.childLanes)!==0,(e.flags&128)!==0){if(s)return Mu(e,t,r);t.flags|=128}if(o=t.memoizedState,o!==null&&(o.rendering=null,o.tail=null,o.lastEffect=null),J(ie,ie.current),s)break;return null;case 22:case 23:return t.lanes=0,Au(e,t,r)}return pt(e,t,r)}var Ou,mo,Iu,Hu;Ou=function(e,t){for(var r=t.child;r!==null;){if(r.tag===5||r.tag===6)e.appendChild(r.stateNode);else if(r.tag!==4&&r.child!==null){r.child.return=r,r=r.child;continue}if(r===t)break;for(;r.sibling===null;){if(r.return===null||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}};mo=function(){};Iu=function(e,t,r,s){var o=e.memoizedProps;if(o!==s){e=t.stateNode,$t(ot.current);var i=null;switch(r){case"input":o=Nn(e,o),s=Nn(e,s),i=[];break;case"select":o=ne({},o,{value:void 0}),s=ne({},s,{value:void 0}),i=[];break;case"textarea":o=Wn(e,o),s=Wn(e,s),i=[];break;default:typeof o.onClick!="function"&&typeof s.onClick=="function"&&(e.onclick=gs)}$n(r,s);var n;r=null;for(_ in o)if(!s.hasOwnProperty(_)&&o.hasOwnProperty(_)&&o[_]!=null)if(_==="style"){var a=o[_];for(n in a)a.hasOwnProperty(n)&&(r||(r={}),r[n]="")}else _!=="dangerouslySetInnerHTML"&&_!=="children"&&_!=="suppressContentEditableWarning"&&_!=="suppressHydrationWarning"&&_!=="autoFocus"&&(ri.hasOwnProperty(_)?i||(i=[]):(i=i||[]).push(_,null));for(_ in s){var d=s[_];if(a=o!=null?o[_]:void 0,s.hasOwnProperty(_)&&d!==a&&(d!=null||a!=null))if(_==="style")if(a){for(n in a)!a.hasOwnProperty(n)||d&&d.hasOwnProperty(n)||(r||(r={}),r[n]="");for(n in d)d.hasOwnProperty(n)&&a[n]!==d[n]&&(r||(r={}),r[n]=d[n])}else r||(i||(i=[]),i.push(_,r)),r=d;else _==="dangerouslySetInnerHTML"?(d=d?d.__html:void 0,a=a?a.__html:void 0,d!=null&&a!==d&&(i=i||[]).push(_,d)):_==="children"?typeof d!="string"&&typeof d!="number"||(i=i||[]).push(_,""+d):_!=="suppressContentEditableWarning"&&_!=="suppressHydrationWarning"&&(ri.hasOwnProperty(_)?(d!=null&&_==="onScroll"&&ee("scroll",e),i||a===d||(i=[])):(i=i||[]).push(_,d))}r&&(i=i||[]).push("style",r);var _=i;(t.updateQueue=_)&&(t.flags|=4)}};Hu=function(e,t,r,s){r!==s&&(t.flags|=4)};function Ur(e,t){if(!re)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;t!==null;)t.alternate!==null&&(r=t),t=t.sibling;r===null?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var s=null;r!==null;)r.alternate!==null&&(s=r),r=r.sibling;s===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:s.sibling=null}}function ye(e){var t=e.alternate!==null&&e.alternate.child===e.child,r=0,s=0;if(t)for(var o=e.child;o!==null;)r|=o.lanes|o.childLanes,s|=o.subtreeFlags&14680064,s|=o.flags&14680064,o.return=e,o=o.sibling;else for(o=e.child;o!==null;)r|=o.lanes|o.childLanes,s|=o.subtreeFlags,s|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=s,e.childLanes=r,t}function ff(e,t,r){var s=t.pendingProps;switch($o(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ye(t),null;case 1:return Ae(t.type)&&ms(),ye(t),null;case 3:return s=t.stateNode,xr(),te(De),te(we),Jo(),s.pendingContext&&(s.context=s.pendingContext,s.pendingContext=null),(e===null||e.child===null)&&(Xi(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&(t.flags&256)===0||(t.flags|=1024,Qe!==null&&(xo(Qe),Qe=null))),mo(e,t),ye(t),null;case 5:Zo(t);var o=$t(_i.current);if(r=t.type,e!==null&&t.stateNode!=null)Iu(e,t,r,s,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!s){if(t.stateNode===null)throw Error(O(166));return ye(t),null}if(e=$t(ot.current),Xi(t)){s=t.stateNode,r=t.type;var i=t.memoizedProps;switch(s[st]=t,s[di]=i,e=(t.mode&1)!==0,r){case"dialog":ee("cancel",s),ee("close",s);break;case"iframe":case"object":case"embed":ee("load",s);break;case"video":case"audio":for(o=0;o<Vr.length;o++)ee(Vr[o],s);break;case"source":ee("error",s);break;case"img":case"image":case"link":ee("error",s),ee("load",s);break;case"details":ee("toggle",s);break;case"input":Zl(s,i),ee("invalid",s);break;case"select":s._wrapperState={wasMultiple:!!i.multiple},ee("invalid",s);break;case"textarea":ea(s,i),ee("invalid",s)}$n(r,i),o=null;for(var n in i)if(i.hasOwnProperty(n)){var a=i[n];n==="children"?typeof a=="string"?s.textContent!==a&&(i.suppressHydrationWarning!==!0&&qi(s.textContent,a,e),o=["children",a]):typeof a=="number"&&s.textContent!==""+a&&(i.suppressHydrationWarning!==!0&&qi(s.textContent,a,e),o=["children",""+a]):ri.hasOwnProperty(n)&&a!=null&&n==="onScroll"&&ee("scroll",s)}switch(r){case"input":Oi(s),Jl(s,i,!0);break;case"textarea":Oi(s),ta(s);break;case"select":case"option":break;default:typeof i.onClick=="function"&&(s.onclick=gs)}s=o,t.updateQueue=s,s!==null&&(t.flags|=4)}else{n=o.nodeType===9?o:o.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=uc(r)),e==="http://www.w3.org/1999/xhtml"?r==="script"?(e=n.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof s.is=="string"?e=n.createElement(r,{is:s.is}):(e=n.createElement(r),r==="select"&&(n=e,s.multiple?n.multiple=!0:s.size&&(n.size=s.size))):e=n.createElementNS(e,r),e[st]=t,e[di]=s,Ou(e,t,!1,!1),t.stateNode=e;e:{switch(n=Kn(r,s),r){case"dialog":ee("cancel",e),ee("close",e),o=s;break;case"iframe":case"object":case"embed":ee("load",e),o=s;break;case"video":case"audio":for(o=0;o<Vr.length;o++)ee(Vr[o],e);o=s;break;case"source":ee("error",e),o=s;break;case"img":case"image":case"link":ee("error",e),ee("load",e),o=s;break;case"details":ee("toggle",e),o=s;break;case"input":Zl(e,s),o=Nn(e,s),ee("invalid",e);break;case"option":o=s;break;case"select":e._wrapperState={wasMultiple:!!s.multiple},o=ne({},s,{value:void 0}),ee("invalid",e);break;case"textarea":ea(e,s),o=Wn(e,s),ee("invalid",e);break;default:o=s}$n(r,o),a=o;for(i in a)if(a.hasOwnProperty(i)){var d=a[i];i==="style"?fc(e,d):i==="dangerouslySetInnerHTML"?(d=d?d.__html:void 0,d!=null&&hc(e,d)):i==="children"?typeof d=="string"?(r!=="textarea"||d!=="")&&ii(e,d):typeof d=="number"&&ii(e,""+d):i!=="suppressContentEditableWarning"&&i!=="suppressHydrationWarning"&&i!=="autoFocus"&&(ri.hasOwnProperty(i)?d!=null&&i==="onScroll"&&ee("scroll",e):d!=null&&Do(e,i,d,n))}switch(r){case"input":Oi(e),Jl(e,s,!1);break;case"textarea":Oi(e),ta(e);break;case"option":s.value!=null&&e.setAttribute("value",""+Pt(s.value));break;case"select":e.multiple=!!s.multiple,i=s.value,i!=null?vr(e,!!s.multiple,i,!1):s.defaultValue!=null&&vr(e,!!s.multiple,s.defaultValue,!0);break;default:typeof o.onClick=="function"&&(e.onclick=gs)}switch(r){case"button":case"input":case"select":case"textarea":s=!!s.autoFocus;break e;case"img":s=!0;break e;default:s=!1}}s&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return ye(t),null;case 6:if(e&&t.stateNode!=null)Hu(e,t,e.memoizedProps,s);else{if(typeof s!="string"&&t.stateNode===null)throw Error(O(166));if(r=$t(_i.current),$t(ot.current),Xi(t)){if(s=t.stateNode,r=t.memoizedProps,s[st]=t,(i=s.nodeValue!==r)&&(e=Me,e!==null))switch(e.tag){case 3:qi(s.nodeValue,r,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&qi(s.nodeValue,r,(e.mode&1)!==0)}i&&(t.flags|=4)}else s=(r.nodeType===9?r:r.ownerDocument).createTextNode(s),s[st]=t,t.stateNode=s}return ye(t),null;case 13:if(te(ie),s=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(re&&Pe!==null&&(t.mode&1)!==0&&(t.flags&128)===0)eu(),kr(),t.flags|=98560,i=!1;else if(i=Xi(t),s!==null&&s.dehydrated!==null){if(e===null){if(!i)throw Error(O(318));if(i=t.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(O(317));i[st]=t}else kr(),(t.flags&128)===0&&(t.memoizedState=null),t.flags|=4;ye(t),i=!1}else Qe!==null&&(xo(Qe),Qe=null),i=!0;if(!i)return t.flags&65536?t:null}return(t.flags&128)!==0?(t.lanes=r,t):(s=s!==null,s!==(e!==null&&e.memoizedState!==null)&&s&&(t.child.flags|=8192,(t.mode&1)!==0&&(e===null||(ie.current&1)!==0?he===0&&(he=3):hl())),t.updateQueue!==null&&(t.flags|=4),ye(t),null);case 4:return xr(),mo(e,t),e===null&&ui(t.stateNode.containerInfo),ye(t),null;case 10:return Xo(t.type._context),ye(t),null;case 17:return Ae(t.type)&&ms(),ye(t),null;case 19:if(te(ie),i=t.memoizedState,i===null)return ye(t),null;if(s=(t.flags&128)!==0,n=i.rendering,n===null)if(s)Ur(i,!1);else{if(he!==0||e!==null&&(e.flags&128)!==0)for(e=t.child;e!==null;){if(n=Ls(e),n!==null){for(t.flags|=128,Ur(i,!1),s=n.updateQueue,s!==null&&(t.updateQueue=s,t.flags|=4),t.subtreeFlags=0,s=r,r=t.child;r!==null;)i=r,e=s,i.flags&=14680066,n=i.alternate,n===null?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=n.childLanes,i.lanes=n.lanes,i.child=n.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=n.memoizedProps,i.memoizedState=n.memoizedState,i.updateQueue=n.updateQueue,i.type=n.type,e=n.dependencies,i.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return J(ie,ie.current&1|2),t.child}e=e.sibling}i.tail!==null&&ae()>br&&(t.flags|=128,s=!0,Ur(i,!1),t.lanes=4194304)}else{if(!s)if(e=Ls(n),e!==null){if(t.flags|=128,s=!0,r=e.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),Ur(i,!0),i.tail===null&&i.tailMode==="hidden"&&!n.alternate&&!re)return ye(t),null}else 2*ae()-i.renderingStartTime>br&&r!==1073741824&&(t.flags|=128,s=!0,Ur(i,!1),t.lanes=4194304);i.isBackwards?(n.sibling=t.child,t.child=n):(r=i.last,r!==null?r.sibling=n:t.child=n,i.last=n)}return i.tail!==null?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=ae(),t.sibling=null,r=ie.current,J(ie,s?r&1|2:r&1),t):(ye(t),null);case 22:case 23:return ul(),s=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==s&&(t.flags|=8192),s&&(t.mode&1)!==0?(Be&1073741824)!==0&&(ye(t),t.subtreeFlags&6&&(t.flags|=8192)):ye(t),null;case 24:return null;case 25:return null}throw Error(O(156,t.tag))}function _f(e,t){switch($o(t),t.tag){case 1:return Ae(t.type)&&ms(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return xr(),te(De),te(we),Jo(),e=t.flags,(e&65536)!==0&&(e&128)===0?(t.flags=e&-65537|128,t):null;case 5:return Zo(t),null;case 13:if(te(ie),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(O(340));kr()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return te(ie),null;case 4:return xr(),null;case 10:return Xo(t.type._context),null;case 22:case 23:return ul(),null;case 24:return null;default:return null}}var Qi=!1,Ce=!1,pf=typeof WeakSet=="function"?WeakSet:Set,U=null;function _r(e,t){var r=e.ref;if(r!==null)if(typeof r=="function")try{r(null)}catch(s){oe(e,t,s)}else r.current=null}function So(e,t,r){try{r()}catch(s){oe(e,t,s)}}var Ka=!1;function vf(e,t){if(to=_s,e=zc(),Wo(e)){if("selectionStart"in e)var r={start:e.selectionStart,end:e.selectionEnd};else e:{r=(r=e.ownerDocument)&&r.defaultView||window;var s=r.getSelection&&r.getSelection();if(s&&s.rangeCount!==0){r=s.anchorNode;var o=s.anchorOffset,i=s.focusNode;s=s.focusOffset;try{r.nodeType,i.nodeType}catch{r=null;break e}var n=0,a=-1,d=-1,_=0,S=0,m=e,v=null;t:for(;;){for(var p;m!==r||o!==0&&m.nodeType!==3||(a=n+o),m!==i||s!==0&&m.nodeType!==3||(d=n+s),m.nodeType===3&&(n+=m.nodeValue.length),(p=m.firstChild)!==null;)v=m,m=p;for(;;){if(m===e)break t;if(v===r&&++_===o&&(a=n),v===i&&++S===s&&(d=n),(p=m.nextSibling)!==null)break;m=v,v=m.parentNode}m=p}r=a===-1||d===-1?null:{start:a,end:d}}else r=null}r=r||{start:0,end:0}}else r=null;for(ro={focusedElem:e,selectionRange:r},_s=!1,U=t;U!==null;)if(t=U,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,U=e;else for(;U!==null;){t=U;try{var c=t.alternate;if((t.flags&1024)!==0)switch(t.tag){case 0:case 11:case 15:break;case 1:if(c!==null){var h=c.memoizedProps,u=c.memoizedState,l=t.stateNode,f=l.getSnapshotBeforeUpdate(t.elementType===t.type?h:Ge(t.type,h),u);l.__reactInternalSnapshotBeforeUpdate=f}break;case 3:var g=t.stateNode.containerInfo;g.nodeType===1?g.textContent="":g.nodeType===9&&g.documentElement&&g.removeChild(g.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(O(163))}}catch(C){oe(t,t.return,C)}if(e=t.sibling,e!==null){e.return=t.return,U=e;break}U=t.return}return c=Ka,Ka=!1,c}function Jr(e,t,r){var s=t.updateQueue;if(s=s!==null?s.lastEffect:null,s!==null){var o=s=s.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,i!==void 0&&So(t,r,i)}o=o.next}while(o!==s)}}function zs(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var r=t=t.next;do{if((r.tag&e)===e){var s=r.create;r.destroy=s()}r=r.next}while(r!==t)}}function yo(e){var t=e.ref;if(t!==null){var r=e.stateNode;switch(e.tag){case 5:e=r;break;default:e=r}typeof t=="function"?t(e):t.current=e}}function Fu(e){var t=e.alternate;t!==null&&(e.alternate=null,Fu(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[st],delete t[di],delete t[no],delete t[Qd],delete t[Zd])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Nu(e){return e.tag===5||e.tag===3||e.tag===4}function Va(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Nu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Co(e,t,r){var s=e.tag;if(s===5||s===6)e=e.stateNode,t?r.nodeType===8?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(r.nodeType===8?(t=r.parentNode,t.insertBefore(e,r)):(t=r,t.appendChild(e)),r=r._reactRootContainer,r!=null||t.onclick!==null||(t.onclick=gs));else if(s!==4&&(e=e.child,e!==null))for(Co(e,t,r),e=e.sibling;e!==null;)Co(e,t,r),e=e.sibling}function wo(e,t,r){var s=e.tag;if(s===5||s===6)e=e.stateNode,t?r.insertBefore(e,t):r.appendChild(e);else if(s!==4&&(e=e.child,e!==null))for(wo(e,t,r),e=e.sibling;e!==null;)wo(e,t,r),e=e.sibling}var pe=null,Ye=!1;function mt(e,t,r){for(r=r.child;r!==null;)Uu(e,t,r),r=r.sibling}function Uu(e,t,r){if(nt&&typeof nt.onCommitFiberUnmount=="function")try{nt.onCommitFiberUnmount(Ps,r)}catch{}switch(r.tag){case 5:Ce||_r(r,t);case 6:var s=pe,o=Ye;pe=null,mt(e,t,r),pe=s,Ye=o,pe!==null&&(Ye?(e=pe,r=r.stateNode,e.nodeType===8?e.parentNode.removeChild(r):e.removeChild(r)):pe.removeChild(r.stateNode));break;case 18:pe!==null&&(Ye?(e=pe,r=r.stateNode,e.nodeType===8?kn(e.parentNode,r):e.nodeType===1&&kn(e,r),li(e)):kn(pe,r.stateNode));break;case 4:s=pe,o=Ye,pe=r.stateNode.containerInfo,Ye=!0,mt(e,t,r),pe=s,Ye=o;break;case 0:case 11:case 14:case 15:if(!Ce&&(s=r.updateQueue,s!==null&&(s=s.lastEffect,s!==null))){o=s=s.next;do{var i=o,n=i.destroy;i=i.tag,n!==void 0&&((i&2)!==0||(i&4)!==0)&&So(r,t,n),o=o.next}while(o!==s)}mt(e,t,r);break;case 1:if(!Ce&&(_r(r,t),s=r.stateNode,typeof s.componentWillUnmount=="function"))try{s.props=r.memoizedProps,s.state=r.memoizedState,s.componentWillUnmount()}catch(a){oe(r,t,a)}mt(e,t,r);break;case 21:mt(e,t,r);break;case 22:r.mode&1?(Ce=(s=Ce)||r.memoizedState!==null,mt(e,t,r),Ce=s):mt(e,t,r);break;default:mt(e,t,r)}}function qa(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var r=e.stateNode;r===null&&(r=e.stateNode=new pf),t.forEach(function(s){var o=Lf.bind(null,e,s);r.has(s)||(r.add(s),s.then(o,o))})}}function Xe(e,t){var r=t.deletions;if(r!==null)for(var s=0;s<r.length;s++){var o=r[s];try{var i=e,n=t,a=n;e:for(;a!==null;){switch(a.tag){case 5:pe=a.stateNode,Ye=!1;break e;case 3:pe=a.stateNode.containerInfo,Ye=!0;break e;case 4:pe=a.stateNode.containerInfo,Ye=!0;break e}a=a.return}if(pe===null)throw Error(O(160));Uu(i,n,o),pe=null,Ye=!1;var d=o.alternate;d!==null&&(d.return=null),o.return=null}catch(_){oe(o,t,_)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)zu(t,e),t=t.sibling}function zu(e,t){var r=e.alternate,s=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Xe(t,e),rt(e),s&4){try{Jr(3,e,e.return),zs(3,e)}catch(h){oe(e,e.return,h)}try{Jr(5,e,e.return)}catch(h){oe(e,e.return,h)}}break;case 1:Xe(t,e),rt(e),s&512&&r!==null&&_r(r,r.return);break;case 5:if(Xe(t,e),rt(e),s&512&&r!==null&&_r(r,r.return),e.flags&32){var o=e.stateNode;try{ii(o,"")}catch(h){oe(e,e.return,h)}}if(s&4&&(o=e.stateNode,o!=null)){var i=e.memoizedProps,n=r!==null?r.memoizedProps:i,a=e.type,d=e.updateQueue;if(e.updateQueue=null,d!==null)try{a==="input"&&i.type==="radio"&&i.name!=null&&ac(o,i),Kn(a,n);var _=Kn(a,i);for(n=0;n<d.length;n+=2){var S=d[n],m=d[n+1];S==="style"?fc(o,m):S==="dangerouslySetInnerHTML"?hc(o,m):S==="children"?ii(o,m):Do(o,S,m,_)}switch(a){case"input":Un(o,i);break;case"textarea":cc(o,i);break;case"select":var v=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var p=i.value;p!=null?vr(o,!!i.multiple,p,!1):v!==!!i.multiple&&(i.defaultValue!=null?vr(o,!!i.multiple,i.defaultValue,!0):vr(o,!!i.multiple,i.multiple?[]:"",!1))}o[di]=i}catch(h){oe(e,e.return,h)}}break;case 6:if(Xe(t,e),rt(e),s&4){if(e.stateNode===null)throw Error(O(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(h){oe(e,e.return,h)}}break;case 3:if(Xe(t,e),rt(e),s&4&&r!==null&&r.memoizedState.isDehydrated)try{li(t.containerInfo)}catch(h){oe(e,e.return,h)}break;case 4:Xe(t,e),rt(e);break;case 13:Xe(t,e),rt(e),o=e.child,o.flags&8192&&(i=o.memoizedState!==null,o.stateNode.isHidden=i,!i||o.alternate!==null&&o.alternate.memoizedState!==null||(al=ae())),s&4&&qa(e);break;case 22:if(S=r!==null&&r.memoizedState!==null,e.mode&1?(Ce=(_=Ce)||S,Xe(t,e),Ce=_):Xe(t,e),rt(e),s&8192){if(_=e.memoizedState!==null,(e.stateNode.isHidden=_)&&!S&&(e.mode&1)!==0)for(U=e,S=e.child;S!==null;){for(m=U=S;U!==null;){switch(v=U,p=v.child,v.tag){case 0:case 11:case 14:case 15:Jr(4,v,v.return);break;case 1:_r(v,v.return);var c=v.stateNode;if(typeof c.componentWillUnmount=="function"){s=v,r=v.return;try{t=s,c.props=t.memoizedProps,c.state=t.memoizedState,c.componentWillUnmount()}catch(h){oe(s,r,h)}}break;case 5:_r(v,v.return);break;case 22:if(v.memoizedState!==null){Ga(m);continue}}p!==null?(p.return=v,U=p):Ga(m)}S=S.sibling}e:for(S=null,m=e;;){if(m.tag===5){if(S===null){S=m;try{o=m.stateNode,_?(i=o.style,typeof i.setProperty=="function"?i.setProperty("display","none","important"):i.display="none"):(a=m.stateNode,d=m.memoizedProps.style,n=d!=null&&d.hasOwnProperty("display")?d.display:null,a.style.display=dc("display",n))}catch(h){oe(e,e.return,h)}}}else if(m.tag===6){if(S===null)try{m.stateNode.nodeValue=_?"":m.memoizedProps}catch(h){oe(e,e.return,h)}}else if((m.tag!==22&&m.tag!==23||m.memoizedState===null||m===e)&&m.child!==null){m.child.return=m,m=m.child;continue}if(m===e)break e;for(;m.sibling===null;){if(m.return===null||m.return===e)break e;S===m&&(S=null),m=m.return}S===m&&(S=null),m.sibling.return=m.return,m=m.sibling}}break;case 19:Xe(t,e),rt(e),s&4&&qa(e);break;case 21:break;default:Xe(t,e),rt(e)}}function rt(e){var t=e.flags;if(t&2){try{e:{for(var r=e.return;r!==null;){if(Nu(r)){var s=r;break e}r=r.return}throw Error(O(160))}switch(s.tag){case 5:var o=s.stateNode;s.flags&32&&(ii(o,""),s.flags&=-33);var i=Va(e);wo(e,i,o);break;case 3:case 4:var n=s.stateNode.containerInfo,a=Va(e);Co(e,a,n);break;default:throw Error(O(161))}}catch(d){oe(e,e.return,d)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function gf(e,t,r){U=e,Wu(e,t,r)}function Wu(e,t,r){for(var s=(e.mode&1)!==0;U!==null;){var o=U,i=o.child;if(o.tag===22&&s){var n=o.memoizedState!==null||Qi;if(!n){var a=o.alternate,d=a!==null&&a.memoizedState!==null||Ce;a=Qi;var _=Ce;if(Qi=n,(Ce=d)&&!_)for(U=o;U!==null;)n=U,d=n.child,n.tag===22&&n.memoizedState!==null?Ya(o):d!==null?(d.return=n,U=d):Ya(o);for(;i!==null;)U=i,Wu(i,t,r),i=i.sibling;U=o,Qi=a,Ce=_}Xa(e,t,r)}else(o.subtreeFlags&8772)!==0&&i!==null?(i.return=o,U=i):Xa(e,t,r)}}function Xa(e){for(;U!==null;){var t=U;if((t.flags&8772)!==0){var r=t.alternate;try{if((t.flags&8772)!==0)switch(t.tag){case 0:case 11:case 15:Ce||zs(5,t);break;case 1:var s=t.stateNode;if(t.flags&4&&!Ce)if(r===null)s.componentDidMount();else{var o=t.elementType===t.type?r.memoizedProps:Ge(t.type,r.memoizedProps);s.componentDidUpdate(o,r.memoizedState,s.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;i!==null&&Ta(t,i,s);break;case 3:var n=t.updateQueue;if(n!==null){if(r=null,t.child!==null)switch(t.child.tag){case 5:r=t.child.stateNode;break;case 1:r=t.child.stateNode}Ta(t,n,r)}break;case 5:var a=t.stateNode;if(r===null&&t.flags&4){r=a;var d=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":d.autoFocus&&r.focus();break;case"img":d.src&&(r.src=d.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var _=t.alternate;if(_!==null){var S=_.memoizedState;if(S!==null){var m=S.dehydrated;m!==null&&li(m)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(O(163))}Ce||t.flags&512&&yo(t)}catch(v){oe(t,t.return,v)}}if(t===e){U=null;break}if(r=t.sibling,r!==null){r.return=t.return,U=r;break}U=t.return}}function Ga(e){for(;U!==null;){var t=U;if(t===e){U=null;break}var r=t.sibling;if(r!==null){r.return=t.return,U=r;break}U=t.return}}function Ya(e){for(;U!==null;){var t=U;try{switch(t.tag){case 0:case 11:case 15:var r=t.return;try{zs(4,t)}catch(d){oe(t,r,d)}break;case 1:var s=t.stateNode;if(typeof s.componentDidMount=="function"){var o=t.return;try{s.componentDidMount()}catch(d){oe(t,o,d)}}var i=t.return;try{yo(t)}catch(d){oe(t,i,d)}break;case 5:var n=t.return;try{yo(t)}catch(d){oe(t,n,d)}}}catch(d){oe(t,t.return,d)}if(t===e){U=null;break}var a=t.sibling;if(a!==null){a.return=t.return,U=a;break}U=t.return}}var mf=Math.ceil,bs=vt.ReactCurrentDispatcher,ol=vt.ReactCurrentOwner,We=vt.ReactCurrentBatchConfig,Y=0,fe=null,ce=null,ve=0,Be=0,pr=It(0),he=0,mi=null,Yt=0,Ws=0,ll=0,ei=null,Re=null,al=0,br=1/0,lt=null,Ds=!1,Eo=null,At=null,Zi=!1,kt=null,As=0,ti=0,ko=null,os=-1,ls=0;function Le(){return(Y&6)!==0?ae():os!==-1?os:os=ae()}function Tt(e){return(e.mode&1)===0?1:(Y&2)!==0&&ve!==0?ve&-ve:ef.transition!==null?(ls===0&&(ls=Lc()),ls):(e=Q,e!==0||(e=window.event,e=e===void 0?16:Bc(e.type)),e)}function Je(e,t,r,s){if(50<ti)throw ti=0,ko=null,Error(O(185));Si(e,r,s),((Y&2)===0||e!==fe)&&(e===fe&&((Y&2)===0&&(Ws|=r),he===4&&wt(e,ve)),Te(e,s),r===1&&Y===0&&(t.mode&1)===0&&(br=ae()+500,Fs&&Ht()))}function Te(e,t){var r=e.callbackNode;rd(e,t);var s=fs(e,e===fe?ve:0);if(s===0)r!==null&&sa(r),e.callbackNode=null,e.callbackPriority=0;else if(t=s&-s,e.callbackPriority!==t){if(r!=null&&sa(r),t===1)e.tag===0?Jd(Qa.bind(null,e)):Qc(Qa.bind(null,e)),Gd(function(){(Y&6)===0&&Ht()}),r=null;else{switch(xc(s)){case 1:r=Mo;break;case 4:r=Ec;break;case 16:r=ds;break;case 536870912:r=kc;break;default:r=ds}r=Yu(r,ju.bind(null,e))}e.callbackPriority=t,e.callbackNode=r}}function ju(e,t){if(os=-1,ls=0,(Y&6)!==0)throw Error(O(327));var r=e.callbackNode;if(Cr()&&e.callbackNode!==r)return null;var s=fs(e,e===fe?ve:0);if(s===0)return null;if((s&30)!==0||(s&e.expiredLanes)!==0||t)t=Ts(e,s);else{t=s;var o=Y;Y|=2;var i=Ku();(fe!==e||ve!==t)&&(lt=null,br=ae()+500,Kt(e,t));do try{Cf();break}catch(a){$u(e,a)}while(1);qo(),bs.current=i,Y=o,ce!==null?t=0:(fe=null,ve=0,t=he)}if(t!==0){if(t===2&&(o=Yn(e),o!==0&&(s=o,t=Lo(e,o))),t===1)throw r=mi,Kt(e,0),wt(e,s),Te(e,ae()),r;if(t===6)wt(e,s);else{if(o=e.current.alternate,(s&30)===0&&!Sf(o)&&(t=Ts(e,s),t===2&&(i=Yn(e),i!==0&&(s=i,t=Lo(e,i))),t===1))throw r=mi,Kt(e,0),wt(e,s),Te(e,ae()),r;switch(e.finishedWork=o,e.finishedLanes=s,t){case 0:case 1:throw Error(O(345));case 2:zt(e,Re,lt);break;case 3:if(wt(e,s),(s&130023424)===s&&(t=al+500-ae(),10<t)){if(fs(e,0)!==0)break;if(o=e.suspendedLanes,(o&s)!==s){Le(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=so(zt.bind(null,e,Re,lt),t);break}zt(e,Re,lt);break;case 4:if(wt(e,s),(s&4194240)===s)break;for(t=e.eventTimes,o=-1;0<s;){var n=31-Ze(s);i=1<<n,n=t[n],n>o&&(o=n),s&=~i}if(s=o,s=ae()-s,s=(120>s?120:480>s?480:1080>s?1080:1920>s?1920:3e3>s?3e3:4320>s?4320:1960*mf(s/1960))-s,10<s){e.timeoutHandle=so(zt.bind(null,e,Re,lt),s);break}zt(e,Re,lt);break;case 5:zt(e,Re,lt);break;default:throw Error(O(329))}}}return Te(e,ae()),e.callbackNode===r?ju.bind(null,e):null}function Lo(e,t){var r=ei;return e.current.memoizedState.isDehydrated&&(Kt(e,t).flags|=256),e=Ts(e,t),e!==2&&(t=Re,Re=r,t!==null&&xo(t)),e}function xo(e){Re===null?Re=e:Re.push.apply(Re,e)}function Sf(e){for(var t=e;;){if(t.flags&16384){var r=t.updateQueue;if(r!==null&&(r=r.stores,r!==null))for(var s=0;s<r.length;s++){var o=r[s],i=o.getSnapshot;o=o.value;try{if(!et(i(),o))return!1}catch{return!1}}}if(r=t.child,t.subtreeFlags&16384&&r!==null)r.return=t,t=r;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function wt(e,t){for(t&=~ll,t&=~Ws,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-Ze(t),s=1<<r;e[r]=-1,t&=~s}}function Qa(e){if((Y&6)!==0)throw Error(O(327));Cr();var t=fs(e,0);if((t&1)===0)return Te(e,ae()),null;var r=Ts(e,t);if(e.tag!==0&&r===2){var s=Yn(e);s!==0&&(t=s,r=Lo(e,s))}if(r===1)throw r=mi,Kt(e,0),wt(e,t),Te(e,ae()),r;if(r===6)throw Error(O(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,zt(e,Re,lt),Te(e,ae()),null}function cl(e,t){var r=Y;Y|=1;try{return e(t)}finally{Y=r,Y===0&&(br=ae()+500,Fs&&Ht())}}function Qt(e){kt!==null&&kt.tag===0&&(Y&6)===0&&Cr();var t=Y;Y|=1;var r=We.transition,s=Q;try{if(We.transition=null,Q=1,e)return e()}finally{Q=s,We.transition=r,Y=t,(Y&6)===0&&Ht()}}function ul(){Be=pr.current,te(pr)}function Kt(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(r!==-1&&(e.timeoutHandle=-1,Xd(r)),ce!==null)for(r=ce.return;r!==null;){var s=r;switch($o(s),s.tag){case 1:s=s.type.childContextTypes,s!=null&&ms();break;case 3:xr(),te(De),te(we),Jo();break;case 5:Zo(s);break;case 4:xr();break;case 13:te(ie);break;case 19:te(ie);break;case 10:Xo(s.type._context);break;case 22:case 23:ul()}r=r.return}if(fe=e,ce=e=Bt(e.current,null),ve=Be=t,he=0,mi=null,ll=Ws=Yt=0,Re=ei=null,jt!==null){for(t=0;t<jt.length;t++)if(r=jt[t],s=r.interleaved,s!==null){r.interleaved=null;var o=s.next,i=r.pending;if(i!==null){var n=i.next;i.next=o,s.next=n}r.pending=s}jt=null}return e}function $u(e,t){do{var r=ce;try{if(qo(),is.current=Rs,xs){for(var s=se.memoizedState;s!==null;){var o=s.queue;o!==null&&(o.pending=null),s=s.next}xs=!1}if(Gt=0,de=ue=se=null,Zr=!1,pi=0,ol.current=null,r===null||r.return===null){he=1,mi=t,ce=null;break}e:{var i=e,n=r.return,a=r,d=t;if(t=ve,a.flags|=32768,d!==null&&typeof d=="object"&&typeof d.then=="function"){var _=d,S=a,m=S.tag;if((S.mode&1)===0&&(m===0||m===11||m===15)){var v=S.alternate;v?(S.updateQueue=v.updateQueue,S.memoizedState=v.memoizedState,S.lanes=v.lanes):(S.updateQueue=null,S.memoizedState=null)}var p=Fa(n);if(p!==null){p.flags&=-257,Na(p,n,a,i,t),p.mode&1&&Ha(i,_,t),t=p,d=_;var c=t.updateQueue;if(c===null){var h=new Set;h.add(d),t.updateQueue=h}else c.add(d);break e}else{if((t&1)===0){Ha(i,_,t),hl();break e}d=Error(O(426))}}else if(re&&a.mode&1){var u=Fa(n);if(u!==null){(u.flags&65536)===0&&(u.flags|=256),Na(u,n,a,i,t),Ko(Rr(d,a));break e}}i=d=Rr(d,a),he!==4&&(he=2),ei===null?ei=[i]:ei.push(i),i=n;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t;var l=Ru(i,d,t);Aa(i,l);break e;case 1:a=d;var f=i.type,g=i.stateNode;if((i.flags&128)===0&&(typeof f.getDerivedStateFromError=="function"||g!==null&&typeof g.componentDidCatch=="function"&&(At===null||!At.has(g)))){i.flags|=65536,t&=-t,i.lanes|=t;var C=bu(i,a,t);Aa(i,C);break e}}i=i.return}while(i!==null)}qu(r)}catch(k){t=k,ce===r&&r!==null&&(ce=r=r.return);continue}break}while(1)}function Ku(){var e=bs.current;return bs.current=Rs,e===null?Rs:e}function hl(){(he===0||he===3||he===2)&&(he=4),fe===null||(Yt&268435455)===0&&(Ws&268435455)===0||wt(fe,ve)}function Ts(e,t){var r=Y;Y|=2;var s=Ku();(fe!==e||ve!==t)&&(lt=null,Kt(e,t));do try{yf();break}catch(o){$u(e,o)}while(1);if(qo(),Y=r,bs.current=s,ce!==null)throw Error(O(261));return fe=null,ve=0,he}function yf(){for(;ce!==null;)Vu(ce)}function Cf(){for(;ce!==null&&!qh();)Vu(ce)}function Vu(e){var t=Gu(e.alternate,e,Be);e.memoizedProps=e.pendingProps,t===null?qu(e):ce=t,ol.current=null}function qu(e){var t=e;do{var r=t.alternate;if(e=t.return,(t.flags&32768)===0){if(r=ff(r,t,Be),r!==null){ce=r;return}}else{if(r=_f(r,t),r!==null){r.flags&=32767,ce=r;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{he=6,ce=null;return}}if(t=t.sibling,t!==null){ce=t;return}ce=t=e}while(t!==null);he===0&&(he=5)}function zt(e,t,r){var s=Q,o=We.transition;try{We.transition=null,Q=1,wf(e,t,r,s)}finally{We.transition=o,Q=s}return null}function wf(e,t,r,s){do Cr();while(kt!==null);if((Y&6)!==0)throw Error(O(327));r=e.finishedWork;var o=e.finishedLanes;if(r===null)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(O(177));e.callbackNode=null,e.callbackPriority=0;var i=r.lanes|r.childLanes;if(id(e,i),e===fe&&(ce=fe=null,ve=0),(r.subtreeFlags&2064)===0&&(r.flags&2064)===0||Zi||(Zi=!0,Yu(ds,function(){return Cr(),null})),i=(r.flags&15990)!==0,(r.subtreeFlags&15990)!==0||i){i=We.transition,We.transition=null;var n=Q;Q=1;var a=Y;Y|=4,ol.current=null,vf(e,r),zu(r,e),jd(ro),_s=!!to,ro=to=null,e.current=r,gf(r,e,o),Xh(),Y=a,Q=n,We.transition=i}else e.current=r;if(Zi&&(Zi=!1,kt=e,As=o),i=e.pendingLanes,i===0&&(At=null),Qh(r.stateNode,s),Te(e,ae()),t!==null)for(s=e.onRecoverableError,r=0;r<t.length;r++)o=t[r],s(o.value,{componentStack:o.stack,digest:o.digest});if(Ds)throw Ds=!1,e=Eo,Eo=null,e;return(As&1)!==0&&e.tag!==0&&Cr(),i=e.pendingLanes,(i&1)!==0?e===ko?ti++:(ti=0,ko=e):ti=0,Ht(),null}function Cr(){if(kt!==null){var e=xc(As),t=We.transition,r=Q;try{if(We.transition=null,Q=16>e?16:e,kt===null)var s=!1;else{if(e=kt,kt=null,As=0,(Y&6)!==0)throw Error(O(331));var o=Y;for(Y|=4,U=e.current;U!==null;){var i=U,n=i.child;if((U.flags&16)!==0){var a=i.deletions;if(a!==null){for(var d=0;d<a.length;d++){var _=a[d];for(U=_;U!==null;){var S=U;switch(S.tag){case 0:case 11:case 15:Jr(8,S,i)}var m=S.child;if(m!==null)m.return=S,U=m;else for(;U!==null;){S=U;var v=S.sibling,p=S.return;if(Fu(S),S===_){U=null;break}if(v!==null){v.return=p,U=v;break}U=p}}}var c=i.alternate;if(c!==null){var h=c.child;if(h!==null){c.child=null;do{var u=h.sibling;h.sibling=null,h=u}while(h!==null)}}U=i}}if((i.subtreeFlags&2064)!==0&&n!==null)n.return=i,U=n;else e:for(;U!==null;){if(i=U,(i.flags&2048)!==0)switch(i.tag){case 0:case 11:case 15:Jr(9,i,i.return)}var l=i.sibling;if(l!==null){l.return=i.return,U=l;break e}U=i.return}}var f=e.current;for(U=f;U!==null;){n=U;var g=n.child;if((n.subtreeFlags&2064)!==0&&g!==null)g.return=n,U=g;else e:for(n=f;U!==null;){if(a=U,(a.flags&2048)!==0)try{switch(a.tag){case 0:case 11:case 15:zs(9,a)}}catch(k){oe(a,a.return,k)}if(a===n){U=null;break e}var C=a.sibling;if(C!==null){C.return=a.return,U=C;break e}U=a.return}}if(Y=o,Ht(),nt&&typeof nt.onPostCommitFiberRoot=="function")try{nt.onPostCommitFiberRoot(Ps,e)}catch{}s=!0}return s}finally{Q=r,We.transition=t}}return!1}function Za(e,t,r){t=Rr(r,t),t=Ru(e,t,1),e=Dt(e,t,1),t=Le(),e!==null&&(Si(e,1,t),Te(e,t))}function oe(e,t,r){if(e.tag===3)Za(e,e,r);else for(;t!==null;){if(t.tag===3){Za(t,e,r);break}else if(t.tag===1){var s=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof s.componentDidCatch=="function"&&(At===null||!At.has(s))){e=Rr(r,e),e=bu(t,e,1),t=Dt(t,e,1),e=Le(),t!==null&&(Si(t,1,e),Te(t,e));break}}t=t.return}}function Ef(e,t,r){var s=e.pingCache;s!==null&&s.delete(t),t=Le(),e.pingedLanes|=e.suspendedLanes&r,fe===e&&(ve&r)===r&&(he===4||he===3&&(ve&130023424)===ve&&500>ae()-al?Kt(e,0):ll|=r),Te(e,t)}function Xu(e,t){t===0&&((e.mode&1)===0?t=1:(t=Fi,Fi<<=1,(Fi&130023424)===0&&(Fi=4194304)));var r=Le();e=_t(e,t),e!==null&&(Si(e,t,r),Te(e,r))}function kf(e){var t=e.memoizedState,r=0;t!==null&&(r=t.retryLane),Xu(e,r)}function Lf(e,t){var r=0;switch(e.tag){case 13:var s=e.stateNode,o=e.memoizedState;o!==null&&(r=o.retryLane);break;case 19:s=e.stateNode;break;default:throw Error(O(314))}s!==null&&s.delete(t),Xu(e,r)}var Gu;Gu=function(e,t,r){if(e!==null)if(e.memoizedProps!==t.pendingProps||De.current)be=!0;else{if((e.lanes&r)===0&&(t.flags&128)===0)return be=!1,df(e,t,r);be=(e.flags&131072)!==0}else be=!1,re&&(t.flags&1048576)!==0&&Zc(t,Cs,t.index);switch(t.lanes=0,t.tag){case 2:var s=t.type;ns(e,t),e=t.pendingProps;var o=Er(t,we.current);yr(t,r),o=tl(null,t,s,e,o,r);var i=rl();return t.flags|=1,typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ae(s)?(i=!0,Ss(t)):i=!1,t.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,Yo(t),o.updater=Ns,t.stateNode=o,o._reactInternals=t,ho(t,s,e,r),t=po(null,t,s,!0,i,r)):(t.tag=0,re&&i&&jo(t),ke(null,t,o,r),t=t.child),t;case 16:s=t.elementType;e:{switch(ns(e,t),e=t.pendingProps,o=s._init,s=o(s._payload),t.type=s,o=t.tag=Rf(s),e=Ge(s,e),o){case 0:t=_o(null,t,s,e,r);break e;case 1:t=Wa(null,t,s,e,r);break e;case 11:t=Ua(null,t,s,e,r);break e;case 14:t=za(null,t,s,Ge(s.type,e),r);break e}throw Error(O(306,s,""))}return t;case 0:return s=t.type,o=t.pendingProps,o=t.elementType===s?o:Ge(s,o),_o(e,t,s,o,r);case 1:return s=t.type,o=t.pendingProps,o=t.elementType===s?o:Ge(s,o),Wa(e,t,s,o,r);case 3:e:{if(Bu(t),e===null)throw Error(O(387));s=t.pendingProps,i=t.memoizedState,o=i.element,ru(e,t),ks(t,s,null,r);var n=t.memoizedState;if(s=n.element,i.isDehydrated)if(i={element:s,isDehydrated:!1,cache:n.cache,pendingSuspenseBoundaries:n.pendingSuspenseBoundaries,transitions:n.transitions},t.updateQueue.baseState=i,t.memoizedState=i,t.flags&256){o=Rr(Error(O(423)),t),t=ja(e,t,s,r,o);break e}else if(s!==o){o=Rr(Error(O(424)),t),t=ja(e,t,s,r,o);break e}else for(Pe=bt(t.stateNode.containerInfo.firstChild),Me=t,re=!0,Qe=null,r=ou(t,null,s,r),t.child=r;r;)r.flags=r.flags&-3|4096,r=r.sibling;else{if(kr(),s===o){t=pt(e,t,r);break e}ke(e,t,s,r)}t=t.child}return t;case 5:return lu(t),e===null&&ao(t),s=t.type,o=t.pendingProps,i=e!==null?e.memoizedProps:null,n=o.children,io(s,o)?n=null:i!==null&&io(s,i)&&(t.flags|=32),Tu(e,t),ke(e,t,n,r),t.child;case 6:return e===null&&ao(t),null;case 13:return Pu(e,t,r);case 4:return Qo(t,t.stateNode.containerInfo),s=t.pendingProps,e===null?t.child=Lr(t,null,s,r):ke(e,t,s,r),t.child;case 11:return s=t.type,o=t.pendingProps,o=t.elementType===s?o:Ge(s,o),Ua(e,t,s,o,r);case 7:return ke(e,t,t.pendingProps,r),t.child;case 8:return ke(e,t,t.pendingProps.children,r),t.child;case 12:return ke(e,t,t.pendingProps.children,r),t.child;case 10:e:{if(s=t.type._context,o=t.pendingProps,i=t.memoizedProps,n=o.value,J(ws,s._currentValue),s._currentValue=n,i!==null)if(et(i.value,n)){if(i.children===o.children&&!De.current){t=pt(e,t,r);break e}}else for(i=t.child,i!==null&&(i.return=t);i!==null;){var a=i.dependencies;if(a!==null){n=i.child;for(var d=a.firstContext;d!==null;){if(d.context===s){if(i.tag===1){d=ht(-1,r&-r),d.tag=2;var _=i.updateQueue;if(_!==null){_=_.shared;var S=_.pending;S===null?d.next=d:(d.next=S.next,S.next=d),_.pending=d}}i.lanes|=r,d=i.alternate,d!==null&&(d.lanes|=r),co(i.return,r,t),a.lanes|=r;break}d=d.next}}else if(i.tag===10)n=i.type===t.type?null:i.child;else if(i.tag===18){if(n=i.return,n===null)throw Error(O(341));n.lanes|=r,a=n.alternate,a!==null&&(a.lanes|=r),co(n,r,t),n=i.sibling}else n=i.child;if(n!==null)n.return=i;else for(n=i;n!==null;){if(n===t){n=null;break}if(i=n.sibling,i!==null){i.return=n.return,n=i;break}n=n.return}i=n}ke(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,s=t.pendingProps.children,yr(t,r),o=je(o),s=s(o),t.flags|=1,ke(e,t,s,r),t.child;case 14:return s=t.type,o=Ge(s,t.pendingProps),o=Ge(s.type,o),za(e,t,s,o,r);case 15:return Du(e,t,t.type,t.pendingProps,r);case 17:return s=t.type,o=t.pendingProps,o=t.elementType===s?o:Ge(s,o),ns(e,t),t.tag=1,Ae(s)?(e=!0,Ss(t)):e=!1,yr(t,r),su(t,s,o),ho(t,s,o,r),po(null,t,s,!0,e,r);case 19:return Mu(e,t,r);case 22:return Au(e,t,r)}throw Error(O(156,t.tag))};function Yu(e,t){return wc(e,t)}function xf(e,t,r,s){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=s,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function ze(e,t,r,s){return new xf(e,t,r,s)}function dl(e){return e=e.prototype,!(!e||!e.isReactComponent)}function Rf(e){if(typeof e=="function")return dl(e)?1:0;if(e!=null){if(e=e.$$typeof,e===To)return 11;if(e===Bo)return 14}return 2}function Bt(e,t){var r=e.alternate;return r===null?(r=ze(e.tag,t,e.key,e.mode),r.elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.subtreeFlags=0,r.deletions=null),r.flags=e.flags&14680064,r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function as(e,t,r,s,o,i){var n=2;if(s=e,typeof e=="function")dl(e)&&(n=1);else if(typeof e=="string")n=5;else e:switch(e){case nr:return Vt(r.children,o,i,t);case Ao:n=8,o|=8;break;case On:return e=ze(12,r,t,o|2),e.elementType=On,e.lanes=i,e;case In:return e=ze(13,r,t,o),e.elementType=In,e.lanes=i,e;case Hn:return e=ze(19,r,t,o),e.elementType=Hn,e.lanes=i,e;case nc:return js(r,o,i,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case ic:n=10;break e;case sc:n=9;break e;case To:n=11;break e;case Bo:n=14;break e;case St:n=16,s=null;break e}throw Error(O(130,e==null?e:typeof e,""))}return t=ze(n,r,t,o),t.elementType=e,t.type=s,t.lanes=i,t}function Vt(e,t,r,s){return e=ze(7,e,s,t),e.lanes=r,e}function js(e,t,r,s){return e=ze(22,e,s,t),e.elementType=nc,e.lanes=r,e.stateNode={isHidden:!1},e}function Bn(e,t,r){return e=ze(6,e,null,t),e.lanes=r,e}function Pn(e,t,r){return t=ze(4,e.children!==null?e.children:[],e.key,t),t.lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function bf(e,t,r,s,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vn(0),this.expirationTimes=vn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vn(0),this.identifierPrefix=s,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function fl(e,t,r,s,o,i,n,a,d){return e=new bf(e,t,r,a,d),t===1?(t=1,i===!0&&(t|=8)):t=0,i=ze(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:s,isDehydrated:r,cache:null,transitions:null,pendingSuspenseBoundaries:null},Yo(i),e}function Df(e,t,r){var s=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:sr,key:s==null?null:""+s,children:e,containerInfo:t,implementation:r}}function Qu(e){if(!e)return Mt;e=e._reactInternals;e:{if(Jt(e)!==e||e.tag!==1)throw Error(O(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ae(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(O(171))}if(e.tag===1){var r=e.type;if(Ae(r))return Yc(e,r,t)}return t}function Zu(e,t,r,s,o,i,n,a,d){return e=fl(r,s,!0,e,o,i,n,a,d),e.context=Qu(null),r=e.current,s=Le(),o=Tt(r),i=ht(s,o),i.callback=t!=null?t:null,Dt(r,i,o),e.current.lanes=o,Si(e,o,s),Te(e,s),e}function $s(e,t,r,s){var o=t.current,i=Le(),n=Tt(o);return r=Qu(r),t.context===null?t.context=r:t.pendingContext=r,t=ht(i,n),t.payload={element:e},s=s===void 0?null:s,s!==null&&(t.callback=s),e=Dt(o,t,n),e!==null&&(Je(e,o,n,i),rs(e,o,n)),n}function Bs(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function Ja(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var r=e.retryLane;e.retryLane=r!==0&&r<t?r:t}}function _l(e,t){Ja(e,t),(e=e.alternate)&&Ja(e,t)}function Af(){return null}var Ju=typeof reportError=="function"?reportError:function(e){console.error(e)};function pl(e){this._internalRoot=e}Ks.prototype.render=pl.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(O(409));$s(e,t,null,null)};Ks.prototype.unmount=pl.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;Qt(function(){$s(null,e,null,null)}),t[ft]=null}};function Ks(e){this._internalRoot=e}Ks.prototype.unstable_scheduleHydration=function(e){if(e){var t=Dc();e={blockedOn:null,target:e,priority:t};for(var r=0;r<Ct.length&&t!==0&&t<Ct[r].priority;r++);Ct.splice(r,0,e),r===0&&Tc(e)}};function vl(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Vs(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function ec(){}function Tf(e,t,r,s,o){if(o){if(typeof s=="function"){var i=s;s=function(){var _=Bs(n);i.call(_)}}var n=Zu(t,s,e,0,null,!1,!1,"",ec);return e._reactRootContainer=n,e[ft]=n.current,ui(e.nodeType===8?e.parentNode:e),Qt(),n}for(;o=e.lastChild;)e.removeChild(o);if(typeof s=="function"){var a=s;s=function(){var _=Bs(d);a.call(_)}}var d=fl(e,0,!1,null,null,!1,!1,"",ec);return e._reactRootContainer=d,e[ft]=d.current,ui(e.nodeType===8?e.parentNode:e),Qt(function(){$s(t,d,r,s)}),d}function qs(e,t,r,s,o){var i=r._reactRootContainer;if(i){var n=i;if(typeof o=="function"){var a=o;o=function(){var d=Bs(n);a.call(d)}}$s(t,n,e,o)}else n=Tf(r,t,e,o,s);return Bs(n)}Rc=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var r=Kr(t.pendingLanes);r!==0&&(Oo(t,r|1),Te(t,ae()),(Y&6)===0&&(br=ae()+500,Ht()))}break;case 13:Qt(function(){var s=_t(e,1);if(s!==null){var o=Le();Je(s,e,1,o)}}),_l(e,1)}};Io=function(e){if(e.tag===13){var t=_t(e,134217728);if(t!==null){var r=Le();Je(t,e,134217728,r)}_l(e,134217728)}};bc=function(e){if(e.tag===13){var t=Tt(e),r=_t(e,t);if(r!==null){var s=Le();Je(r,e,t,s)}_l(e,t)}};Dc=function(){return Q};Ac=function(e,t){var r=Q;try{return Q=e,t()}finally{Q=r}};qn=function(e,t,r){switch(t){case"input":if(Un(e,r),t=r.name,r.type==="radio"&&t!=null){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var s=r[t];if(s!==e&&s.form===e.form){var o=Hs(s);if(!o)throw Error(O(90));lc(s),Un(s,o)}}}break;case"textarea":cc(e,r);break;case"select":t=r.value,t!=null&&vr(e,!!r.multiple,t,!1)}};vc=cl;gc=Qt;var Bf={usingClientEntryPoint:!1,Events:[Ci,cr,Hs,_c,pc,cl]},zr={findFiberByHostInstance:Wt,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},Pf={bundleType:zr.bundleType,version:zr.version,rendererPackageName:zr.rendererPackageName,rendererConfig:zr.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:vt.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=yc(e),e===null?null:e.stateNode},findFiberByHostInstance:zr.findFiberByHostInstance||Af,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&(Wr=__REACT_DEVTOOLS_GLOBAL_HOOK__,!Wr.isDisabled&&Wr.supportsFiber))try{Ps=Wr.inject(Pf),nt=Wr}catch{}var Wr;He.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Bf;He.createPortal=function(e,t){var r=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!vl(t))throw Error(O(200));return Df(e,t,null,r)};He.createRoot=function(e,t){if(!vl(e))throw Error(O(299));var r=!1,s="",o=Ju;return t!=null&&(t.unstable_strictMode===!0&&(r=!0),t.identifierPrefix!==void 0&&(s=t.identifierPrefix),t.onRecoverableError!==void 0&&(o=t.onRecoverableError)),t=fl(e,1,!1,null,null,r,!1,s,o),e[ft]=t.current,ui(e.nodeType===8?e.parentNode:e),new pl(t)};He.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(O(188)):(e=Object.keys(e).join(","),Error(O(268,e)));return e=yc(t),e=e===null?null:e.stateNode,e};He.flushSync=function(e){return Qt(e)};He.hydrate=function(e,t,r){if(!Vs(t))throw Error(O(200));return qs(null,e,t,!0,r)};He.hydrateRoot=function(e,t,r){if(!vl(e))throw Error(O(405));var s=r!=null&&r.hydratedSources||null,o=!1,i="",n=Ju;if(r!=null&&(r.unstable_strictMode===!0&&(o=!0),r.identifierPrefix!==void 0&&(i=r.identifierPrefix),r.onRecoverableError!==void 0&&(n=r.onRecoverableError)),t=Zu(t,null,e,1,r!=null?r:null,o,!1,i,n),e[ft]=t.current,ui(e),s)for(e=0;e<s.length;e++)r=s[e],o=r._getVersion,o=o(r._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[r,o]:t.mutableSourceEagerHydrationData.push(r,o);return new Ks(t)};He.render=function(e,t,r){if(!Vs(t))throw Error(O(200));return qs(null,e,t,!1,r)};He.unmountComponentAtNode=function(e){if(!Vs(e))throw Error(O(40));return e._reactRootContainer?(Qt(function(){qs(null,null,e,!1,function(){e._reactRootContainer=null,e[ft]=null})}),!0):!1};He.unstable_batchedUpdates=cl;He.unstable_renderSubtreeIntoContainer=function(e,t,r,s){if(!Vs(r))throw Error(O(200));if(e==null||e._reactInternals===void 0)throw Error(O(38));return qs(e,t,r,!1,s)};He.version="18.2.0-next-9e3b772b8-20220608"});var ih=Ve((K_,rh)=>{"use strict";function th(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(th)}catch(e){console.error(e)}}th(),rh.exports=eh()});var nh=Ve(gl=>{"use strict";var sh=ih();gl.createRoot=sh.createRoot,gl.hydrateRoot=sh.hydrateRoot;var V_});var lh=Ve(Xs=>{"use strict";var Mf=bi(),Of=Symbol.for("react.element"),If=Symbol.for("react.fragment"),Hf=Object.prototype.hasOwnProperty,Ff=Mf.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Nf={key:!0,ref:!0,__self:!0,__source:!0};function oh(e,t,r){var s,o={},i=null,n=null;r!==void 0&&(i=""+r),t.key!==void 0&&(i=""+t.key),t.ref!==void 0&&(n=t.ref);for(s in t)Hf.call(t,s)&&!Nf.hasOwnProperty(s)&&(o[s]=t[s]);if(e&&e.defaultProps)for(s in t=e.defaultProps,t)o[s]===void 0&&(o[s]=t[s]);return{$$typeof:Of,type:e,key:i,ref:n,props:o,_owner:Ff.current}}Xs.Fragment=If;Xs.jsx=oh;Xs.jsxs=oh});var ml=Ve((Q_,ah)=>{"use strict";ah.exports=lh()});var ch=er(El()),uh=er(kl()),Sl=er(nh());var Ft=er(bi()),_e=er(ml());window.RenderTask=e=>{function t(s){let[o,i]=(0,Ft.useState)("Loading..."),[n,a]=(0,Ft.useState)(""),[d,_]=(0,Ft.useState)(!0),S=(0,Ft.useRef)();return(0,Ft.useEffect)(()=>{let m,v=new WebSocket(`ws://${window.location.host}/_dev_/ws/${s.taskKey}`);v.onerror=function(h){m=h,window.RenderError({msg:"WebSocket \u94FE\u63A5\u9519\u8BEF\uFF0C\u8BF7\u68C0\u67E5\u63A7\u5236\u53F0"})},v.onclose=function(h){m||(i("Load Done"),_(!1),a("Page will refresh in a second"),localStorage.getItem("debug")||setTimeout(()=>{window.location.reload()},1e3))};let p=new ch.Terminal({convertEol:!0});p.open(S.current);let c=new uh.AttachAddon(v);p==null||p.loadAddon(c)},[]),(0,_e.jsxs)("div",{className:"max-w-5xl mx-auto",children:[(0,_e.jsxs)("div",{className:"my-12",children:[(0,_e.jsxs)("div",{className:"flex justify-center items-center",children:[(0,_e.jsxs)("svg",{className:"transition-all duration-1000 animate-spin -ml-1 mr-3 h-5 w-5",style:d?{}:{width:"0px"},xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",children:[(0,_e.jsx)("circle",{className:"opacity-25",cx:"12",cy:"12",r:"10",stroke:"currentColor","stroke-width":"4"}),(0,_e.jsx)("path",{className:"opacity-75",fill:"currentColor",d:"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"})]}),(0,_e.jsx)("h2",{className:"text-center text-lg",children:o})]}),(0,_e.jsx)("p",{className:"text-center text-sm",children:n})]}),(0,_e.jsx)("div",{ref:S,className:"shadow-lg rounded-md overflow-hidden"})]})}Sl.default.createRoot(document.body).render((0,_e.jsx)(t,{...e}))};window.RenderError=e=>{function t({msg:s}){return(0,_e.jsx)("div",{className:"max-w-5xl mx-auto",children:(0,_e.jsx)("div",{className:"flex justify-center items-center my-12",children:(0,_e.jsx)("div",{className:"prose w-full",children:(0,_e.jsx)("code",{children:(0,_e.jsxs)("pre",{children:[" ",s," "]})})})})})}Sl.default.createRoot(document.body).render((0,_e.jsx)(t,{...e}))};})();
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=data:application/json;base64,
